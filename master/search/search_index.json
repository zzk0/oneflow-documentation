{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"","title":"\u9996\u9875"},{"location":"basics/01_quickstart.html","text":"\u5feb\u901f\u4e0a\u624b \u00b6 \u672c\u6587\u5c06\u4ee5\u8bad\u7ec3 FashionMNIST \u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u7b80\u5355\u5730\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 OneFlow \u5b8c\u6210\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u5e38\u89c1\u4efb\u52a1\u3002\u901a\u8fc7\u6587\u7ae0\u4e2d\u7684\u94fe\u63a5\u53ef\u4ee5\u8df3\u8f6c\u5230\u5404\u4e2a\u5b50\u4efb\u52a1\u7684\u4e13\u9898\u4ecb\u7ecd\u3002 \u8be6\u7ec6\u7684\u4ecb\u7ecd\u8bf7\u9605\u8bfb\u672c\u6587\u3002\u8ba9\u6211\u4eec\u5148\u4ece\u5bfc\u5165\u5fc5\u8981\u7684\u5e93\u5f00\u59cb\uff1a import oneflow as flow import oneflow.nn as nn import oneflow.utils.vision.transforms as transforms \u8bbe\u7f6e batch size \u4ee5\u53ca\u8fd0\u884c\u8bbe\u5907\uff1a BATCH_SIZE=64 DEVICE = \"cuda\" if flow.cuda.is_available() else \"cpu\" print(\"Using {} device\".format(DEVICE)) \u52a0\u8f7d\u6570\u636e \u00b6 OneFlow \u53ef\u4ee5\u4f7f\u7528 Dataset \u4e0e Dataloader \u52a0\u8f7d\u6570\u636e\u3002 oneflow.utils.vision.datasets \u6a21\u5757\u4e2d\u5305\u542b\u4e86\u4e0d\u5c11\u771f\u5b9e\u7684\u6570\u636e\u96c6(\u5982 MNIST\u3001CIFAR10\u3001FashionMNIST)\u3002 \u6211\u4eec\u901a\u8fc7 oneflow.utils.vision.datasets.FashionMNIST \u83b7\u53d6 FashionMNIST \u7684\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6570\u636e\u3002 training_data = flow . utils . vision . datasets . FashionMNIST ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) test_data = flow . utils . vision . datasets . FashionMNIST ( root = \"data\" , train = False , transform = transforms . ToTensor (), download = True , source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) \u8f93\u51fa\uff1a Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz 26422272/? [00:15<00:00, 2940814.54it/s] Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw ... \u6570\u636e\u96c6\u4e0b\u8f7d\u5e76\u89e3\u538b\u5230 ./data \u76ee\u5f55\u4e0b\u3002 \u5229\u7528 oneflow.utils.data.DataLoader \u53ef\u4ee5\u5c06 dataset \u5c01\u88c5\u4e3a\u8fed\u4ee3\u5668\uff0c\u65b9\u4fbf\u540e\u7eed\u8bad\u7ec3\u3002 train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) test_dataloader = flow . utils . data . DataLoader ( test_data , BATCH_SIZE , shuffle = False ) for x , y in train_dataloader : print ( \"x.shape:\" , x . shape ) print ( \"y.shape:\" , y . shape ) break \u8f93\u51fa\uff1a x.shape: flow.Size([64, 1, 28, 28]) y.shape: flow.Size([64]) Dataset \u4e0e Dataloader \u642d\u5efa\u7f51\u7edc \u00b6 \u60f3\u8981\u642d\u5efa\u7f51\u7edc\uff0c\u53ea\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u7ee7\u627f\u81ea nn.Module \u7684\u7c7b\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u5b83\u7684 __init__ \u65b9\u6cd5\u4e2d\u5b9a\u4e49\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784\uff0c\u5728\u5b83\u7684 forward \u65b9\u6cd5\u4e2d\u6307\u5b9a\u524d\u5411\u4f20\u64ad\u7684\u8ba1\u7b97\u903b\u8f91\u3002 class NeuralNetwork ( nn . Module ): def __init__ ( self ): super ( NeuralNetwork , self ) . __init__ () self . flatten = nn . Flatten () self . linear_relu_stack = nn . Sequential ( nn . Linear ( 28 * 28 , 512 ), nn . ReLU (), nn . Linear ( 512 , 512 ), nn . ReLU (), nn . Linear ( 512 , 10 ), ) def forward ( self , x ): x = self . flatten ( x ) logits = self . linear_relu_stack ( x ) return logits model = NeuralNetwork () . to ( DEVICE ) print ( model ) \u8f93\u51fa\uff1a NeuralNetwork( (flatten): Flatten(start_dim=1, end_dim=-1) (linear_relu_stack): Sequential( (0): Linear(in_features=784, out_features=512, bias=True) (1): ReLU() (2): Linear(in_features=512, out_features=512, bias=True) (3): ReLU() (4): Linear(in_features=512, out_features=10, bias=True) ) ) \u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u8bad\u7ec3\u6a21\u578b \u00b6 \u4e3a\u4e86\u8bad\u7ec3\u6a21\u578b\uff0c\u6211\u4eec\u9700\u8981\u635f\u5931\u51fd\u6570 loss_fn \u548c\u4f18\u5316\u5668 optimizer \uff0c\u635f\u5931\u51fd\u6570\u7528\u4e8e\u8bc4\u4ef7\u795e\u7ecf\u7f51\u7edc\u9884\u6d4b\u7684\u7ed3\u679c\u4e0e label \u7684\u5dee\u8ddd\uff1b optimizer \u8c03\u6574\u7f51\u7edc\u7684\u53c2\u6570\uff0c\u4f7f\u5f97\u7f51\u7edc\u9884\u6d4b\u7684\u7ed3\u679c\u8d8a\u6765\u8d8a\u63a5\u8fd1 label\uff08\u6807\u51c6\u7b54\u6848\uff09\uff0c\u8fd9\u91cc\u9009\u7528 oneflow.optim.SGD \u3002\u8fd9\u4e00\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u53cd\u5411\u4f20\u64ad\u3002 loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) \u5b9a\u4e49\u4e00\u4e2a train \u51fd\u6570\u8fdb\u884c\u8bad\u7ec3\uff0c\u5b8c\u6210\u524d\u5411\u4f20\u64ad\u3001\u8ba1\u7b97 loss\u3001\u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u7b49\u5de5\u4f5c\u3002 def train ( iter , model , loss_fn , optimizer ): size = len ( iter . dataset ) for batch , ( x , y ) in enumerate ( iter ): x = x . to ( DEVICE ) y = y . to ( DEVICE ) # Compute prediction error pred = model ( x ) loss = loss_fn ( pred , y ) # Backpropagation optimizer . zero_grad () loss . backward () optimizer . step () current = batch * BATCH_SIZE if batch % 100 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u540c\u65f6\uff0c\u5b9a\u4e49\u4e00\u4e2a test \u51fd\u6570\uff0c\u7528\u4e8e\u68c0\u9a8c\u6a21\u578b\u7684\u7cbe\u5ea6\uff1a def test ( iter , model , loss_fn ): size = len ( iter . dataset ) num_batches = len ( iter ) model . eval () test_loss , correct = 0 , 0 with flow . no_grad (): for x , y in iter : x = x . to ( DEVICE ) y = y . to ( DEVICE ) pred = model ( x ) test_loss += loss_fn ( pred , y ) bool_value = ( pred . argmax ( 1 ) . to ( dtype = flow . int64 ) == y ) correct += float ( bool_value . sum () . numpy ()) test_loss /= num_batches print ( \"test_loss\" , test_loss , \"num_batches \" , num_batches ) correct /= size print ( f \"Test Error: \\n Accuracy: { ( 100 * correct ) : >0.1f } , Avg loss: { test_loss : >8f } \" ) \u7136\u540e\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\uff0c\u5b9a\u4e495\u8f6e epoch\uff0c\u6bcf\u8bad\u7ec3\u5b8c\u4e00\u4e2a epoch \u90fd\u4f7f\u7528 test \u6765\u8bc4\u4f30\u4e00\u4e0b\u7f51\u7edc\u7684\u7cbe\u5ea6\uff1a epochs = 5 for t in range ( epochs ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) train ( train_dataloader , model , loss_fn , optimizer ) test ( test_dataloader , model , loss_fn ) print ( \"Done!\" ) \u8f93\u51fa\uff1a Epoch 1 ------------------------------- loss: 2.152148 [ 0/60000] loss: 2.140148 [ 6400/60000] loss: 2.147773 [12800/60000] loss: 2.088032 [19200/60000] loss: 2.074728 [25600/60000] loss: 2.034325 [32000/60000] loss: 1.994112 [38400/60000] loss: 1.984397 [44800/60000] loss: 1.918280 [51200/60000] loss: 1.884574 [57600/60000] test_loss tensor(1.9015, device='cuda:0', dtype=oneflow.float32) num_batches 157 Test Error: Accuracy: 56.3, Avg loss: 1.901461 Epoch 2 ------------------------------- loss: 1.914766 [ 0/60000] loss: 1.817333 [ 6400/60000] loss: 1.835239 [12800/60000] ... \u81ea\u52a8\u6c42\u68af\u5ea6 \u53cd\u5411\u4f20\u64ad\u4e0e optimizer \u4fdd\u5b58\u4e0e\u52a0\u8f7d\u6a21\u578b \u00b6 \u8c03\u7528 oneflow.save \u53ef\u4ee5\u4fdd\u5b58\u6a21\u578b\u3002\u4fdd\u5b58\u7684\u6a21\u578b\u53ef\u4ee5\u901a\u8fc7 oneflow.load \u52a0\u8f7d\uff0c\u7528\u4e8e\u9884\u6d4b\u7b49\u5de5\u4f5c\u3002 flow . save ( model . state_dict (), \"./model\" ) \u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58 \u4ea4\u6d41 QQ \u7fa4 \u00b6 \u5b89\u88c5\u6216\u4f7f\u7528\u8fc7\u7a0b\u9047\u5230\u95ee\u9898\uff0c\u6b22\u8fce\u5165\u7fa4\u4e0e\u4f17\u591a OneFlow \u7231\u597d\u8005\u5171\u540c\u8ba8\u8bba\u4ea4\u6d41\uff1a \u52a0 QQ \u7fa4 331883 \u6216\u626b\u63cf\u4e8c\u7ef4\u7801\uff1a","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"basics/01_quickstart.html#_1","text":"\u672c\u6587\u5c06\u4ee5\u8bad\u7ec3 FashionMNIST \u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u7b80\u5355\u5730\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 OneFlow \u5b8c\u6210\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u5e38\u89c1\u4efb\u52a1\u3002\u901a\u8fc7\u6587\u7ae0\u4e2d\u7684\u94fe\u63a5\u53ef\u4ee5\u8df3\u8f6c\u5230\u5404\u4e2a\u5b50\u4efb\u52a1\u7684\u4e13\u9898\u4ecb\u7ecd\u3002 \u8be6\u7ec6\u7684\u4ecb\u7ecd\u8bf7\u9605\u8bfb\u672c\u6587\u3002\u8ba9\u6211\u4eec\u5148\u4ece\u5bfc\u5165\u5fc5\u8981\u7684\u5e93\u5f00\u59cb\uff1a import oneflow as flow import oneflow.nn as nn import oneflow.utils.vision.transforms as transforms \u8bbe\u7f6e batch size \u4ee5\u53ca\u8fd0\u884c\u8bbe\u5907\uff1a BATCH_SIZE=64 DEVICE = \"cuda\" if flow.cuda.is_available() else \"cpu\" print(\"Using {} device\".format(DEVICE))","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"basics/01_quickstart.html#_2","text":"OneFlow \u53ef\u4ee5\u4f7f\u7528 Dataset \u4e0e Dataloader \u52a0\u8f7d\u6570\u636e\u3002 oneflow.utils.vision.datasets \u6a21\u5757\u4e2d\u5305\u542b\u4e86\u4e0d\u5c11\u771f\u5b9e\u7684\u6570\u636e\u96c6(\u5982 MNIST\u3001CIFAR10\u3001FashionMNIST)\u3002 \u6211\u4eec\u901a\u8fc7 oneflow.utils.vision.datasets.FashionMNIST \u83b7\u53d6 FashionMNIST \u7684\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6570\u636e\u3002 training_data = flow . utils . vision . datasets . FashionMNIST ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) test_data = flow . utils . vision . datasets . FashionMNIST ( root = \"data\" , train = False , transform = transforms . ToTensor (), download = True , source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) \u8f93\u51fa\uff1a Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz 26422272/? [00:15<00:00, 2940814.54it/s] Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw ... \u6570\u636e\u96c6\u4e0b\u8f7d\u5e76\u89e3\u538b\u5230 ./data \u76ee\u5f55\u4e0b\u3002 \u5229\u7528 oneflow.utils.data.DataLoader \u53ef\u4ee5\u5c06 dataset \u5c01\u88c5\u4e3a\u8fed\u4ee3\u5668\uff0c\u65b9\u4fbf\u540e\u7eed\u8bad\u7ec3\u3002 train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) test_dataloader = flow . utils . data . DataLoader ( test_data , BATCH_SIZE , shuffle = False ) for x , y in train_dataloader : print ( \"x.shape:\" , x . shape ) print ( \"y.shape:\" , y . shape ) break \u8f93\u51fa\uff1a x.shape: flow.Size([64, 1, 28, 28]) y.shape: flow.Size([64]) Dataset \u4e0e Dataloader","title":"\u52a0\u8f7d\u6570\u636e"},{"location":"basics/01_quickstart.html#_3","text":"\u60f3\u8981\u642d\u5efa\u7f51\u7edc\uff0c\u53ea\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u7ee7\u627f\u81ea nn.Module \u7684\u7c7b\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u5b83\u7684 __init__ \u65b9\u6cd5\u4e2d\u5b9a\u4e49\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784\uff0c\u5728\u5b83\u7684 forward \u65b9\u6cd5\u4e2d\u6307\u5b9a\u524d\u5411\u4f20\u64ad\u7684\u8ba1\u7b97\u903b\u8f91\u3002 class NeuralNetwork ( nn . Module ): def __init__ ( self ): super ( NeuralNetwork , self ) . __init__ () self . flatten = nn . Flatten () self . linear_relu_stack = nn . Sequential ( nn . Linear ( 28 * 28 , 512 ), nn . ReLU (), nn . Linear ( 512 , 512 ), nn . ReLU (), nn . Linear ( 512 , 10 ), ) def forward ( self , x ): x = self . flatten ( x ) logits = self . linear_relu_stack ( x ) return logits model = NeuralNetwork () . to ( DEVICE ) print ( model ) \u8f93\u51fa\uff1a NeuralNetwork( (flatten): Flatten(start_dim=1, end_dim=-1) (linear_relu_stack): Sequential( (0): Linear(in_features=784, out_features=512, bias=True) (1): ReLU() (2): Linear(in_features=512, out_features=512, bias=True) (3): ReLU() (4): Linear(in_features=512, out_features=10, bias=True) ) ) \u642d\u5efa\u795e\u7ecf\u7f51\u7edc","title":"\u642d\u5efa\u7f51\u7edc"},{"location":"basics/01_quickstart.html#_4","text":"\u4e3a\u4e86\u8bad\u7ec3\u6a21\u578b\uff0c\u6211\u4eec\u9700\u8981\u635f\u5931\u51fd\u6570 loss_fn \u548c\u4f18\u5316\u5668 optimizer \uff0c\u635f\u5931\u51fd\u6570\u7528\u4e8e\u8bc4\u4ef7\u795e\u7ecf\u7f51\u7edc\u9884\u6d4b\u7684\u7ed3\u679c\u4e0e label \u7684\u5dee\u8ddd\uff1b optimizer \u8c03\u6574\u7f51\u7edc\u7684\u53c2\u6570\uff0c\u4f7f\u5f97\u7f51\u7edc\u9884\u6d4b\u7684\u7ed3\u679c\u8d8a\u6765\u8d8a\u63a5\u8fd1 label\uff08\u6807\u51c6\u7b54\u6848\uff09\uff0c\u8fd9\u91cc\u9009\u7528 oneflow.optim.SGD \u3002\u8fd9\u4e00\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u53cd\u5411\u4f20\u64ad\u3002 loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) \u5b9a\u4e49\u4e00\u4e2a train \u51fd\u6570\u8fdb\u884c\u8bad\u7ec3\uff0c\u5b8c\u6210\u524d\u5411\u4f20\u64ad\u3001\u8ba1\u7b97 loss\u3001\u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u7b49\u5de5\u4f5c\u3002 def train ( iter , model , loss_fn , optimizer ): size = len ( iter . dataset ) for batch , ( x , y ) in enumerate ( iter ): x = x . to ( DEVICE ) y = y . to ( DEVICE ) # Compute prediction error pred = model ( x ) loss = loss_fn ( pred , y ) # Backpropagation optimizer . zero_grad () loss . backward () optimizer . step () current = batch * BATCH_SIZE if batch % 100 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u540c\u65f6\uff0c\u5b9a\u4e49\u4e00\u4e2a test \u51fd\u6570\uff0c\u7528\u4e8e\u68c0\u9a8c\u6a21\u578b\u7684\u7cbe\u5ea6\uff1a def test ( iter , model , loss_fn ): size = len ( iter . dataset ) num_batches = len ( iter ) model . eval () test_loss , correct = 0 , 0 with flow . no_grad (): for x , y in iter : x = x . to ( DEVICE ) y = y . to ( DEVICE ) pred = model ( x ) test_loss += loss_fn ( pred , y ) bool_value = ( pred . argmax ( 1 ) . to ( dtype = flow . int64 ) == y ) correct += float ( bool_value . sum () . numpy ()) test_loss /= num_batches print ( \"test_loss\" , test_loss , \"num_batches \" , num_batches ) correct /= size print ( f \"Test Error: \\n Accuracy: { ( 100 * correct ) : >0.1f } , Avg loss: { test_loss : >8f } \" ) \u7136\u540e\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\uff0c\u5b9a\u4e495\u8f6e epoch\uff0c\u6bcf\u8bad\u7ec3\u5b8c\u4e00\u4e2a epoch \u90fd\u4f7f\u7528 test \u6765\u8bc4\u4f30\u4e00\u4e0b\u7f51\u7edc\u7684\u7cbe\u5ea6\uff1a epochs = 5 for t in range ( epochs ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) train ( train_dataloader , model , loss_fn , optimizer ) test ( test_dataloader , model , loss_fn ) print ( \"Done!\" ) \u8f93\u51fa\uff1a Epoch 1 ------------------------------- loss: 2.152148 [ 0/60000] loss: 2.140148 [ 6400/60000] loss: 2.147773 [12800/60000] loss: 2.088032 [19200/60000] loss: 2.074728 [25600/60000] loss: 2.034325 [32000/60000] loss: 1.994112 [38400/60000] loss: 1.984397 [44800/60000] loss: 1.918280 [51200/60000] loss: 1.884574 [57600/60000] test_loss tensor(1.9015, device='cuda:0', dtype=oneflow.float32) num_batches 157 Test Error: Accuracy: 56.3, Avg loss: 1.901461 Epoch 2 ------------------------------- loss: 1.914766 [ 0/60000] loss: 1.817333 [ 6400/60000] loss: 1.835239 [12800/60000] ... \u81ea\u52a8\u6c42\u68af\u5ea6 \u53cd\u5411\u4f20\u64ad\u4e0e optimizer","title":"\u8bad\u7ec3\u6a21\u578b"},{"location":"basics/01_quickstart.html#_5","text":"\u8c03\u7528 oneflow.save \u53ef\u4ee5\u4fdd\u5b58\u6a21\u578b\u3002\u4fdd\u5b58\u7684\u6a21\u578b\u53ef\u4ee5\u901a\u8fc7 oneflow.load \u52a0\u8f7d\uff0c\u7528\u4e8e\u9884\u6d4b\u7b49\u5de5\u4f5c\u3002 flow . save ( model . state_dict (), \"./model\" ) \u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58","title":"\u4fdd\u5b58\u4e0e\u52a0\u8f7d\u6a21\u578b"},{"location":"basics/01_quickstart.html#qq","text":"\u5b89\u88c5\u6216\u4f7f\u7528\u8fc7\u7a0b\u9047\u5230\u95ee\u9898\uff0c\u6b22\u8fce\u5165\u7fa4\u4e0e\u4f17\u591a OneFlow \u7231\u597d\u8005\u5171\u540c\u8ba8\u8bba\u4ea4\u6d41\uff1a \u52a0 QQ \u7fa4 331883 \u6216\u626b\u63cf\u4e8c\u7ef4\u7801\uff1a","title":"\u4ea4\u6d41 QQ \u7fa4"},{"location":"basics/02_tensor.html","text":"Tensor \u5f20\u91cf \u00b6 \u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u6570\u636e\uff0c\u90fd\u5b58\u653e\u5728 Tensor \u4e2d\uff0cTensor \u7c7b\u4f3c\u591a\u7ef4\u6570\u7ec4\u6216\u8005\u6570\u5b66\u4e0a\u7684\u77e9\u9635\u3002OneFlow \u63d0\u4f9b\u4e86\u5f88\u591a\u7528\u4e8e\u64cd\u4f5c Tensor \u7684\u7b97\u5b50\uff0cTensor \u4e0e\u7b97\u5b50\u4e00\u8d77\u6784\u6210\u795e\u7ecf\u7f51\u7edc\u3002 Tensor \u6709\u522b\u4e8e\u666e\u901a\u7684\u591a\u7ef4\u6570\u7ec4\u7684\u5730\u65b9\u662f\uff1a\u9664\u4e86\u53ef\u4ee5\u8fd0\u884c\u5728 CPU \u4e0a\u5916\uff0c\u5b83\u8fd8\u53ef\u4ee5\u8fd0\u884c\u5728 \u5176\u5b83 AI \u82af\u7247\uff08\u5982 NVIDIA GPU\uff09\u4e0a\uff0c\u56e0\u6b64\u53ef\u4ee5\u63d0\u9ad8\u8fd0\u7b97\u901f\u5ea6\u3002\u6b64\u5916\uff0cOneFlow \u8fd8\u4e3a\u5f20\u91cf\u63d0\u4f9b\u4e86 \u81ea\u52a8\u6c42\u5bfc \u7684\u529f\u80fd\u3002 import oneflow as flow import numpy as np \u521b\u5efa Tensor \u00b6 \u6709\u591a\u79cd\u65b9\u6cd5\u521b\u5efa Tensor\uff0c\u5305\u62ec\uff1a \u76f4\u63a5\u4ece\u6570\u636e\u521b\u5efa \u901a\u8fc7 Numpy \u6570\u7ec4\u521b\u5efa \u4f7f\u7528\u7b97\u5b50\u521b\u5efa \u76f4\u63a5\u4ece\u6570\u636e\u521b\u5efa \u00b6 \u53ef\u4ee5\u76f4\u63a5\u4ece\u6570\u636e\u521b\u5efa Tensor\uff1a x1 = flow . tensor ([[ 1 , 2 ], [ 3 , 4 ]]) x2 = flow . tensor ([[ 1.0 , 2.0 ], [ 3.0 , 4.0 ]]) print ( x1 ) print ( x2 ) \u53ef\u4ee5\u770b\u5230\u521b\u5efa\u7684 x1 \u3001 x2 Tensor\uff0c\u5b83\u4eec\u7684\u7c7b\u578b\u5206\u522b\u662f int64 \u548c float32 \u3002 tensor([[1, 2], [3, 4]], dtype=oneflow.int64) tensor([[1., 2.], [3., 4.]], dtype=oneflow.float32) \u901a\u8fc7 Numpy \u6570\u7ec4\u521b\u5efa \u00b6 Tensor \u53ef\u4ee5\u901a\u8fc7 Numpy \u6570\u7ec4\u521b\u5efa\uff0c\u53ea\u9700\u8981\u5728\u521b\u5efa Tensor \u5bf9\u8c61\u65f6\uff0c\u5c06 Numpy \u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u5373\u53ef\u3002 x3 = flow . tensor ( np . ones (( 2 , 3 ))) x4 = flow . tensor ( np . random . rand ( 2 , 3 )) print ( x3 ) print ( x4 ) tensor([[1., 1., 1.], [1., 1., 1.]], dtype=oneflow.float64) tensor([[0.6213, 0.6142, 0.1592], [0.5539, 0.8453, 0.8576]], dtype=oneflow.float64) \u901a\u8fc7\u7b97\u5b50\u521b\u5efa \u00b6 OneFlow \u4e2d\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7b97\u5b50\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u521b\u5efa Tensor\u3002\u6bd4\u5982 ones \u3001 zeros ,\u3001 eye \uff0c\u5b83\u4eec\u5206\u522b\u521b\u5efa\u5168\u4e3a1\u7684\u5f20\u91cf\u3001\u5168\u4e3a0\u7684\u5f20\u91cf\u548c\u5355\u4f4d\u5f20\u91cf\u3002 x5 = flow . ones ( 2 , 3 ) x6 = flow . zeros ( 2 , 3 ) x7 = flow . eye ( 3 ) print ( x5 ) print ( x6 ) print ( x7 ) tensor([[1., 1., 1.], [1., 1., 1.]], dtype=oneflow.float32) tensor([[0., 0., 0.], [0., 0., 0.]], dtype=oneflow.float32) tensor([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]], dtype=oneflow.float32) randn \u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u968f\u673a\u5316\u7684\u5f20\u91cf\uff1a x8 = flow . randn ( 2 , 3 ) Tensor \u4e0e tensor \u7684\u533a\u522b \u00b6 \u7ec6\u5fc3\u7684\u7528\u6237\u4f1a\u53d1\u73b0\uff0cOneFlow \u4e2d\u6709 oneflow.Tensor \u548c oneflow.tensor \u4e24\u4e2a\u63a5\u53e3\uff0c\u5b83\u4eec\u90fd\u80fd\u7528\u6765\u521b\u5efa\u5f20\u91cf\u3002\u90a3\u4e48\u5b83\u4eec\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f \u7b80\u5355\u800c\u8a00\uff0c\u5927\u5199\u7684 Tensor \u6570\u636e\u7c7b\u578b\u9ed8\u8ba4\u9650\u5b9a\u4e3a float32 \uff0c\u800c\u5c0f\u5199\u7684 tensor \u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u968f\u7740\u521b\u5efa\u65f6\u7684\u6570\u636e\u6539\u53d8\u3002\u4ee5\u4e0b\u4ee3\u7801\u5c55\u793a\u4e86\u4e24\u8005\u8fd9\u65b9\u9762\u7684\u533a\u522b\uff1a print ( flow . Tensor ([ 1 , 2 , 3 ])) print ( flow . tensor ([ 1 , 2 , 3 ])) print ( flow . tensor ([ 1.0 , 2.0 , 3.0 ])) \u6570\u636e\u7ed3\u679c\u4e3a\uff1a tensor([1., 2., 3.], dtype=oneflow.float32) tensor([1, 2, 3], dtype=oneflow.int64) tensor([1., 2., 3.], dtype=oneflow.float32) \u6b64\u5916\uff0c\u5927\u5199\u7684 Tensor \u53ef\u4ee5\u5728\u521b\u5efa\u65f6\u4e0d\u6307\u5b9a\u5177\u4f53\u6570\u636e\uff1a x9 = flow . Tensor ( 2 , 3 ) print ( x9 . shape ) flow.Size([2, 3]) \u56e0\u6b64\uff0c\u5982\u679c\u5728\u521b\u5efa\u5f20\u91cf\u7684\u540c\u65f6\u4e0d\u60f3\u6307\u5b9a\u6570\u636e\uff0c\u90a3\u4e48\u5e38\u5e38\u7528 oneflow.Tensor \uff0c\u5426\u5219\uff0c\u5e94\u8be5\u4f7f\u7528 oneflow.tensor \u3002 Tensor \u7684\u5c5e\u6027 \u00b6 Tensor \u7684 shape \u3001 dtype \u3001 device \u5c5e\u6027\u5206\u522b\u63cf\u8ff0\u4e86 Tensor \u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u548c\u6240\u5728\u7684\u8bbe\u5907\u7c7b\u578b\u3002 x9 = flow . randn ( 1 , 4 ) print ( x9 . shape ) print ( x9 . dtype ) print ( x9 . device ) \u8f93\u51fa\u7ed3\u679c\u5206\u522b\u5c55\u793a\u4e86\u5f20\u91cf\u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u548c\u6240\u5904\u7684\u8bbe\u5907\uff08\u7b2c0\u53f7 CPU \u4e0a\uff0c\u4e4b\u6240\u4ee5\u6709\u7f16\u53f7\uff0c\u662f\u56e0\u4e3a OneFlow \u5f88\u65b9\u4fbf\u81ea\u7136\u5730\u652f\u6301\u5206\u5e03\u5f0f\uff0c\u53ef\u53c2\u8003 Global Tensor \uff09 flow.Size([1, 4]) oneflow.float32 cpu:0 \u53ef\u4ee5\u901a\u8fc7 reshape \u65b9\u6cd5\u6539\u53d8 Tensor \u7684\u5f62\u72b6\uff0c\u7528 to \u65b9\u6cd5\u6539\u53d8 Tensor \u7684\u6570\u636e\u7c7b\u578b\u548c\u6240\u5904\u8bbe\u5907\uff1a x10 = x9.reshape(2, 2) x11 = x10.to(dtype=flow.int32, device=flow.device(\"cuda\")) print(x10.shape) print(x11.dtype, x11.device) flow.Size([2, 2]) oneflow.int32 cuda:0 \u64cd\u4f5c Tensor \u7684\u5e38\u89c1\u7b97\u5b50 \u00b6 OneFlow \u4e2d\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u7b97\u5b50\uff0c\u5bf9 Tensor \u8fdb\u884c\u64cd\u4f5c\uff0c\u5b83\u4eec\u5927\u591a\u5728 oneflow \u3001 oneflow.Tensor \u3001 oneflow.nn \u3001 oneflow.nn.functional \u8fd9\u51e0\u4e2a\u540d\u79f0\u7a7a\u95f4\u4e0b\u3002 OneFlow \u4e2d\u7684 Tensor\uff0c\u4e0e Numpy \u6570\u7ec4\u4e00\u6837\u6613\u7528\u3002\u6bd4\u5982\uff0c\u652f\u6301\u4e0e Numpy \u7c7b\u4f3c\u7684\u5207\u7247\u64cd\u4f5c\uff1a tensor = flow . ones ( 4 , 4 ) print ( 'First row: ' , tensor [ 0 ]) print ( 'First column: ' , tensor [:, 0 ]) print ( 'Last column:' , tensor [ ... , - 1 ]) tensor [:, 1 ] = 0 print ( tensor ) First row: tensor([1., 1., 1., 1.], dtype=oneflow.float32) First column: tensor([1., 1., 1., 1.], dtype=oneflow.float32) Last column: tensor([1., 1., 1., 1.], dtype=oneflow.float32) tensor([[1., 0., 1., 1.], [1., 0., 1., 1.], [1., 0., 1., 1.], [1., 0., 1., 1.]], dtype=oneflow.float32) \u6b64\u5916\uff0cOneFlow \u4e2d\u8fd8\u6709\u5f88\u591a\u5176\u5b83\u64cd\u4f5c\uff0c\u5982\u7b97\u6570\u76f8\u5173\u64cd\u4f5c\u7684 add \u3001 sub \u3001 mul \u3001 div \u7b49\uff1b\u4f4d\u7f6e\u76f8\u5173\u64cd\u4f5c\u7684 scatter \u3001 gather \u3001 gather_nd \u7b49\uff1b\u4ee5\u53ca\u6fc0\u6d3b\u51fd\u6570\u3001\u5377\u79ef\u7b49\uff08 relu \u3001 conv2d \uff09\uff0c\u70b9\u51fb\u5b83\u4eec\u7684\u94fe\u63a5\u53ef\u4ee5\u67e5\u770b\u66f4\u8be6\u7ec6\u7684 API \u8bf4\u660e\uff0c\u5e76\u627e\u5230\u66f4\u591a\u7684\u5176\u5b83\u7b97\u5b50\u3002","title":"Tensor"},{"location":"basics/02_tensor.html#tensor","text":"\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u6570\u636e\uff0c\u90fd\u5b58\u653e\u5728 Tensor \u4e2d\uff0cTensor \u7c7b\u4f3c\u591a\u7ef4\u6570\u7ec4\u6216\u8005\u6570\u5b66\u4e0a\u7684\u77e9\u9635\u3002OneFlow \u63d0\u4f9b\u4e86\u5f88\u591a\u7528\u4e8e\u64cd\u4f5c Tensor \u7684\u7b97\u5b50\uff0cTensor \u4e0e\u7b97\u5b50\u4e00\u8d77\u6784\u6210\u795e\u7ecf\u7f51\u7edc\u3002 Tensor \u6709\u522b\u4e8e\u666e\u901a\u7684\u591a\u7ef4\u6570\u7ec4\u7684\u5730\u65b9\u662f\uff1a\u9664\u4e86\u53ef\u4ee5\u8fd0\u884c\u5728 CPU \u4e0a\u5916\uff0c\u5b83\u8fd8\u53ef\u4ee5\u8fd0\u884c\u5728 \u5176\u5b83 AI \u82af\u7247\uff08\u5982 NVIDIA GPU\uff09\u4e0a\uff0c\u56e0\u6b64\u53ef\u4ee5\u63d0\u9ad8\u8fd0\u7b97\u901f\u5ea6\u3002\u6b64\u5916\uff0cOneFlow \u8fd8\u4e3a\u5f20\u91cf\u63d0\u4f9b\u4e86 \u81ea\u52a8\u6c42\u5bfc \u7684\u529f\u80fd\u3002 import oneflow as flow import numpy as np","title":"Tensor \u5f20\u91cf"},{"location":"basics/02_tensor.html#tensor_1","text":"\u6709\u591a\u79cd\u65b9\u6cd5\u521b\u5efa Tensor\uff0c\u5305\u62ec\uff1a \u76f4\u63a5\u4ece\u6570\u636e\u521b\u5efa \u901a\u8fc7 Numpy \u6570\u7ec4\u521b\u5efa \u4f7f\u7528\u7b97\u5b50\u521b\u5efa","title":"\u521b\u5efa Tensor"},{"location":"basics/02_tensor.html#_1","text":"\u53ef\u4ee5\u76f4\u63a5\u4ece\u6570\u636e\u521b\u5efa Tensor\uff1a x1 = flow . tensor ([[ 1 , 2 ], [ 3 , 4 ]]) x2 = flow . tensor ([[ 1.0 , 2.0 ], [ 3.0 , 4.0 ]]) print ( x1 ) print ( x2 ) \u53ef\u4ee5\u770b\u5230\u521b\u5efa\u7684 x1 \u3001 x2 Tensor\uff0c\u5b83\u4eec\u7684\u7c7b\u578b\u5206\u522b\u662f int64 \u548c float32 \u3002 tensor([[1, 2], [3, 4]], dtype=oneflow.int64) tensor([[1., 2.], [3., 4.]], dtype=oneflow.float32)","title":"\u76f4\u63a5\u4ece\u6570\u636e\u521b\u5efa"},{"location":"basics/02_tensor.html#numpy","text":"Tensor \u53ef\u4ee5\u901a\u8fc7 Numpy \u6570\u7ec4\u521b\u5efa\uff0c\u53ea\u9700\u8981\u5728\u521b\u5efa Tensor \u5bf9\u8c61\u65f6\uff0c\u5c06 Numpy \u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u5373\u53ef\u3002 x3 = flow . tensor ( np . ones (( 2 , 3 ))) x4 = flow . tensor ( np . random . rand ( 2 , 3 )) print ( x3 ) print ( x4 ) tensor([[1., 1., 1.], [1., 1., 1.]], dtype=oneflow.float64) tensor([[0.6213, 0.6142, 0.1592], [0.5539, 0.8453, 0.8576]], dtype=oneflow.float64)","title":"\u901a\u8fc7 Numpy \u6570\u7ec4\u521b\u5efa"},{"location":"basics/02_tensor.html#_2","text":"OneFlow \u4e2d\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7b97\u5b50\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u521b\u5efa Tensor\u3002\u6bd4\u5982 ones \u3001 zeros ,\u3001 eye \uff0c\u5b83\u4eec\u5206\u522b\u521b\u5efa\u5168\u4e3a1\u7684\u5f20\u91cf\u3001\u5168\u4e3a0\u7684\u5f20\u91cf\u548c\u5355\u4f4d\u5f20\u91cf\u3002 x5 = flow . ones ( 2 , 3 ) x6 = flow . zeros ( 2 , 3 ) x7 = flow . eye ( 3 ) print ( x5 ) print ( x6 ) print ( x7 ) tensor([[1., 1., 1.], [1., 1., 1.]], dtype=oneflow.float32) tensor([[0., 0., 0.], [0., 0., 0.]], dtype=oneflow.float32) tensor([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]], dtype=oneflow.float32) randn \u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u968f\u673a\u5316\u7684\u5f20\u91cf\uff1a x8 = flow . randn ( 2 , 3 )","title":"\u901a\u8fc7\u7b97\u5b50\u521b\u5efa"},{"location":"basics/02_tensor.html#tensor-tensor","text":"\u7ec6\u5fc3\u7684\u7528\u6237\u4f1a\u53d1\u73b0\uff0cOneFlow \u4e2d\u6709 oneflow.Tensor \u548c oneflow.tensor \u4e24\u4e2a\u63a5\u53e3\uff0c\u5b83\u4eec\u90fd\u80fd\u7528\u6765\u521b\u5efa\u5f20\u91cf\u3002\u90a3\u4e48\u5b83\u4eec\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f \u7b80\u5355\u800c\u8a00\uff0c\u5927\u5199\u7684 Tensor \u6570\u636e\u7c7b\u578b\u9ed8\u8ba4\u9650\u5b9a\u4e3a float32 \uff0c\u800c\u5c0f\u5199\u7684 tensor \u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u968f\u7740\u521b\u5efa\u65f6\u7684\u6570\u636e\u6539\u53d8\u3002\u4ee5\u4e0b\u4ee3\u7801\u5c55\u793a\u4e86\u4e24\u8005\u8fd9\u65b9\u9762\u7684\u533a\u522b\uff1a print ( flow . Tensor ([ 1 , 2 , 3 ])) print ( flow . tensor ([ 1 , 2 , 3 ])) print ( flow . tensor ([ 1.0 , 2.0 , 3.0 ])) \u6570\u636e\u7ed3\u679c\u4e3a\uff1a tensor([1., 2., 3.], dtype=oneflow.float32) tensor([1, 2, 3], dtype=oneflow.int64) tensor([1., 2., 3.], dtype=oneflow.float32) \u6b64\u5916\uff0c\u5927\u5199\u7684 Tensor \u53ef\u4ee5\u5728\u521b\u5efa\u65f6\u4e0d\u6307\u5b9a\u5177\u4f53\u6570\u636e\uff1a x9 = flow . Tensor ( 2 , 3 ) print ( x9 . shape ) flow.Size([2, 3]) \u56e0\u6b64\uff0c\u5982\u679c\u5728\u521b\u5efa\u5f20\u91cf\u7684\u540c\u65f6\u4e0d\u60f3\u6307\u5b9a\u6570\u636e\uff0c\u90a3\u4e48\u5e38\u5e38\u7528 oneflow.Tensor \uff0c\u5426\u5219\uff0c\u5e94\u8be5\u4f7f\u7528 oneflow.tensor \u3002","title":"Tensor \u4e0e tensor \u7684\u533a\u522b"},{"location":"basics/02_tensor.html#tensor_2","text":"Tensor \u7684 shape \u3001 dtype \u3001 device \u5c5e\u6027\u5206\u522b\u63cf\u8ff0\u4e86 Tensor \u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u548c\u6240\u5728\u7684\u8bbe\u5907\u7c7b\u578b\u3002 x9 = flow . randn ( 1 , 4 ) print ( x9 . shape ) print ( x9 . dtype ) print ( x9 . device ) \u8f93\u51fa\u7ed3\u679c\u5206\u522b\u5c55\u793a\u4e86\u5f20\u91cf\u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u548c\u6240\u5904\u7684\u8bbe\u5907\uff08\u7b2c0\u53f7 CPU \u4e0a\uff0c\u4e4b\u6240\u4ee5\u6709\u7f16\u53f7\uff0c\u662f\u56e0\u4e3a OneFlow \u5f88\u65b9\u4fbf\u81ea\u7136\u5730\u652f\u6301\u5206\u5e03\u5f0f\uff0c\u53ef\u53c2\u8003 Global Tensor \uff09 flow.Size([1, 4]) oneflow.float32 cpu:0 \u53ef\u4ee5\u901a\u8fc7 reshape \u65b9\u6cd5\u6539\u53d8 Tensor \u7684\u5f62\u72b6\uff0c\u7528 to \u65b9\u6cd5\u6539\u53d8 Tensor \u7684\u6570\u636e\u7c7b\u578b\u548c\u6240\u5904\u8bbe\u5907\uff1a x10 = x9.reshape(2, 2) x11 = x10.to(dtype=flow.int32, device=flow.device(\"cuda\")) print(x10.shape) print(x11.dtype, x11.device) flow.Size([2, 2]) oneflow.int32 cuda:0","title":"Tensor \u7684\u5c5e\u6027"},{"location":"basics/02_tensor.html#tensor_3","text":"OneFlow \u4e2d\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u7b97\u5b50\uff0c\u5bf9 Tensor \u8fdb\u884c\u64cd\u4f5c\uff0c\u5b83\u4eec\u5927\u591a\u5728 oneflow \u3001 oneflow.Tensor \u3001 oneflow.nn \u3001 oneflow.nn.functional \u8fd9\u51e0\u4e2a\u540d\u79f0\u7a7a\u95f4\u4e0b\u3002 OneFlow \u4e2d\u7684 Tensor\uff0c\u4e0e Numpy \u6570\u7ec4\u4e00\u6837\u6613\u7528\u3002\u6bd4\u5982\uff0c\u652f\u6301\u4e0e Numpy \u7c7b\u4f3c\u7684\u5207\u7247\u64cd\u4f5c\uff1a tensor = flow . ones ( 4 , 4 ) print ( 'First row: ' , tensor [ 0 ]) print ( 'First column: ' , tensor [:, 0 ]) print ( 'Last column:' , tensor [ ... , - 1 ]) tensor [:, 1 ] = 0 print ( tensor ) First row: tensor([1., 1., 1., 1.], dtype=oneflow.float32) First column: tensor([1., 1., 1., 1.], dtype=oneflow.float32) Last column: tensor([1., 1., 1., 1.], dtype=oneflow.float32) tensor([[1., 0., 1., 1.], [1., 0., 1., 1.], [1., 0., 1., 1.], [1., 0., 1., 1.]], dtype=oneflow.float32) \u6b64\u5916\uff0cOneFlow \u4e2d\u8fd8\u6709\u5f88\u591a\u5176\u5b83\u64cd\u4f5c\uff0c\u5982\u7b97\u6570\u76f8\u5173\u64cd\u4f5c\u7684 add \u3001 sub \u3001 mul \u3001 div \u7b49\uff1b\u4f4d\u7f6e\u76f8\u5173\u64cd\u4f5c\u7684 scatter \u3001 gather \u3001 gather_nd \u7b49\uff1b\u4ee5\u53ca\u6fc0\u6d3b\u51fd\u6570\u3001\u5377\u79ef\u7b49\uff08 relu \u3001 conv2d \uff09\uff0c\u70b9\u51fb\u5b83\u4eec\u7684\u94fe\u63a5\u53ef\u4ee5\u67e5\u770b\u66f4\u8be6\u7ec6\u7684 API \u8bf4\u660e\uff0c\u5e76\u627e\u5230\u66f4\u591a\u7684\u5176\u5b83\u7b97\u5b50\u3002","title":"\u64cd\u4f5c Tensor \u7684\u5e38\u89c1\u7b97\u5b50"},{"location":"basics/03_dataset_dataloader.html","text":"Dataset \u4e0e DataLoader \u00b6 OneFlow \u7684 Dataset \u4e0e DataLoader \u7684\u884c\u4e3a\u4e0e PyTorch \u7684\u662f\u4e00\u81f4\u7684\uff0c\u90fd\u662f\u4e3a\u4e86\u8ba9\u6570\u636e\u96c6\u7ba1\u7406\u4e0e\u6a21\u578b\u8bad\u7ec3\u89e3\u8026\u3002 \u5728 oneflow.utils.vision.datasets \u4e0b\uff0c\u63d0\u4f9b\u7684\u7c7b\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u81ea\u52a8\u4e0b\u8f7d\u3001\u52a0\u8f7d\u5e38\u89c1\u7684\u6570\u636e\u96c6\uff08\u5982 FashionMNIST\uff09\u3002 DataLoader \u5c06\u6570\u636e\u96c6\u5c01\u88c5\u4e3a\u8fed\u4ee3\u5668\uff0c\u65b9\u4fbf\u8bad\u7ec3\u65f6\u904d\u5386\u5e76\u64cd\u4f5c\u6570\u636e\u3002 import matplotlib.pyplot as plt import oneflow as flow import oneflow.nn as nn from oneflow.utils.vision.transforms import ToTensor from oneflow.utils.data import Dataset import oneflow.utils.vision.datasets as datasets Dataset \u52a0\u8f7d\u6570\u636e \u00b6 \u4ee5\u4e0b\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u5185\u7f6e\u7684 Dataset \u52a0\u8f7d\u6570\u636e\u3002 root \uff1a\u6570\u636e\u96c6\u5b58\u653e\u7684\u8def\u5f84 train \uff1a True \u4ee3\u8868\u4e0b\u8f7d\u8bad\u7ec3\u96c6\u3001 False \u4ee3\u8868\u4e0b\u8f7d\u6d4b\u8bd5\u96c6 download=True \uff1a \u5982\u679c root \u8def\u5f84\u4e0b\u6570\u636e\u96c6\u4e0d\u5b58\u5728\uff0c\u5219\u4ece\u7f51\u7edc\u4e0b\u8f7d transforms \uff1a\u6307\u5b9a\u7684\u6570\u636e\u8f6c\u6362\u65b9\u5f0f training_data = datasets . FashionMNIST ( root = \"data\" , train = True , download = True , transform = ToTensor (), source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) test_data = datasets . FashionMNIST ( root = \"data\" , train = False , download = True , transform = ToTensor (), source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) \u7b2c\u4e00\u6b21\u8fd0\u884c\uff0c\u4f1a\u4e0b\u8f7d\u6570\u636e\u96c6\uff0c\u8f93\u51fa\uff1a Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-images-idx3-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz 26422272/? [00:02<00:00, 8090800.72it/s] Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-labels-idx1-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz 29696/? [00:00<00:00, 806948.09it/s] Extracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-images-idx3-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz 4422656/? [00:00<00:00, 19237994.98it/s] Extracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-labels-idx1-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz 6144/? [00:00<00:00, 152710.85it/s] Extracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw \u904d\u5386\u6570\u636e \u00b6 Dataset \u5bf9\u8c61\uff0c\u53ef\u4ee5\u50cf list \u4e00\u6837\uff0c\u7528\u4e0b\u6807\u7d22\u5f15\uff0c\u6bd4\u5982 training_data[index] \u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\uff0c\u968f\u673a\u8bbf\u95ee training_data \u4e2d\u76849\u4e2a\u56fe\u7247\uff0c\u5e76\u663e\u793a\u3002 labels_map = { 0 : \"T-Shirt\" , 1 : \"Trouser\" , 2 : \"Pullover\" , 3 : \"Dress\" , 4 : \"Coat\" , 5 : \"Sandal\" , 6 : \"Shirt\" , 7 : \"Sneaker\" , 8 : \"Bag\" , 9 : \"Ankle Boot\" , } figure = plt . figure ( figsize = ( 8 , 8 )) cols , rows = 3 , 3 from random import randint for i in range ( 1 , cols * rows + 1 ): sample_idx = randint ( 0 , len ( training_data )) img , label = training_data [ sample_idx ] figure . add_subplot ( rows , cols , i ) plt . title ( labels_map [ label ]) plt . axis ( \"off\" ) plt . imshow ( img . squeeze () . numpy (), cmap = \"gray\" ) plt . show () \u81ea\u5b9a\u4e49 Dataset \u00b6 \u901a\u8fc7\u7ee7\u627f oneflow.utils.data.Dataset \u53ef\u4ee5\u5b9e\u73b0\u81ea\u5b9a\u4e49 Dataset \uff0c\u81ea\u5b9a\u4e49 Dataset \u540c\u6837\u53ef\u4ee5\u914d\u5408\u4e0b\u4e00\u8282\u4ecb\u7ecd\u7684 Dataloader \u4f7f\u7528\uff0c\u7b80\u5316\u6570\u636e\u5904\u7406\u7684\u6d41\u7a0b\u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49 Dataset \uff0c\u5b83\u7684\u5173\u952e\u6b65\u9aa4\u662f\uff1a \u7ee7\u627f oneflow.utils.data.Dataset \u5b9e\u73b0\u7c7b\u7684 __len__ \u65b9\u6cd5\uff0c\u8fd4\u56de\u7ed3\u679c\u901a\u5e38\u4e3a\u8be5\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u6570\u91cf \u5b9e\u73b0\u7c7b\u7684 __getitem__ \u65b9\u6cd5\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u5bf9\u5e94\u4e86\u7528\u6237\uff08\u6216\u6846\u67b6\uff09\u8c03\u7528 dataset_obj[idx] \u65f6\u5f97\u5230\u7684\u7ed3\u679c import numpy as np class CustomDataset ( Dataset ): raw_data_x = np . array ([[ 1 , 2 ], [ 2 , 3 ], [ 4 , 6 ], [ 3 , 1 ]], dtype = np . float32 ) raw_label = np . array ([[ 8 ], [ 13 ], [ 26 ], [ 9 ]], dtype = np . float32 ) def __init__ ( self , transform = None , target_transform = None ): self . transform = transform self . target_transform = target_transform def __len__ ( self ): return len ( raw_label ) def __getitem__ ( self , idx ): x = CustomDataset . raw_data_x [ idx ] label = CustomDataset . raw_label [ idx ] if self . transform : x = self . transform ( x ) if self . target_transform : label = self . target_transform ( label ) return x , label custom_dataset = CustomDataset () print ( custom_dataset [ 0 ]) print ( custom_dataset [ 1 ]) \u8f93\u51fa\uff1a (array([1., 2.], dtype=float32), array([8.], dtype=float32)) (array([2., 3.], dtype=float32), array([13.], dtype=float32)) \u4f7f\u7528 DataLoader \u00b6 \u5229\u7528 Dataset \u53ef\u4ee5\u4e00\u6b21\u83b7\u53d6\u4e00\u6761\u6837\u672c\u6570\u636e\u3002\u4f46\u662f\u5728\u8bad\u7ec3\u4e2d\uff0c\u5f80\u5f80\u6709\u5176\u5b83\u7684\u9700\u6c42\uff0c\u5982\uff1a\u4e00\u6b21\u8bfb\u53d6 batch size \u4efd\u6570\u636e\uff1b1\u8f6e epoch \u8bad\u7ec3\u540e\uff0c\u6570\u636e\u91cd\u65b0\u6253\u4e71\uff08reshuffle\uff09\u7b49\u3002 \u8fd9\u65f6\u5019\uff0c\u4f7f\u7528 DataLoader \u5373\u53ef\u3002 DataLoader \u53ef\u4ee5\u5c06 Dataset \u5c01\u88c5\u4e3a\u8fed\u4ee3\u5668\uff0c\u65b9\u4fbf\u8bad\u7ec3\u5faa\u73af\u4e2d\u83b7\u53d6\u6570\u636e\u3002\u5982\u4ee5\u4e0b\u4f8b\u5b50\uff1a batch_size=64 \uff1a \u6307\u5b9a\u4e00\u6b21\u8fed\u4ee3\u8fd4\u56de\u7684\u6570\u636e batch size shuffle \uff1a\u662f\u5426\u8981\u968f\u673a\u6253\u4e71\u6570\u636e\u7684\u987a\u5e8f from oneflow.utils.data import DataLoader train_dataloader = DataLoader ( training_data , batch_size = 64 , shuffle = True ) x , label = next ( iter ( train_dataloader )) print ( f \"shape of x: { x . shape } , shape of label: { label . shape } \" ) \u8f93\u51fa\uff1a shape of x:flow.Size([64, 1, 28, 28]), shape of label: flow.Size([64]) img = x [ 0 ] . squeeze () . numpy () label = label [ 0 ] plt . imshow ( img , cmap = \"gray\" ) plt . show () print ( label ) \u8f93\u51fa\uff1a\uff08\u968f\u673a\u8f93\u51fa\u4e00\u5f20\u56fe\u7247\uff09 tensor(9, dtype=oneflow.int64) \u81ea\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u8bad\u7ec3\u7684\u5faa\u73af\u4e2d\uff0c\u4f7f\u7528 Dataloader \u8fed\u4ee3\u5668\uff1a for x , label in train_dataloader : print ( x . shape , label . shape ) # training...","title":"Dataset \u4e0e DataLoader"},{"location":"basics/03_dataset_dataloader.html#dataset-dataloader","text":"OneFlow \u7684 Dataset \u4e0e DataLoader \u7684\u884c\u4e3a\u4e0e PyTorch \u7684\u662f\u4e00\u81f4\u7684\uff0c\u90fd\u662f\u4e3a\u4e86\u8ba9\u6570\u636e\u96c6\u7ba1\u7406\u4e0e\u6a21\u578b\u8bad\u7ec3\u89e3\u8026\u3002 \u5728 oneflow.utils.vision.datasets \u4e0b\uff0c\u63d0\u4f9b\u7684\u7c7b\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u81ea\u52a8\u4e0b\u8f7d\u3001\u52a0\u8f7d\u5e38\u89c1\u7684\u6570\u636e\u96c6\uff08\u5982 FashionMNIST\uff09\u3002 DataLoader \u5c06\u6570\u636e\u96c6\u5c01\u88c5\u4e3a\u8fed\u4ee3\u5668\uff0c\u65b9\u4fbf\u8bad\u7ec3\u65f6\u904d\u5386\u5e76\u64cd\u4f5c\u6570\u636e\u3002 import matplotlib.pyplot as plt import oneflow as flow import oneflow.nn as nn from oneflow.utils.vision.transforms import ToTensor from oneflow.utils.data import Dataset import oneflow.utils.vision.datasets as datasets","title":"Dataset \u4e0e DataLoader"},{"location":"basics/03_dataset_dataloader.html#dataset","text":"\u4ee5\u4e0b\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u5185\u7f6e\u7684 Dataset \u52a0\u8f7d\u6570\u636e\u3002 root \uff1a\u6570\u636e\u96c6\u5b58\u653e\u7684\u8def\u5f84 train \uff1a True \u4ee3\u8868\u4e0b\u8f7d\u8bad\u7ec3\u96c6\u3001 False \u4ee3\u8868\u4e0b\u8f7d\u6d4b\u8bd5\u96c6 download=True \uff1a \u5982\u679c root \u8def\u5f84\u4e0b\u6570\u636e\u96c6\u4e0d\u5b58\u5728\uff0c\u5219\u4ece\u7f51\u7edc\u4e0b\u8f7d transforms \uff1a\u6307\u5b9a\u7684\u6570\u636e\u8f6c\u6362\u65b9\u5f0f training_data = datasets . FashionMNIST ( root = \"data\" , train = True , download = True , transform = ToTensor (), source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) test_data = datasets . FashionMNIST ( root = \"data\" , train = False , download = True , transform = ToTensor (), source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) \u7b2c\u4e00\u6b21\u8fd0\u884c\uff0c\u4f1a\u4e0b\u8f7d\u6570\u636e\u96c6\uff0c\u8f93\u51fa\uff1a Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-images-idx3-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz 26422272/? [00:02<00:00, 8090800.72it/s] Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-labels-idx1-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz 29696/? [00:00<00:00, 806948.09it/s] Extracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-images-idx3-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz 4422656/? [00:00<00:00, 19237994.98it/s] Extracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-labels-idx1-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz 6144/? [00:00<00:00, 152710.85it/s] Extracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw","title":"Dataset \u52a0\u8f7d\u6570\u636e"},{"location":"basics/03_dataset_dataloader.html#_1","text":"Dataset \u5bf9\u8c61\uff0c\u53ef\u4ee5\u50cf list \u4e00\u6837\uff0c\u7528\u4e0b\u6807\u7d22\u5f15\uff0c\u6bd4\u5982 training_data[index] \u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\uff0c\u968f\u673a\u8bbf\u95ee training_data \u4e2d\u76849\u4e2a\u56fe\u7247\uff0c\u5e76\u663e\u793a\u3002 labels_map = { 0 : \"T-Shirt\" , 1 : \"Trouser\" , 2 : \"Pullover\" , 3 : \"Dress\" , 4 : \"Coat\" , 5 : \"Sandal\" , 6 : \"Shirt\" , 7 : \"Sneaker\" , 8 : \"Bag\" , 9 : \"Ankle Boot\" , } figure = plt . figure ( figsize = ( 8 , 8 )) cols , rows = 3 , 3 from random import randint for i in range ( 1 , cols * rows + 1 ): sample_idx = randint ( 0 , len ( training_data )) img , label = training_data [ sample_idx ] figure . add_subplot ( rows , cols , i ) plt . title ( labels_map [ label ]) plt . axis ( \"off\" ) plt . imshow ( img . squeeze () . numpy (), cmap = \"gray\" ) plt . show ()","title":"\u904d\u5386\u6570\u636e"},{"location":"basics/03_dataset_dataloader.html#dataset_1","text":"\u901a\u8fc7\u7ee7\u627f oneflow.utils.data.Dataset \u53ef\u4ee5\u5b9e\u73b0\u81ea\u5b9a\u4e49 Dataset \uff0c\u81ea\u5b9a\u4e49 Dataset \u540c\u6837\u53ef\u4ee5\u914d\u5408\u4e0b\u4e00\u8282\u4ecb\u7ecd\u7684 Dataloader \u4f7f\u7528\uff0c\u7b80\u5316\u6570\u636e\u5904\u7406\u7684\u6d41\u7a0b\u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49 Dataset \uff0c\u5b83\u7684\u5173\u952e\u6b65\u9aa4\u662f\uff1a \u7ee7\u627f oneflow.utils.data.Dataset \u5b9e\u73b0\u7c7b\u7684 __len__ \u65b9\u6cd5\uff0c\u8fd4\u56de\u7ed3\u679c\u901a\u5e38\u4e3a\u8be5\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u6570\u91cf \u5b9e\u73b0\u7c7b\u7684 __getitem__ \u65b9\u6cd5\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u5bf9\u5e94\u4e86\u7528\u6237\uff08\u6216\u6846\u67b6\uff09\u8c03\u7528 dataset_obj[idx] \u65f6\u5f97\u5230\u7684\u7ed3\u679c import numpy as np class CustomDataset ( Dataset ): raw_data_x = np . array ([[ 1 , 2 ], [ 2 , 3 ], [ 4 , 6 ], [ 3 , 1 ]], dtype = np . float32 ) raw_label = np . array ([[ 8 ], [ 13 ], [ 26 ], [ 9 ]], dtype = np . float32 ) def __init__ ( self , transform = None , target_transform = None ): self . transform = transform self . target_transform = target_transform def __len__ ( self ): return len ( raw_label ) def __getitem__ ( self , idx ): x = CustomDataset . raw_data_x [ idx ] label = CustomDataset . raw_label [ idx ] if self . transform : x = self . transform ( x ) if self . target_transform : label = self . target_transform ( label ) return x , label custom_dataset = CustomDataset () print ( custom_dataset [ 0 ]) print ( custom_dataset [ 1 ]) \u8f93\u51fa\uff1a (array([1., 2.], dtype=float32), array([8.], dtype=float32)) (array([2., 3.], dtype=float32), array([13.], dtype=float32))","title":"\u81ea\u5b9a\u4e49 Dataset"},{"location":"basics/03_dataset_dataloader.html#dataloader","text":"\u5229\u7528 Dataset \u53ef\u4ee5\u4e00\u6b21\u83b7\u53d6\u4e00\u6761\u6837\u672c\u6570\u636e\u3002\u4f46\u662f\u5728\u8bad\u7ec3\u4e2d\uff0c\u5f80\u5f80\u6709\u5176\u5b83\u7684\u9700\u6c42\uff0c\u5982\uff1a\u4e00\u6b21\u8bfb\u53d6 batch size \u4efd\u6570\u636e\uff1b1\u8f6e epoch \u8bad\u7ec3\u540e\uff0c\u6570\u636e\u91cd\u65b0\u6253\u4e71\uff08reshuffle\uff09\u7b49\u3002 \u8fd9\u65f6\u5019\uff0c\u4f7f\u7528 DataLoader \u5373\u53ef\u3002 DataLoader \u53ef\u4ee5\u5c06 Dataset \u5c01\u88c5\u4e3a\u8fed\u4ee3\u5668\uff0c\u65b9\u4fbf\u8bad\u7ec3\u5faa\u73af\u4e2d\u83b7\u53d6\u6570\u636e\u3002\u5982\u4ee5\u4e0b\u4f8b\u5b50\uff1a batch_size=64 \uff1a \u6307\u5b9a\u4e00\u6b21\u8fed\u4ee3\u8fd4\u56de\u7684\u6570\u636e batch size shuffle \uff1a\u662f\u5426\u8981\u968f\u673a\u6253\u4e71\u6570\u636e\u7684\u987a\u5e8f from oneflow.utils.data import DataLoader train_dataloader = DataLoader ( training_data , batch_size = 64 , shuffle = True ) x , label = next ( iter ( train_dataloader )) print ( f \"shape of x: { x . shape } , shape of label: { label . shape } \" ) \u8f93\u51fa\uff1a shape of x:flow.Size([64, 1, 28, 28]), shape of label: flow.Size([64]) img = x [ 0 ] . squeeze () . numpy () label = label [ 0 ] plt . imshow ( img , cmap = \"gray\" ) plt . show () print ( label ) \u8f93\u51fa\uff1a\uff08\u968f\u673a\u8f93\u51fa\u4e00\u5f20\u56fe\u7247\uff09 tensor(9, dtype=oneflow.int64) \u81ea\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u8bad\u7ec3\u7684\u5faa\u73af\u4e2d\uff0c\u4f7f\u7528 Dataloader \u8fed\u4ee3\u5668\uff1a for x , label in train_dataloader : print ( x . shape , label . shape ) # training...","title":"\u4f7f\u7528 DataLoader"},{"location":"basics/04_build_network.html","text":"\u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u00b6 \u200b\u795e\u7ecf\u7f51\u7edc\u7684\u5404\u5c42\uff0c\u53ef\u4ee5\u4f7f\u7528 oneflow.nn \u540d\u79f0\u7a7a\u95f4\u4e0b\u7684 API \u642d\u5efa\uff0c\u5b83\u63d0\u4f9b\u4e86\u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u6240\u9700\u7684\u5e38\u89c1 Module\uff08\u5982 oneflow.nn.Conv2d \uff0c oneflow.nn.ReLU \u7b49\u7b49\uff09\u3002 \u7528\u4e8e\u642d\u5efa\u7f51\u7edc\u7684\u6240\u6709 Module \u7c7b\u90fd\u7ee7\u627f\u81ea oneflow.nn.Module \uff0c\u591a\u4e2a\u7b80\u5355\u7684 Module \u53ef\u4ee5\u7ec4\u5408\u5728\u4e00\u8d77\u6784\u6210\u66f4\u590d\u6742\u7684 Module\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5730\u642d\u5efa\u548c\u7ba1\u7406\u590d\u6742\u7684\u795e\u7ecf\u7f51\u7edc\u3002 import oneflow as flow import oneflow.nn as nn \u5b9a\u4e49 Module \u7c7b \u00b6 oneflow.nn \u4e0b\u63d0\u4f9b\u4e86\u5e38\u89c1\u7684 Module \u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\uff0c\u6216\u8005\u5728\u5b83\u4eec\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7\u81ea\u5b9a\u4e49 Module \u7c7b\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u3002\u642d\u5efa\u8fc7\u7a0b\u5305\u62ec\uff1a \u5199\u4e00\u4e2a\u7ee7\u627f\u81ea oneflow.nn.Module \u7684\u7c7b \u5b9e\u73b0\u7c7b\u7684 __init__ \u65b9\u6cd5\uff0c\u5728\u5176\u4e2d\u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784 \u5b9e\u73b0\u7c7b\u7684 forward \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u9488\u5bf9 Module \u7684\u8f93\u5165\u8fdb\u884c\u8ba1\u7b97 class NeuralNetwork ( nn . Module ): def __init__ ( self ): super ( NeuralNetwork , self ) . __init__ () self . flatten = nn . Flatten () self . linear_relu_stack = nn . Sequential ( nn . Linear ( 28 * 28 , 512 ), nn . ReLU (), nn . Linear ( 512 , 512 ), nn . ReLU (), nn . Linear ( 512 , 10 ), nn . ReLU () ) def forward ( self , x ): x = self . flatten ( x ) logits = self . linear_relu_stack ( x ) return logits net = NeuralNetwork () print ( net ) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u4f1a\u8f93\u51fa\u521a\u521a\u642d\u5efa\u7684 NeuralNetwork \u7f51\u7edc\u7684\u7ed3\u6784\uff1a NeuralNetwork( (flatten): Flatten(start_dim=1, end_dim=-1) (linear_relu_stack): Sequential( (0): Linear(in_features=784, out_features=512, bias=True) (1): ReLU() (2): Linear(in_features=512, out_features=512, bias=True) (3): ReLU() (4): Linear(in_features=512, out_features=10, bias=True) (5): ReLU() ) ) \u63a5\u7740\uff0c\u8c03\u7528 net \uff08\u6ce8\u610f\uff1a\u4e0d\u63a8\u8350\u663e\u5f0f\u8c03\u7528 forward \uff09\u5373\u53ef\u5b8c\u6210\u524d\u5411\u4f20\u64ad\uff1a X = flow . ones ( 1 , 28 , 28 ) logits = net ( X ) pred_probab = nn . Softmax ( dim = 1 )( logits ) y_pred = pred_probab . argmax ( 1 ) print ( f \"Predicted class: { y_pred } \" ) \u4f1a\u5f97\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u8f93\u51fa\u7ed3\u679c\uff1a Predicted class: tensor([1], dtype=oneflow.int32) \u4ee5\u4e0a\u4ece\u6570\u636e\u8f93\u5165\u3001\u5230\u7f51\u7edc\u8ba1\u7b97\uff0c\u6700\u7ec8\u63a8\u7406\u8f93\u51fa\u7684\u6d41\u7a0b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a flow.nn.functional \u00b6 \u9664\u4e86 oneflow.nn \u5916\uff0c oneflow.nn.functional \u540d\u79f0\u7a7a\u95f4\u4e0b\u4e5f\u63d0\u4f9b\u4e86\u4e0d\u5c11 API\u3002\u5b83\u4e0e oneflow.nn \u5728\u529f\u80fd\u4e0a\u6709\u4e00\u5b9a\u7684\u91cd\u53e0\u3002\u6bd4\u5982 nn.functional.relu \u4e0e nn.ReLU \u90fd\u53ef\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u505a activation \u64cd\u4f5c\u3002 \u4e24\u8005\u7684\u533a\u522b\u4e3b\u8981\u6709\uff1a nn \u4e0b\u7684 API \u662f\u7c7b\uff0c\u9700\u8981\u5148\u6784\u9020\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u518d\u8c03\u7528\uff1b nn.functional \u4e0b\u7684 API \u662f\u4f5c\u4e3a\u51fd\u6570\u76f4\u63a5\u8c03\u7528 nn \u4e0b\u7684\u7c7b\u5185\u90e8\u81ea\u5df1\u7ba1\u7406\u4e86\u7f51\u7edc\u53c2\u6570\uff1b\u800c nn.functional \u4e0b\u7684\u51fd\u6570\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u53c2\u6570\uff0c\u6bcf\u6b21\u8c03\u7528\u65f6\u624b\u52a8\u4f20\u5165 \u5b9e\u9645\u4e0a\uff0cOneFlow \u63d0\u4f9b\u7684\u5927\u90e8\u5206 Module \u662f\u901a\u8fc7\u5c01\u88c5 nn.functional \u4e0b\u7684\u65b9\u6cd5\u5f97\u5230\u7684\u3002 nn.functional \u63d0\u4f9b\u4e86\u66f4\u52a0\u7ec6\u7c92\u5ea6\u7ba1\u7406\u7f51\u7edc\u7684\u53ef\u80fd\u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528 nn.functional \u4e2d\u7684\u65b9\u6cd5\uff0c\u6784\u5efa\u4e0e\u4e0a\u6587\u4e2d NeuralNetwork \u7c7b\u7b49\u4ef7\u7684 Module FunctionalNeuralNetwork \uff0c\u8bfb\u8005\u53ef\u4ee5\u4f53\u4f1a\u4e24\u8005\u7684\u5f02\u540c\uff1a class FunctionalNeuralNetwork ( nn . Module ): def __init__ ( self ): super ( FunctionalNeuralNetwork , self ) . __init__ () self . weight1 = nn . Parameter ( flow . randn ( 28 * 28 , 512 )) self . bias1 = nn . Parameter ( flow . randn ( 512 )) self . weight2 = nn . Parameter ( flow . randn ( 512 , 512 )) self . bias2 = nn . Parameter ( flow . randn ( 512 )) self . weight3 = nn . Parameter ( flow . randn ( 512 , 10 )) self . bias3 = nn . Parameter ( flow . randn ( 10 )) def forward ( self , x ): x = x . reshape ( 1 , 28 * 28 ) out = flow . matmul ( x , self . weight1 ) out = out + self . bias1 out = nn . functional . relu ( out ) out = flow . matmul ( out , self . weight2 ) out = out + self . bias2 out = nn . functional . relu ( out ) out = flow . matmul ( out , self . weight3 ) out = out + self . bias3 out = nn . functional . relu ( out ) return out net = FunctionalNeuralNetwork () X = flow . ones ( 1 , 28 , 28 ) logits = net ( X ) pred_probab = nn . Softmax ( dim = 1 )( logits ) y_pred = pred_probab . argmax ( 1 ) print ( f \"Predicted class: { y_pred } \" ) Module \u5bb9\u5668 \u00b6 \u6bd4\u8f83\u4ee5\u4e0a NeuralNetwork \u4e0e FunctionalNeuralNetwork \u5b9e\u73b0\u7684\u5f02\u540c\uff0c\u53ef\u4ee5\u53d1\u73b0 nn.Sequential \u5bf9\u4e8e\u7b80\u5316\u4ee3\u7801\u8d77\u5230\u4e86\u91cd\u8981\u4f5c\u7528\u3002 nn.Sequential \u662f\u4e00\u79cd\u7279\u6b8a\u5bb9\u5668\uff0c\u53ea\u8981\u662f\u7ee7\u627f\u81ea nn.Module \u7684\u7c7b\u90fd\u53ef\u4ee5\u653e\u7f6e\u653e\u7f6e\u5230\u5176\u4e2d\u3002 \u5b83\u7684\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\uff1a\u5f53 Sequential \u8fdb\u884c\u524d\u5411\u4f20\u64ad\u65f6\uff0cSequential \u4f1a\u81ea\u52a8\u5730\u5c06\u5bb9\u5668\u4e2d\u5305\u542b\u7684\u5404\u5c42\u201c\u4e32\u8054\u201d\u8d77\u6765\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4f1a\u6309\u7167\u5404\u5c42\u52a0\u5165 Sequential \u7684\u987a\u5e8f\uff0c\u81ea\u52a8\u5730\u5c06\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\u4f20\u9012\uff0c\u76f4\u5230\u5f97\u5230\u6574\u4e2a Module \u7684\u6700\u540e\u4e00\u5c42\u7684\u8f93\u51fa\u3002 \u4ee5\u4e0b\u662f\u4e0d\u4f7f\u7528 Sequential \u6784\u5efa\u7f51\u7edc\u7684\u4f8b\u5b50\uff08\u4e0d\u63a8\u8350\uff09\uff1a class MyModel ( nn . Module ): def __init__ ( self ): super ( MyModel , self ) . __init__ () self . conv1 = nn . Conv2d ( 1 , 20 , 5 ) self . relu1 = nn . ReLU () self . conv2 = nn . Conv2d ( 20 , 64 , 5 ) self . relu2 = nn . ReLU () def forward ( self , x ): out = self . conv1 ( x ) out = self . relu1 ( out ) out = self . conv2 ( out ) out = self . relu2 ( out ) return out \u5982\u679c\u4f7f\u7528 Sequential\uff0c\u5219\u770b\u8d77\u6765\u662f\u8fd9\u6837\uff0c\u4f1a\u663e\u5f97\u66f4\u7b80\u6d01\u3002 class MySeqModel ( nn . Module ): def __init__ ( self ): super ( MySeqModel , self ) . __init__ () self . seq = nn . Sequential ( nn . Conv2d ( 1 , 20 , 5 ), nn . ReLU (), nn . Conv2d ( 20 , 64 , 5 ), nn . ReLU () ) def forward ( self , x ): return self . seq ( x ) \u9664\u4e86 Sequential \u5916\uff0c\u8fd8\u6709 nn.ModuleList \u53ca nn.ModuleDict \uff0c\u9664\u4e86\u4f1a\u81ea\u52a8\u6ce8\u518c\u53c2\u6570\u5230\u6574\u4e2a\u7f51\u7edc\u5916\uff0c\u4ed6\u4eec\u7684\u5176\u5b83\u884c\u4e3a\u7c7b\u4f3c Python list\u3001Python dict\uff0c\u53ea\u662f\u5e38\u7528\u7b80\u5355\u7684\u5bb9\u5668\uff0c\u4e0d\u4f1a\u81ea\u52a8\u8fdb\u884c\u524d\u540e\u5c42\u7684\u524d\u5411\u4f20\u64ad\uff0c\u9700\u8981\u81ea\u5df1\u624b\u5de5\u904d\u5386\u5b8c\u6210\u5404\u5c42\u7684\u8ba1\u7b97\u3002","title":"\u642d\u5efa\u795e\u7ecf\u7f51\u7edc"},{"location":"basics/04_build_network.html#_1","text":"\u200b\u795e\u7ecf\u7f51\u7edc\u7684\u5404\u5c42\uff0c\u53ef\u4ee5\u4f7f\u7528 oneflow.nn \u540d\u79f0\u7a7a\u95f4\u4e0b\u7684 API \u642d\u5efa\uff0c\u5b83\u63d0\u4f9b\u4e86\u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u6240\u9700\u7684\u5e38\u89c1 Module\uff08\u5982 oneflow.nn.Conv2d \uff0c oneflow.nn.ReLU \u7b49\u7b49\uff09\u3002 \u7528\u4e8e\u642d\u5efa\u7f51\u7edc\u7684\u6240\u6709 Module \u7c7b\u90fd\u7ee7\u627f\u81ea oneflow.nn.Module \uff0c\u591a\u4e2a\u7b80\u5355\u7684 Module \u53ef\u4ee5\u7ec4\u5408\u5728\u4e00\u8d77\u6784\u6210\u66f4\u590d\u6742\u7684 Module\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5730\u642d\u5efa\u548c\u7ba1\u7406\u590d\u6742\u7684\u795e\u7ecf\u7f51\u7edc\u3002 import oneflow as flow import oneflow.nn as nn","title":"\u642d\u5efa\u795e\u7ecf\u7f51\u7edc"},{"location":"basics/04_build_network.html#module","text":"oneflow.nn \u4e0b\u63d0\u4f9b\u4e86\u5e38\u89c1\u7684 Module \u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\uff0c\u6216\u8005\u5728\u5b83\u4eec\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7\u81ea\u5b9a\u4e49 Module \u7c7b\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u3002\u642d\u5efa\u8fc7\u7a0b\u5305\u62ec\uff1a \u5199\u4e00\u4e2a\u7ee7\u627f\u81ea oneflow.nn.Module \u7684\u7c7b \u5b9e\u73b0\u7c7b\u7684 __init__ \u65b9\u6cd5\uff0c\u5728\u5176\u4e2d\u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784 \u5b9e\u73b0\u7c7b\u7684 forward \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u9488\u5bf9 Module \u7684\u8f93\u5165\u8fdb\u884c\u8ba1\u7b97 class NeuralNetwork ( nn . Module ): def __init__ ( self ): super ( NeuralNetwork , self ) . __init__ () self . flatten = nn . Flatten () self . linear_relu_stack = nn . Sequential ( nn . Linear ( 28 * 28 , 512 ), nn . ReLU (), nn . Linear ( 512 , 512 ), nn . ReLU (), nn . Linear ( 512 , 10 ), nn . ReLU () ) def forward ( self , x ): x = self . flatten ( x ) logits = self . linear_relu_stack ( x ) return logits net = NeuralNetwork () print ( net ) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u4f1a\u8f93\u51fa\u521a\u521a\u642d\u5efa\u7684 NeuralNetwork \u7f51\u7edc\u7684\u7ed3\u6784\uff1a NeuralNetwork( (flatten): Flatten(start_dim=1, end_dim=-1) (linear_relu_stack): Sequential( (0): Linear(in_features=784, out_features=512, bias=True) (1): ReLU() (2): Linear(in_features=512, out_features=512, bias=True) (3): ReLU() (4): Linear(in_features=512, out_features=10, bias=True) (5): ReLU() ) ) \u63a5\u7740\uff0c\u8c03\u7528 net \uff08\u6ce8\u610f\uff1a\u4e0d\u63a8\u8350\u663e\u5f0f\u8c03\u7528 forward \uff09\u5373\u53ef\u5b8c\u6210\u524d\u5411\u4f20\u64ad\uff1a X = flow . ones ( 1 , 28 , 28 ) logits = net ( X ) pred_probab = nn . Softmax ( dim = 1 )( logits ) y_pred = pred_probab . argmax ( 1 ) print ( f \"Predicted class: { y_pred } \" ) \u4f1a\u5f97\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u8f93\u51fa\u7ed3\u679c\uff1a Predicted class: tensor([1], dtype=oneflow.int32) \u4ee5\u4e0a\u4ece\u6570\u636e\u8f93\u5165\u3001\u5230\u7f51\u7edc\u8ba1\u7b97\uff0c\u6700\u7ec8\u63a8\u7406\u8f93\u51fa\u7684\u6d41\u7a0b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"\u5b9a\u4e49 Module \u7c7b"},{"location":"basics/04_build_network.html#flownnfunctional","text":"\u9664\u4e86 oneflow.nn \u5916\uff0c oneflow.nn.functional \u540d\u79f0\u7a7a\u95f4\u4e0b\u4e5f\u63d0\u4f9b\u4e86\u4e0d\u5c11 API\u3002\u5b83\u4e0e oneflow.nn \u5728\u529f\u80fd\u4e0a\u6709\u4e00\u5b9a\u7684\u91cd\u53e0\u3002\u6bd4\u5982 nn.functional.relu \u4e0e nn.ReLU \u90fd\u53ef\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u505a activation \u64cd\u4f5c\u3002 \u4e24\u8005\u7684\u533a\u522b\u4e3b\u8981\u6709\uff1a nn \u4e0b\u7684 API \u662f\u7c7b\uff0c\u9700\u8981\u5148\u6784\u9020\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u518d\u8c03\u7528\uff1b nn.functional \u4e0b\u7684 API \u662f\u4f5c\u4e3a\u51fd\u6570\u76f4\u63a5\u8c03\u7528 nn \u4e0b\u7684\u7c7b\u5185\u90e8\u81ea\u5df1\u7ba1\u7406\u4e86\u7f51\u7edc\u53c2\u6570\uff1b\u800c nn.functional \u4e0b\u7684\u51fd\u6570\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u53c2\u6570\uff0c\u6bcf\u6b21\u8c03\u7528\u65f6\u624b\u52a8\u4f20\u5165 \u5b9e\u9645\u4e0a\uff0cOneFlow \u63d0\u4f9b\u7684\u5927\u90e8\u5206 Module \u662f\u901a\u8fc7\u5c01\u88c5 nn.functional \u4e0b\u7684\u65b9\u6cd5\u5f97\u5230\u7684\u3002 nn.functional \u63d0\u4f9b\u4e86\u66f4\u52a0\u7ec6\u7c92\u5ea6\u7ba1\u7406\u7f51\u7edc\u7684\u53ef\u80fd\u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528 nn.functional \u4e2d\u7684\u65b9\u6cd5\uff0c\u6784\u5efa\u4e0e\u4e0a\u6587\u4e2d NeuralNetwork \u7c7b\u7b49\u4ef7\u7684 Module FunctionalNeuralNetwork \uff0c\u8bfb\u8005\u53ef\u4ee5\u4f53\u4f1a\u4e24\u8005\u7684\u5f02\u540c\uff1a class FunctionalNeuralNetwork ( nn . Module ): def __init__ ( self ): super ( FunctionalNeuralNetwork , self ) . __init__ () self . weight1 = nn . Parameter ( flow . randn ( 28 * 28 , 512 )) self . bias1 = nn . Parameter ( flow . randn ( 512 )) self . weight2 = nn . Parameter ( flow . randn ( 512 , 512 )) self . bias2 = nn . Parameter ( flow . randn ( 512 )) self . weight3 = nn . Parameter ( flow . randn ( 512 , 10 )) self . bias3 = nn . Parameter ( flow . randn ( 10 )) def forward ( self , x ): x = x . reshape ( 1 , 28 * 28 ) out = flow . matmul ( x , self . weight1 ) out = out + self . bias1 out = nn . functional . relu ( out ) out = flow . matmul ( out , self . weight2 ) out = out + self . bias2 out = nn . functional . relu ( out ) out = flow . matmul ( out , self . weight3 ) out = out + self . bias3 out = nn . functional . relu ( out ) return out net = FunctionalNeuralNetwork () X = flow . ones ( 1 , 28 , 28 ) logits = net ( X ) pred_probab = nn . Softmax ( dim = 1 )( logits ) y_pred = pred_probab . argmax ( 1 ) print ( f \"Predicted class: { y_pred } \" )","title":"flow.nn.functional"},{"location":"basics/04_build_network.html#module_1","text":"\u6bd4\u8f83\u4ee5\u4e0a NeuralNetwork \u4e0e FunctionalNeuralNetwork \u5b9e\u73b0\u7684\u5f02\u540c\uff0c\u53ef\u4ee5\u53d1\u73b0 nn.Sequential \u5bf9\u4e8e\u7b80\u5316\u4ee3\u7801\u8d77\u5230\u4e86\u91cd\u8981\u4f5c\u7528\u3002 nn.Sequential \u662f\u4e00\u79cd\u7279\u6b8a\u5bb9\u5668\uff0c\u53ea\u8981\u662f\u7ee7\u627f\u81ea nn.Module \u7684\u7c7b\u90fd\u53ef\u4ee5\u653e\u7f6e\u653e\u7f6e\u5230\u5176\u4e2d\u3002 \u5b83\u7684\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\uff1a\u5f53 Sequential \u8fdb\u884c\u524d\u5411\u4f20\u64ad\u65f6\uff0cSequential \u4f1a\u81ea\u52a8\u5730\u5c06\u5bb9\u5668\u4e2d\u5305\u542b\u7684\u5404\u5c42\u201c\u4e32\u8054\u201d\u8d77\u6765\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4f1a\u6309\u7167\u5404\u5c42\u52a0\u5165 Sequential \u7684\u987a\u5e8f\uff0c\u81ea\u52a8\u5730\u5c06\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\u4f20\u9012\uff0c\u76f4\u5230\u5f97\u5230\u6574\u4e2a Module \u7684\u6700\u540e\u4e00\u5c42\u7684\u8f93\u51fa\u3002 \u4ee5\u4e0b\u662f\u4e0d\u4f7f\u7528 Sequential \u6784\u5efa\u7f51\u7edc\u7684\u4f8b\u5b50\uff08\u4e0d\u63a8\u8350\uff09\uff1a class MyModel ( nn . Module ): def __init__ ( self ): super ( MyModel , self ) . __init__ () self . conv1 = nn . Conv2d ( 1 , 20 , 5 ) self . relu1 = nn . ReLU () self . conv2 = nn . Conv2d ( 20 , 64 , 5 ) self . relu2 = nn . ReLU () def forward ( self , x ): out = self . conv1 ( x ) out = self . relu1 ( out ) out = self . conv2 ( out ) out = self . relu2 ( out ) return out \u5982\u679c\u4f7f\u7528 Sequential\uff0c\u5219\u770b\u8d77\u6765\u662f\u8fd9\u6837\uff0c\u4f1a\u663e\u5f97\u66f4\u7b80\u6d01\u3002 class MySeqModel ( nn . Module ): def __init__ ( self ): super ( MySeqModel , self ) . __init__ () self . seq = nn . Sequential ( nn . Conv2d ( 1 , 20 , 5 ), nn . ReLU (), nn . Conv2d ( 20 , 64 , 5 ), nn . ReLU () ) def forward ( self , x ): return self . seq ( x ) \u9664\u4e86 Sequential \u5916\uff0c\u8fd8\u6709 nn.ModuleList \u53ca nn.ModuleDict \uff0c\u9664\u4e86\u4f1a\u81ea\u52a8\u6ce8\u518c\u53c2\u6570\u5230\u6574\u4e2a\u7f51\u7edc\u5916\uff0c\u4ed6\u4eec\u7684\u5176\u5b83\u884c\u4e3a\u7c7b\u4f3c Python list\u3001Python dict\uff0c\u53ea\u662f\u5e38\u7528\u7b80\u5355\u7684\u5bb9\u5668\uff0c\u4e0d\u4f1a\u81ea\u52a8\u8fdb\u884c\u524d\u540e\u5c42\u7684\u524d\u5411\u4f20\u64ad\uff0c\u9700\u8981\u81ea\u5df1\u624b\u5de5\u904d\u5386\u5b8c\u6210\u5404\u5c42\u7684\u8ba1\u7b97\u3002","title":"Module \u5bb9\u5668"},{"location":"basics/05_autograd.html","text":"Autograd \u00b6 \u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u8fc7\u7a0b\u79bb\u4e0d\u5f00 \u53cd\u5411\u4f20\u64ad\u7b97\u6cd5 \uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u83b7\u53d6 loss \u51fd\u6570\u5bf9\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6\uff0c\u7528\u4e8e\u66f4\u65b0\u53c2\u6570\u3002 OneFlow \u63d0\u4f9b\u4e86\u81ea\u52a8\u6c42\u5bfc\u673a\u5236\uff0c\u53ef\u81ea\u52a8\u8ba1\u7b97\u795e\u7ecf\u7f51\u7edc\u4e2d\u53c2\u6570\u7684\u68af\u5ea6\u3002 \u672c\u6587\u5c06\u5148\u4ecb\u7ecd\u8ba1\u7b97\u56fe\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5b83\u6709\u5229\u4e8e\u7406\u89e3 OneFlow \u81ea\u52a8\u6c42\u5bfc\u7684\u5e38\u89c1\u8bbe\u7f6e\u53ca\u9650\u5236\uff0c\u518d\u4ecb\u7ecd OneFlow \u4e2d\u4e0e\u81ea\u52a8\u6c42\u5bfc\u6709\u5173\u7684\u5e38\u89c1\u63a5\u53e3\u3002 \u8ba1\u7b97\u56fe \u00b6 \u5f20\u91cf\u4e0e\u7b97\u5b50\uff0c\u5171\u540c\u7ec4\u6210\u8ba1\u7b97\u56fe\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a import oneflow as flow def loss ( y_pred , y ): return flow . sum ( 1 / 2 * ( y_pred - y ) ** 2 ) x = flow . ones ( 1 , 5 ) # \u8f93\u5165 w = flow . randn ( 5 , 3 , requires_grad = True ) b = flow . randn ( 1 , 3 , requires_grad = True ) z = flow . matmul ( x , w ) + b y = flow . zeros ( 1 , 3 ) # label l = loss ( z , y ) \u5b83\u5bf9\u5e94\u7684\u8ba1\u7b97\u56fe\u5982\u4e0b\uff1a \u8ba1\u7b97\u56fe\u4e2d\uff0c\u50cf x \u3001 w \u3001 b \u3001 y \u8fd9\u79cd\u53ea\u6709\u8f93\u51fa\uff0c\u6ca1\u6709\u8f93\u5165\u7684\u8282\u70b9\u79f0\u4e3a \u53f6\u5b50\u8282\u70b9 \uff1b\u50cf loss \u8fd9\u79cd\u53ea\u6709\u8f93\u5165\u6ca1\u6709\u8f93\u51fa\u7684\u8282\u70b9\uff0c\u79f0\u4e3a \u6839\u8282\u70b9 \u3002 \u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u6c42\u5f97 l \u5bf9 w \u3001 b \u7684\u68af\u5ea6\uff0c\u4ee5\u66f4\u65b0\u8fd9\u4e24\u4e2a\u6a21\u578b\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u521b\u5efa\u5b83\u4eec\u65f6\uff0c\u8bbe\u7f6e requires_grad \u4e3a True \u3002 \u81ea\u52a8\u6c42\u68af\u5ea6 \u00b6 backward \u4e0e\u68af\u5ea6 \u00b6 \u5728\u53cd\u5411\u4f20\u64ad\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5f97\u5230 l \u5206\u522b\u5bf9 w \u3001 b \u7684\u68af\u5ea6 \\(\\frac{\\partial l}{\\partial w}\\) \u548c \\(\\frac{\\partial l}{\\partial b}\\) \u3002\u6211\u4eec\u53ea\u9700\u8981\u5bf9 l \u8c03\u7528 backward() \u65b9\u6cd5\uff0c\u7136\u540e OneFlow \u5c31\u4f1a\u81ea\u52a8\u8ba1\u7b97\u68af\u5ea6\uff0c\u5e76\u4e14\u5b58\u653e\u5230 w \u4e0e b \u7684 grad \u6210\u5458\u4e2d\u3002 l . backward () print ( w . grad ) print ( b . grad ) tensor([[0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377]], dtype=oneflow.float32) tensor([[0.9397, 2.5428, 2.5377]], dtype=oneflow.float32) \u5bf9\u975e\u53f6\u5b50\u8282\u70b9\u6c42\u68af\u5ea6 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709 requires_grad=True \u7684\u53f6\u5b50\u8282\u70b9\u7684\u68af\u5ea6\u4f1a\u88ab\u4fdd\u7559\u3002\u975e\u53f6\u5b50\u8282\u70b9\u7684 grad \u5c5e\u6027\u9ed8\u8ba4\u5728 backward \u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u81ea\u52a8\u91ca\u653e\uff0c\u4e0d\u80fd\u67e5\u770b\u3002 \u5982\u679c\u60f3\u4fdd\u7559\u5e76\u67e5\u770b\u975e\u53f6\u5b50\u8282\u70b9\u7684\u68af\u5ea6\uff0c\u53ef\u4ee5\u8c03\u7528 Tensor.retain_grad \u65b9\u6cd5\uff1a from math import pi n1 = flow . tensor ( pi / 2 , requires_grad = True ) n2 = flow . sin ( n1 ) n2 . retain_grad () n3 = flow . pow ( n2 , 2 ) n3 . backward () print ( n1 . grad ) print ( n2 . grad ) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u65e2\u6c42 \\(\\frac{\\partial n_3}{\\partial n_1}\\) \uff0c\u4e5f\u6c42 \\(\\frac{\\partial n_3}{\\partial n_2}\\) \u8f93\u51fa: tensor(-8.7423e-08, dtype=oneflow.float32) tensor(2., dtype=oneflow.float32) \u5bf9\u4e00\u4e2a\u8ba1\u7b97\u56fe\u591a\u6b21 backward() \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u8ba1\u7b97\u56fe\uff0c\u53ea\u80fd\u8c03\u7528 backward() \u4e00\u6b21\u3002\u6bd4\u5982\uff0c\u4ee5\u4e0b\u4ee3\u7801\u4f1a\u62a5\u9519\uff1a n1 = flow . tensor ( 10. , requires_grad = True ) n2 = flow . pow ( n1 , 2 ) n2 . backward () n2 . backward () \u62a5\u9519\u4fe1\u606f\uff1a Maybe you try to backward through the node a second time. Specify retain_graph=True when calling .backward() or autograd.grad() the first time. \u5982\u679c\u60f3\u8981\u5728\u540c\u4e00\u4e2a\u8ba1\u7b97\u56fe\u4e0a\u8c03\u7528\u591a\u6b21 backward() \uff0c\u9700\u8981\u5728\u8c03\u7528\u65f6\u8bbe\u7f6e retain_graph=True \u3002 n1 = flow . tensor ( 10. , requires_grad = True ) n2 = flow . pow ( n1 , 2 ) n2 . backward ( retain_graph = True ) print ( n1 . grad ) n2 . backward () print ( n1 . grad ) \u8f93\u51fa\uff1a tensor(20., dtype=oneflow.float32) tensor(40., dtype=oneflow.float32) \u4ee5\u4e0a\u8f93\u51fa\u53ef\u77e5\uff0cOneFlow \u4f1a \u7d2f\u52a0 \u591a\u6b21 backward() \u8ba1\u7b97\u5f97\u5230\u7684\u68af\u5ea6\u3002 \u5982\u679c\u60f3\u6e05\u7a7a\u68af\u5ea6\uff0c\u53ef\u4ee5\u8c03\u7528 zeros_ \u65b9\u6cd5\uff1a n1 = flow . tensor ( 10. , requires_grad = True ) n2 = flow . pow ( n1 , 2 ) n2 . backward ( retain_graph = True ) print ( n1 . grad ) n1 . grad . zeros_ () n2 . backward () print ( n1 . grad ) \u8f93\u51fa\uff1a tensor(20., dtype=oneflow.float32) tensor(20., dtype=oneflow.float32) \u4e0d\u8bb0\u5f55\u67d0\u4e2a Tensor \u7684\u68af\u5ea6 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cOneFlow \u4f1a tracing requires_grad \u4e3a True \u7684 Tensor\uff0c\u81ea\u52a8\u6c42\u68af\u5ea6\u3002 \u4e0d\u8fc7\u6709\u4e9b\u60c5\u51b5\u53ef\u80fd\u5e76\u4e0d\u9700\u8981 OneFlow \u8fd9\u6837\u505a\uff0c\u6bd4\u5982\u53ea\u662f\u60f3\u8bd5\u4e00\u8bd5\u524d\u5411\u63a8\u7406\u3002\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 oneflow.no_grad \u6216 oneflow.Tensor.detach \u65b9\u6cd5\u8bbe\u7f6e\u3002 z = flow . matmul ( x , w ) + b print ( z . requires_grad ) with flow . no_grad (): z = flow . matmul ( x , w ) + b print ( z . requires_grad ) \u8f93\u51fa\uff1a True False z_det = z . detach () print ( z_det . requires_grad ) \u8f93\u51fa\uff1a False \u8f93\u51fa\u4e0d\u662f\u6807\u91cf\u65f6\u5982\u4f55\u6c42\u68af\u5ea6 \u00b6 \u901a\u5e38\uff0c\u8c03\u7528 backward() \u65b9\u6cd5\u7684\u662f\u795e\u7ecf\u7f51\u7edc\u7684 loss\uff0c\u662f\u4e00\u4e2a\u6807\u91cf\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4e0d\u662f\u6807\u91cf\uff0c\u5bf9 Tensor \u8c03\u7528 backward() \u65f6\u4f1a\u62a5\u9519\u3002 x = flow . randn ( 1 , 2 , requires_grad = True ) y = 3 * x + 1 y . backward () \u62a5\u9519\u4fe1\u606f\uff1a Check failed: IsScalarTensor(*outputs.at(i)) Grad can be implicitly created only for scalar outputs \u800c\u5bf9 y \u6c42 sum \u540e\u53ef\u4ee5\u6c42\u68af\u5ea6\uff1a x = flow . randn ( 1 , 2 , requires_grad = True ) y = 3 * x + 1 y = y . sum () y . backward () print ( x . grad ) \u8f93\u51fa\uff1a tensor([[3., 3.]], dtype=oneflow.float32) \u9519\u8bef\u539f\u56e0\u53ca\u89e3\u51b3\u65b9\u6cd5\u7684\u5206\u6790\u8bf7\u53c2\u8003\u4e0b\u6587 \u201c\u6269\u5c55\u9605\u8bfb\u201d \u90e8\u5206\u3002 \u6269\u5c55\u9605\u8bfb \u00b6 x \u5f20\u91cf\u4e2d\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u8bb0\u4f5c \\(x_1\\) \u4e0e \\(x_2\\) \uff0c y \u5f20\u91cf\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u8bb0\u4f5c \\(y_1\\) \u4e0e \\(y_2\\) \uff0c\u5e76\u4e14\u4e24\u8005\u7684\u5173\u7cfb\u662f\uff1a \\[ \\mathbf{x} = [x_1, x_2] \\] \\[ \\mathbf{y} = [y_1, y_2] = [3x_1+1, 3x_2+1] \\] \u6b64\u65f6\uff0c\u60f3\u76f4\u63a5\u6c42 \\(\\frac{\\partial \\mathbf{y}}{\\partial \\mathbf{x}}\\) \\[ \\frac{\\partial \\mathbf{y}}{\\partial \\mathbf{x}} = \\frac{[3x_1+1, 3x_2+1]}{[x_1, x_2]} \\] \u5728\u6570\u5b66\u4e0a\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u56e0\u6b64\u5f53\u7136\u5c31\u62a5\u9519\u4e86\u3002 \u5b9e\u9645\u4e0a\uff0c\u5f53\u7528\u6237\u8c03\u7528 y.backward() \u65f6\uff0c\u5176\u5b9e\u60f3\u8981\u7684\u7ed3\u679c\u901a\u5e38\u662f\uff1a \\[ [\\frac{\\partial y_1}{\\partial x_1}, \\frac{\\partial y_2}{\\partial x_2}] \\] \u5f53\u5bf9 y \u8fdb\u884c sum \u8fd0\u7b97\u540e\uff1a \\[ y = y_1 + y_2 = 3x_1 + 3x_2 + 2 \\] \u6b64\u65f6\uff0c\u8c03\u7528 backward() \u65f6\uff0c\u5bf9 \\(x_1\\) \u548c \\(x_2\\) \u53ef\u6c42\u68af\u5ea6\uff1a \\[ \\frac{\\partial y}{\\partial x_1} = \\frac{\\partial 3x_1 + 3x_2 + 2}{\\partial x_1} = 3 \\] \\[ \\frac{\\partial y}{\\partial x_2} = \\frac{\\partial 3x_1 + 3x_2 + 2}{\\partial x_2} = 3 \\] \u9664\u4e86\u4f7f\u7528 sum \u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u66f4\u901a\u7528\u65b9\u6cd5\uff0c\u5373 Vector Jacobian Product(VJP) \u5b8c\u6210\u975e\u6807\u91cf\u7684\u6839\u8282\u70b9\u7684\u68af\u5ea6\u8ba1\u7b97\u3002\u4f9d\u7136\u7528\u4e0a\u6587\u7684\u4f8b\u5b50\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0cOneFlow \u4f1a\u6839\u636e\u8ba1\u7b97\u56fe\u751f\u6210\u96c5\u53ef\u6bd4\u77e9\u9635\uff1a \\[ J = \\begin{pmatrix} \\frac{\\partial y_1}{\\partial x_1} & \\frac{\\partial y_1}{\\partial x_2}\\\\ \\frac{\\partial y_2}{\\partial x_1} & \\frac{\\partial y_2}{\\partial x_2} \\end{pmatrix}\\\\ = \\begin{pmatrix} \\frac{\\partial y_1}{\\partial x_1} & 0 \\\\ 0 & \\frac{\\partial y_2}{\\partial x_2} \\end{pmatrix} \\] \u53ea\u9700\u63d0\u4f9b\u4e00\u4e2a\u4e0e \\(\\mathbf{y}\\) \u5927\u5c0f\u4e00\u81f4\u7684\u5411\u91cf \\(\\mathbf{v}\\) \uff0c\u5373\u53ef\u8ba1\u7b97 VJP\uff1a \\[ \\begin{bmatrix} v_1\\\\ v_2 \\end{bmatrix} \\times \\begin{pmatrix} \\frac{\\partial y_1}{\\partial x_1} & 0 \\\\ 0 & \\frac{\\partial y_2}{\\partial x_2} \\end{pmatrix}= \\begin{bmatrix} v_1 \\frac{\\partial y_1}{\\partial x_1}\\\\ v_2 \\frac{\\partial y_2}{\\partial x_2} \\end{bmatrix} \\] \u82e5\u5411\u91cf \\(\\mathbf{v}\\) \u662f\u53cd\u5411\u4f20\u64ad\u4e2d\u4e0a\u4e00\u5c42\u7684\u68af\u5ea6\uff0cVJP \u7684\u7ed3\u679c\u521a\u597d\u662f\u5f53\u524d\u5c42\u8981\u6c42\u7684\u68af\u5ea6\u3002 backward \u65b9\u6cd5\u662f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5f20\u91cf\u505a\u53c2\u6570\u7684\uff0c\u8be5\u53c2\u6570\u5c31\u662f VJP \u4e2d\u7684 \\(\\mathbf{v}\\) \uff0c\u7406\u89e3\u4ee5\u4e0a\u9053\u7406\u540e\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7684\u65b9\u5f0f\u5bf9\u5f20\u91cf\u6c42\u68af\u5ea6\uff1a x = flow . randn ( 1 , 2 , requires_grad = True ) y = 3 * x + 1 y . backward ( flow . ones_like ( y )) print ( x . grad ) \u8f93\u51fa\uff1a tensor([[3., 3.]], dtype=oneflow.float32) \u5916\u90e8\u94fe\u63a5 Automatic Differentiation","title":"Autograd"},{"location":"basics/05_autograd.html#autograd","text":"\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u8fc7\u7a0b\u79bb\u4e0d\u5f00 \u53cd\u5411\u4f20\u64ad\u7b97\u6cd5 \uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u83b7\u53d6 loss \u51fd\u6570\u5bf9\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6\uff0c\u7528\u4e8e\u66f4\u65b0\u53c2\u6570\u3002 OneFlow \u63d0\u4f9b\u4e86\u81ea\u52a8\u6c42\u5bfc\u673a\u5236\uff0c\u53ef\u81ea\u52a8\u8ba1\u7b97\u795e\u7ecf\u7f51\u7edc\u4e2d\u53c2\u6570\u7684\u68af\u5ea6\u3002 \u672c\u6587\u5c06\u5148\u4ecb\u7ecd\u8ba1\u7b97\u56fe\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5b83\u6709\u5229\u4e8e\u7406\u89e3 OneFlow \u81ea\u52a8\u6c42\u5bfc\u7684\u5e38\u89c1\u8bbe\u7f6e\u53ca\u9650\u5236\uff0c\u518d\u4ecb\u7ecd OneFlow \u4e2d\u4e0e\u81ea\u52a8\u6c42\u5bfc\u6709\u5173\u7684\u5e38\u89c1\u63a5\u53e3\u3002","title":"Autograd"},{"location":"basics/05_autograd.html#_1","text":"\u5f20\u91cf\u4e0e\u7b97\u5b50\uff0c\u5171\u540c\u7ec4\u6210\u8ba1\u7b97\u56fe\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a import oneflow as flow def loss ( y_pred , y ): return flow . sum ( 1 / 2 * ( y_pred - y ) ** 2 ) x = flow . ones ( 1 , 5 ) # \u8f93\u5165 w = flow . randn ( 5 , 3 , requires_grad = True ) b = flow . randn ( 1 , 3 , requires_grad = True ) z = flow . matmul ( x , w ) + b y = flow . zeros ( 1 , 3 ) # label l = loss ( z , y ) \u5b83\u5bf9\u5e94\u7684\u8ba1\u7b97\u56fe\u5982\u4e0b\uff1a \u8ba1\u7b97\u56fe\u4e2d\uff0c\u50cf x \u3001 w \u3001 b \u3001 y \u8fd9\u79cd\u53ea\u6709\u8f93\u51fa\uff0c\u6ca1\u6709\u8f93\u5165\u7684\u8282\u70b9\u79f0\u4e3a \u53f6\u5b50\u8282\u70b9 \uff1b\u50cf loss \u8fd9\u79cd\u53ea\u6709\u8f93\u5165\u6ca1\u6709\u8f93\u51fa\u7684\u8282\u70b9\uff0c\u79f0\u4e3a \u6839\u8282\u70b9 \u3002 \u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u6c42\u5f97 l \u5bf9 w \u3001 b \u7684\u68af\u5ea6\uff0c\u4ee5\u66f4\u65b0\u8fd9\u4e24\u4e2a\u6a21\u578b\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u521b\u5efa\u5b83\u4eec\u65f6\uff0c\u8bbe\u7f6e requires_grad \u4e3a True \u3002","title":"\u8ba1\u7b97\u56fe"},{"location":"basics/05_autograd.html#_2","text":"","title":"\u81ea\u52a8\u6c42\u68af\u5ea6"},{"location":"basics/05_autograd.html#backward","text":"\u5728\u53cd\u5411\u4f20\u64ad\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5f97\u5230 l \u5206\u522b\u5bf9 w \u3001 b \u7684\u68af\u5ea6 \\(\\frac{\\partial l}{\\partial w}\\) \u548c \\(\\frac{\\partial l}{\\partial b}\\) \u3002\u6211\u4eec\u53ea\u9700\u8981\u5bf9 l \u8c03\u7528 backward() \u65b9\u6cd5\uff0c\u7136\u540e OneFlow \u5c31\u4f1a\u81ea\u52a8\u8ba1\u7b97\u68af\u5ea6\uff0c\u5e76\u4e14\u5b58\u653e\u5230 w \u4e0e b \u7684 grad \u6210\u5458\u4e2d\u3002 l . backward () print ( w . grad ) print ( b . grad ) tensor([[0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377]], dtype=oneflow.float32) tensor([[0.9397, 2.5428, 2.5377]], dtype=oneflow.float32)","title":"backward \u4e0e\u68af\u5ea6"},{"location":"basics/05_autograd.html#_3","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709 requires_grad=True \u7684\u53f6\u5b50\u8282\u70b9\u7684\u68af\u5ea6\u4f1a\u88ab\u4fdd\u7559\u3002\u975e\u53f6\u5b50\u8282\u70b9\u7684 grad \u5c5e\u6027\u9ed8\u8ba4\u5728 backward \u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u81ea\u52a8\u91ca\u653e\uff0c\u4e0d\u80fd\u67e5\u770b\u3002 \u5982\u679c\u60f3\u4fdd\u7559\u5e76\u67e5\u770b\u975e\u53f6\u5b50\u8282\u70b9\u7684\u68af\u5ea6\uff0c\u53ef\u4ee5\u8c03\u7528 Tensor.retain_grad \u65b9\u6cd5\uff1a from math import pi n1 = flow . tensor ( pi / 2 , requires_grad = True ) n2 = flow . sin ( n1 ) n2 . retain_grad () n3 = flow . pow ( n2 , 2 ) n3 . backward () print ( n1 . grad ) print ( n2 . grad ) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u65e2\u6c42 \\(\\frac{\\partial n_3}{\\partial n_1}\\) \uff0c\u4e5f\u6c42 \\(\\frac{\\partial n_3}{\\partial n_2}\\) \u8f93\u51fa: tensor(-8.7423e-08, dtype=oneflow.float32) tensor(2., dtype=oneflow.float32)","title":"\u5bf9\u975e\u53f6\u5b50\u8282\u70b9\u6c42\u68af\u5ea6"},{"location":"basics/05_autograd.html#backward_1","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u8ba1\u7b97\u56fe\uff0c\u53ea\u80fd\u8c03\u7528 backward() \u4e00\u6b21\u3002\u6bd4\u5982\uff0c\u4ee5\u4e0b\u4ee3\u7801\u4f1a\u62a5\u9519\uff1a n1 = flow . tensor ( 10. , requires_grad = True ) n2 = flow . pow ( n1 , 2 ) n2 . backward () n2 . backward () \u62a5\u9519\u4fe1\u606f\uff1a Maybe you try to backward through the node a second time. Specify retain_graph=True when calling .backward() or autograd.grad() the first time. \u5982\u679c\u60f3\u8981\u5728\u540c\u4e00\u4e2a\u8ba1\u7b97\u56fe\u4e0a\u8c03\u7528\u591a\u6b21 backward() \uff0c\u9700\u8981\u5728\u8c03\u7528\u65f6\u8bbe\u7f6e retain_graph=True \u3002 n1 = flow . tensor ( 10. , requires_grad = True ) n2 = flow . pow ( n1 , 2 ) n2 . backward ( retain_graph = True ) print ( n1 . grad ) n2 . backward () print ( n1 . grad ) \u8f93\u51fa\uff1a tensor(20., dtype=oneflow.float32) tensor(40., dtype=oneflow.float32) \u4ee5\u4e0a\u8f93\u51fa\u53ef\u77e5\uff0cOneFlow \u4f1a \u7d2f\u52a0 \u591a\u6b21 backward() \u8ba1\u7b97\u5f97\u5230\u7684\u68af\u5ea6\u3002 \u5982\u679c\u60f3\u6e05\u7a7a\u68af\u5ea6\uff0c\u53ef\u4ee5\u8c03\u7528 zeros_ \u65b9\u6cd5\uff1a n1 = flow . tensor ( 10. , requires_grad = True ) n2 = flow . pow ( n1 , 2 ) n2 . backward ( retain_graph = True ) print ( n1 . grad ) n1 . grad . zeros_ () n2 . backward () print ( n1 . grad ) \u8f93\u51fa\uff1a tensor(20., dtype=oneflow.float32) tensor(20., dtype=oneflow.float32)","title":"\u5bf9\u4e00\u4e2a\u8ba1\u7b97\u56fe\u591a\u6b21 backward()"},{"location":"basics/05_autograd.html#tensor","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cOneFlow \u4f1a tracing requires_grad \u4e3a True \u7684 Tensor\uff0c\u81ea\u52a8\u6c42\u68af\u5ea6\u3002 \u4e0d\u8fc7\u6709\u4e9b\u60c5\u51b5\u53ef\u80fd\u5e76\u4e0d\u9700\u8981 OneFlow \u8fd9\u6837\u505a\uff0c\u6bd4\u5982\u53ea\u662f\u60f3\u8bd5\u4e00\u8bd5\u524d\u5411\u63a8\u7406\u3002\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 oneflow.no_grad \u6216 oneflow.Tensor.detach \u65b9\u6cd5\u8bbe\u7f6e\u3002 z = flow . matmul ( x , w ) + b print ( z . requires_grad ) with flow . no_grad (): z = flow . matmul ( x , w ) + b print ( z . requires_grad ) \u8f93\u51fa\uff1a True False z_det = z . detach () print ( z_det . requires_grad ) \u8f93\u51fa\uff1a False","title":"\u4e0d\u8bb0\u5f55\u67d0\u4e2a Tensor \u7684\u68af\u5ea6"},{"location":"basics/05_autograd.html#_4","text":"\u901a\u5e38\uff0c\u8c03\u7528 backward() \u65b9\u6cd5\u7684\u662f\u795e\u7ecf\u7f51\u7edc\u7684 loss\uff0c\u662f\u4e00\u4e2a\u6807\u91cf\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4e0d\u662f\u6807\u91cf\uff0c\u5bf9 Tensor \u8c03\u7528 backward() \u65f6\u4f1a\u62a5\u9519\u3002 x = flow . randn ( 1 , 2 , requires_grad = True ) y = 3 * x + 1 y . backward () \u62a5\u9519\u4fe1\u606f\uff1a Check failed: IsScalarTensor(*outputs.at(i)) Grad can be implicitly created only for scalar outputs \u800c\u5bf9 y \u6c42 sum \u540e\u53ef\u4ee5\u6c42\u68af\u5ea6\uff1a x = flow . randn ( 1 , 2 , requires_grad = True ) y = 3 * x + 1 y = y . sum () y . backward () print ( x . grad ) \u8f93\u51fa\uff1a tensor([[3., 3.]], dtype=oneflow.float32) \u9519\u8bef\u539f\u56e0\u53ca\u89e3\u51b3\u65b9\u6cd5\u7684\u5206\u6790\u8bf7\u53c2\u8003\u4e0b\u6587 \u201c\u6269\u5c55\u9605\u8bfb\u201d \u90e8\u5206\u3002","title":"\u8f93\u51fa\u4e0d\u662f\u6807\u91cf\u65f6\u5982\u4f55\u6c42\u68af\u5ea6"},{"location":"basics/05_autograd.html#_5","text":"x \u5f20\u91cf\u4e2d\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u8bb0\u4f5c \\(x_1\\) \u4e0e \\(x_2\\) \uff0c y \u5f20\u91cf\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u8bb0\u4f5c \\(y_1\\) \u4e0e \\(y_2\\) \uff0c\u5e76\u4e14\u4e24\u8005\u7684\u5173\u7cfb\u662f\uff1a \\[ \\mathbf{x} = [x_1, x_2] \\] \\[ \\mathbf{y} = [y_1, y_2] = [3x_1+1, 3x_2+1] \\] \u6b64\u65f6\uff0c\u60f3\u76f4\u63a5\u6c42 \\(\\frac{\\partial \\mathbf{y}}{\\partial \\mathbf{x}}\\) \\[ \\frac{\\partial \\mathbf{y}}{\\partial \\mathbf{x}} = \\frac{[3x_1+1, 3x_2+1]}{[x_1, x_2]} \\] \u5728\u6570\u5b66\u4e0a\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u56e0\u6b64\u5f53\u7136\u5c31\u62a5\u9519\u4e86\u3002 \u5b9e\u9645\u4e0a\uff0c\u5f53\u7528\u6237\u8c03\u7528 y.backward() \u65f6\uff0c\u5176\u5b9e\u60f3\u8981\u7684\u7ed3\u679c\u901a\u5e38\u662f\uff1a \\[ [\\frac{\\partial y_1}{\\partial x_1}, \\frac{\\partial y_2}{\\partial x_2}] \\] \u5f53\u5bf9 y \u8fdb\u884c sum \u8fd0\u7b97\u540e\uff1a \\[ y = y_1 + y_2 = 3x_1 + 3x_2 + 2 \\] \u6b64\u65f6\uff0c\u8c03\u7528 backward() \u65f6\uff0c\u5bf9 \\(x_1\\) \u548c \\(x_2\\) \u53ef\u6c42\u68af\u5ea6\uff1a \\[ \\frac{\\partial y}{\\partial x_1} = \\frac{\\partial 3x_1 + 3x_2 + 2}{\\partial x_1} = 3 \\] \\[ \\frac{\\partial y}{\\partial x_2} = \\frac{\\partial 3x_1 + 3x_2 + 2}{\\partial x_2} = 3 \\] \u9664\u4e86\u4f7f\u7528 sum \u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u66f4\u901a\u7528\u65b9\u6cd5\uff0c\u5373 Vector Jacobian Product(VJP) \u5b8c\u6210\u975e\u6807\u91cf\u7684\u6839\u8282\u70b9\u7684\u68af\u5ea6\u8ba1\u7b97\u3002\u4f9d\u7136\u7528\u4e0a\u6587\u7684\u4f8b\u5b50\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0cOneFlow \u4f1a\u6839\u636e\u8ba1\u7b97\u56fe\u751f\u6210\u96c5\u53ef\u6bd4\u77e9\u9635\uff1a \\[ J = \\begin{pmatrix} \\frac{\\partial y_1}{\\partial x_1} & \\frac{\\partial y_1}{\\partial x_2}\\\\ \\frac{\\partial y_2}{\\partial x_1} & \\frac{\\partial y_2}{\\partial x_2} \\end{pmatrix}\\\\ = \\begin{pmatrix} \\frac{\\partial y_1}{\\partial x_1} & 0 \\\\ 0 & \\frac{\\partial y_2}{\\partial x_2} \\end{pmatrix} \\] \u53ea\u9700\u63d0\u4f9b\u4e00\u4e2a\u4e0e \\(\\mathbf{y}\\) \u5927\u5c0f\u4e00\u81f4\u7684\u5411\u91cf \\(\\mathbf{v}\\) \uff0c\u5373\u53ef\u8ba1\u7b97 VJP\uff1a \\[ \\begin{bmatrix} v_1\\\\ v_2 \\end{bmatrix} \\times \\begin{pmatrix} \\frac{\\partial y_1}{\\partial x_1} & 0 \\\\ 0 & \\frac{\\partial y_2}{\\partial x_2} \\end{pmatrix}= \\begin{bmatrix} v_1 \\frac{\\partial y_1}{\\partial x_1}\\\\ v_2 \\frac{\\partial y_2}{\\partial x_2} \\end{bmatrix} \\] \u82e5\u5411\u91cf \\(\\mathbf{v}\\) \u662f\u53cd\u5411\u4f20\u64ad\u4e2d\u4e0a\u4e00\u5c42\u7684\u68af\u5ea6\uff0cVJP \u7684\u7ed3\u679c\u521a\u597d\u662f\u5f53\u524d\u5c42\u8981\u6c42\u7684\u68af\u5ea6\u3002 backward \u65b9\u6cd5\u662f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5f20\u91cf\u505a\u53c2\u6570\u7684\uff0c\u8be5\u53c2\u6570\u5c31\u662f VJP \u4e2d\u7684 \\(\\mathbf{v}\\) \uff0c\u7406\u89e3\u4ee5\u4e0a\u9053\u7406\u540e\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7684\u65b9\u5f0f\u5bf9\u5f20\u91cf\u6c42\u68af\u5ea6\uff1a x = flow . randn ( 1 , 2 , requires_grad = True ) y = 3 * x + 1 y . backward ( flow . ones_like ( y )) print ( x . grad ) \u8f93\u51fa\uff1a tensor([[3., 3.]], dtype=oneflow.float32) \u5916\u90e8\u94fe\u63a5 Automatic Differentiation","title":"\u6269\u5c55\u9605\u8bfb"},{"location":"basics/06_optimization.html","text":"\u53cd\u5411\u4f20\u64ad\u4e0e optimizer \u00b6 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u638c\u63e1\u5982\u4f55\u4f7f\u7528 OneFlow \u52a0\u8f7d\u6570\u636e \u3001 \u642d\u5efa\u6a21\u578b \u3001 \u81ea\u52a8\u8ba1\u7b97\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6 \uff0c\u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u8bad\u7ec3\u6a21\u578b\u3002 \u5728 oneflow.optim \u4e2d\uff0c\u6709\u5404\u7c7b optimizer \uff0c\u5b83\u4eec\u53ef\u4ee5\u7b80\u5316\u5b9e\u73b0\u53cd\u5411\u4f20\u64ad\u7684\u4ee3\u7801\u3002 \u672c\u6587\u5c06\u5148\u4ecb\u7ecd\u53cd\u5411\u4f20\u64ad\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u518d\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 oneflow.optim \u7c7b\u3002 numpy \u624b\u5de5\u5b9e\u73b0\u53cd\u5411\u4f20\u64ad \u00b6 \u4e3a\u4e86\u8bfb\u8005\u66f4\u65b9\u4fbf\u7406\u89e3\u53cd\u5411\u4f20\u64ad\u4e0e\u81ea\u52a8\u6c42\u5bfc\u7684\u5173\u7cfb\uff0c\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e86\u4e00\u4efd\u4ec5\u7528 numpy \u5b9e\u73b0\u7684\u7b80\u5355\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\uff1a import numpy as np ITER_COUNT = 500 LR = 0.01 # \u524d\u5411\u4f20\u64ad def forward ( x , w ): return np . matmul ( x , w ) # \u635f\u5931\u51fd\u6570 def loss ( y_pred , y ): return (( y_pred - y ) ** 2 ) . sum () # \u8ba1\u7b97\u68af\u5ea6 def gradient ( x , y , y_pred ): return np . matmul ( x . T , 2 * ( y_pred - y )) if __name__ == \"__main__\" : # \u8bad\u7ec3\u76ee\u6807: Y = 2*X1 + 3*X2 x = np . array ([[ 1 , 2 ], [ 2 , 3 ], [ 4 , 6 ], [ 3 , 1 ]], dtype = np . float32 ) y = np . array ([[ 8 ], [ 13 ], [ 26 ], [ 9 ]], dtype = np . float32 ) w = np . array ([[ 2 ], [ 1 ]], dtype = np . float32 ) # \u8bad\u7ec3\u5faa\u73af for i in range ( 0 , ITER_COUNT ): y_pred = forward ( x , w ) l = loss ( y_pred , y ) if ( i + 1 ) % 50 == 0 : print ( f \" { i + 1 } / { 500 } loss: { l } \" ) grad = gradient ( x , y , y_pred ) w -= LR * grad print ( f \"w: { w } \" ) \u8f93\u51fa\uff1a 50/500 loss:0.0034512376878410578 100/500 loss:1.965487399502308e-06 150/500 loss:1.05524122773204e-09 200/500 loss:3.865352482534945e-12 250/500 loss:3.865352482534945e-12 300/500 loss:3.865352482534945e-12 350/500 loss:3.865352482534945e-12 400/500 loss:3.865352482534945e-12 450/500 loss:3.865352482534945e-12 500/500 loss:3.865352482534945e-12 w:[[2.000001 ] [2.9999993]] \u6ce8\u610f\u6211\u4eec\u9009\u62e9\u7684 loss \u51fd\u6570\u8868\u8fbe\u5f0f\u4e3a \\(\\sum (y_{p} - y)^2\\) \uff0c\u56e0\u6b64 loss \u5bf9\u53c2\u6570 w \u6c42\u68af\u5ea6\u7684\u4ee3\u7801\u4e3a\uff1a def gradient ( x , y , y_pred ): return np . matmul ( x . T , 2 * ( y_pred - y )) \u66f4\u65b0\u53c2\u6570\u91c7\u7528\u7684\u662f SGD \uff1a grad = gradient ( x , y , y_pred ) w -= LR * grad \u603b\u7ed3\u800c\u8a00\uff0c\u8bad\u7ec3\u4e2d\u7684\u4e00\u6b21\u5b8c\u6574\u8fed\u4ee3\u5305\u62ec\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u6a21\u578b\u6839\u636e\u8f93\u5165\u3001\u53c2\u6570\uff0c\u8ba1\u7b97\u5f97\u51fa\u9884\u6d4b\u503c ( y_pred ) \u8ba1\u7b97 loss\uff0c\u5373\u9884\u6d4b\u503c\u4e0e\u6807\u7b7e\u4e4b\u95f4\u7684\u8bef\u5dee \u6c42 loss \u5bf9\u53c2\u6570\u7684\u68af\u5ea6 \u66f4\u65b0\u53c2\u6570 \u5176\u4e2d 1~2 \u4e3a\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\uff1b3~4\u4e3a\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u3002 \u8d85\u53c2 Hyperparameters \u00b6 \u8d85\u53c2\u6570\u662f\u6709\u5173\u6a21\u578b\u8bad\u7ec3\u8bbe\u7f6e\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u5f71\u54cd\u5230\u6a21\u578b\u8bad\u7ec3\u7684\u6548\u7387\u548c\u7ed3\u679c\u3002\u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 ITER_COUNT \u3001 LR \u5c31\u662f\u8d85\u53c2\u6570\u3002 \u4f7f\u7528 oneflow.optim \u4e2d\u7684\u4f18\u5316\u5668\u7c7b \u00b6 \u4f7f\u7528 oneflow.optim \u4e2d\u7684\u4f18\u5316\u5668\u7c7b\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u4f1a\u66f4\u7b80\u6d01\u65b9\u4fbf\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u3002 \u9996\u5148\uff0c\u5148\u51c6\u5907\u597d\u6570\u636e\u548c\u6a21\u578b\uff0c\u4f7f\u7528 Module \u7684\u4e00\u4e2a\u65b9\u4fbf\u4e4b\u5904\u5c31\u662f\uff0c\u53ef\u4ee5\u628a\u8d85\u53c2\u653e\u7f6e\u5728 Module \u4e2d\u4fbf\u4e8e\u7ba1\u7406\u3002 import oneflow as flow x = flow . tensor ([[ 1 , 2 ], [ 2 , 3 ], [ 4 , 6 ], [ 3 , 1 ]], dtype = flow . float32 ) y = flow . tensor ([[ 8 ], [ 13 ], [ 26 ], [ 9 ]], dtype = flow . float32 ) class MyLrModule ( flow . nn . Module ): def __init__ ( self , lr , iter_count ): super () . __init__ () self . w = flow . nn . Parameter ( flow . tensor ([[ 2 ], [ 1 ]], dtype = flow . float32 )) self . lr = lr self . iter_count = iter_count def forward ( self , x ): return flow . matmul ( x , self . w ) model = MyLrModule ( 0.01 , 500 ) loss \u51fd\u6570 \u00b6 \u7136\u540e\uff0c\u9009\u62e9\u597d loss \u51fd\u6570\uff0cOneFlow \u81ea\u5e26\u4e86\u591a\u79cd loss \u51fd\u6570\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u9009\u62e9 MSELoss \uff1a loss = flow . nn . MSELoss ( reduction = \"sum\" ) \u6784\u9020 optimizer \u00b6 \u53cd\u5411\u4f20\u64ad\u7684\u903b\u8f91\uff0c\u90fd\u88ab\u5c01\u88c5\u5728 optimizer \u4e2d\u3002\u6211\u4eec\u5728\u6b64\u9009\u62e9 SGD \uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u9009\u62e9\u5176\u5b83\u7684\u4f18\u5316\u7b97\u6cd5\uff0c\u5982 Adam \u3001 AdamW \u7b49\u3002 optimizer = flow . optim . SGD ( model . parameters (), model . lr ) \u6784\u9020 optimizer \u65f6\uff0c\u5c06\u6a21\u578b\u53c2\u6570\u53ca learning rate \u4f20\u9012\u7ed9 SGD \u3002\u4e4b\u540e\u8c03\u7528 optimizer.step() \uff0c\u5728\u5176\u5185\u90e8\u5c31\u4f1a\u81ea\u52a8\u5b8c\u6210\u5bf9\u6a21\u578b\u53c2\u6570\u6c42\u68af\u5ea6\u3001\u5e76\u6309\u7167 SGD \u7b97\u6cd5\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u3002 \u8bad\u7ec3 \u00b6 \u4ee5\u4e0a\u51c6\u5907\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\uff1a for i in range ( 0 , model . iter_count ): y_pred = model ( x ) l = loss ( y_pred , y ) if ( i + 1 ) % 50 == 0 : print ( f \" { i + 1 } / { model . iter_count } loss: { l . numpy () } \" ) optimizer . zero_grad () l . backward () optimizer . step () print ( f \" \\n w: { model . w } \" ) \u8f93\u51fa\uff1a 50/500 loss:0.003451163647696376 100/500 loss:1.965773662959691e-06 150/500 loss:1.103217073250562e-09 200/500 loss:3.865352482534945e-12 250/500 loss:3.865352482534945e-12 300/500 loss:3.865352482534945e-12 350/500 loss:3.865352482534945e-12 400/500 loss:3.865352482534945e-12 450/500 loss:3.865352482534945e-12 500/500 loss:3.865352482534945e-12 w: tensor([[2.], [3.]], dtype=oneflow.float32, grad_fn=<accumulate_grad>)","title":"\u53cd\u5411\u4f20\u64ad\u4e0e optimizer"},{"location":"basics/06_optimization.html#optimizer","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u638c\u63e1\u5982\u4f55\u4f7f\u7528 OneFlow \u52a0\u8f7d\u6570\u636e \u3001 \u642d\u5efa\u6a21\u578b \u3001 \u81ea\u52a8\u8ba1\u7b97\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6 \uff0c\u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u8bad\u7ec3\u6a21\u578b\u3002 \u5728 oneflow.optim \u4e2d\uff0c\u6709\u5404\u7c7b optimizer \uff0c\u5b83\u4eec\u53ef\u4ee5\u7b80\u5316\u5b9e\u73b0\u53cd\u5411\u4f20\u64ad\u7684\u4ee3\u7801\u3002 \u672c\u6587\u5c06\u5148\u4ecb\u7ecd\u53cd\u5411\u4f20\u64ad\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u518d\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 oneflow.optim \u7c7b\u3002","title":"\u53cd\u5411\u4f20\u64ad\u4e0e optimizer"},{"location":"basics/06_optimization.html#numpy","text":"\u4e3a\u4e86\u8bfb\u8005\u66f4\u65b9\u4fbf\u7406\u89e3\u53cd\u5411\u4f20\u64ad\u4e0e\u81ea\u52a8\u6c42\u5bfc\u7684\u5173\u7cfb\uff0c\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e86\u4e00\u4efd\u4ec5\u7528 numpy \u5b9e\u73b0\u7684\u7b80\u5355\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\uff1a import numpy as np ITER_COUNT = 500 LR = 0.01 # \u524d\u5411\u4f20\u64ad def forward ( x , w ): return np . matmul ( x , w ) # \u635f\u5931\u51fd\u6570 def loss ( y_pred , y ): return (( y_pred - y ) ** 2 ) . sum () # \u8ba1\u7b97\u68af\u5ea6 def gradient ( x , y , y_pred ): return np . matmul ( x . T , 2 * ( y_pred - y )) if __name__ == \"__main__\" : # \u8bad\u7ec3\u76ee\u6807: Y = 2*X1 + 3*X2 x = np . array ([[ 1 , 2 ], [ 2 , 3 ], [ 4 , 6 ], [ 3 , 1 ]], dtype = np . float32 ) y = np . array ([[ 8 ], [ 13 ], [ 26 ], [ 9 ]], dtype = np . float32 ) w = np . array ([[ 2 ], [ 1 ]], dtype = np . float32 ) # \u8bad\u7ec3\u5faa\u73af for i in range ( 0 , ITER_COUNT ): y_pred = forward ( x , w ) l = loss ( y_pred , y ) if ( i + 1 ) % 50 == 0 : print ( f \" { i + 1 } / { 500 } loss: { l } \" ) grad = gradient ( x , y , y_pred ) w -= LR * grad print ( f \"w: { w } \" ) \u8f93\u51fa\uff1a 50/500 loss:0.0034512376878410578 100/500 loss:1.965487399502308e-06 150/500 loss:1.05524122773204e-09 200/500 loss:3.865352482534945e-12 250/500 loss:3.865352482534945e-12 300/500 loss:3.865352482534945e-12 350/500 loss:3.865352482534945e-12 400/500 loss:3.865352482534945e-12 450/500 loss:3.865352482534945e-12 500/500 loss:3.865352482534945e-12 w:[[2.000001 ] [2.9999993]] \u6ce8\u610f\u6211\u4eec\u9009\u62e9\u7684 loss \u51fd\u6570\u8868\u8fbe\u5f0f\u4e3a \\(\\sum (y_{p} - y)^2\\) \uff0c\u56e0\u6b64 loss \u5bf9\u53c2\u6570 w \u6c42\u68af\u5ea6\u7684\u4ee3\u7801\u4e3a\uff1a def gradient ( x , y , y_pred ): return np . matmul ( x . T , 2 * ( y_pred - y )) \u66f4\u65b0\u53c2\u6570\u91c7\u7528\u7684\u662f SGD \uff1a grad = gradient ( x , y , y_pred ) w -= LR * grad \u603b\u7ed3\u800c\u8a00\uff0c\u8bad\u7ec3\u4e2d\u7684\u4e00\u6b21\u5b8c\u6574\u8fed\u4ee3\u5305\u62ec\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u6a21\u578b\u6839\u636e\u8f93\u5165\u3001\u53c2\u6570\uff0c\u8ba1\u7b97\u5f97\u51fa\u9884\u6d4b\u503c ( y_pred ) \u8ba1\u7b97 loss\uff0c\u5373\u9884\u6d4b\u503c\u4e0e\u6807\u7b7e\u4e4b\u95f4\u7684\u8bef\u5dee \u6c42 loss \u5bf9\u53c2\u6570\u7684\u68af\u5ea6 \u66f4\u65b0\u53c2\u6570 \u5176\u4e2d 1~2 \u4e3a\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\uff1b3~4\u4e3a\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u3002","title":"numpy \u624b\u5de5\u5b9e\u73b0\u53cd\u5411\u4f20\u64ad"},{"location":"basics/06_optimization.html#hyperparameters","text":"\u8d85\u53c2\u6570\u662f\u6709\u5173\u6a21\u578b\u8bad\u7ec3\u8bbe\u7f6e\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u5f71\u54cd\u5230\u6a21\u578b\u8bad\u7ec3\u7684\u6548\u7387\u548c\u7ed3\u679c\u3002\u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 ITER_COUNT \u3001 LR \u5c31\u662f\u8d85\u53c2\u6570\u3002","title":"\u8d85\u53c2 Hyperparameters"},{"location":"basics/06_optimization.html#oneflowoptim","text":"\u4f7f\u7528 oneflow.optim \u4e2d\u7684\u4f18\u5316\u5668\u7c7b\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u4f1a\u66f4\u7b80\u6d01\u65b9\u4fbf\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u3002 \u9996\u5148\uff0c\u5148\u51c6\u5907\u597d\u6570\u636e\u548c\u6a21\u578b\uff0c\u4f7f\u7528 Module \u7684\u4e00\u4e2a\u65b9\u4fbf\u4e4b\u5904\u5c31\u662f\uff0c\u53ef\u4ee5\u628a\u8d85\u53c2\u653e\u7f6e\u5728 Module \u4e2d\u4fbf\u4e8e\u7ba1\u7406\u3002 import oneflow as flow x = flow . tensor ([[ 1 , 2 ], [ 2 , 3 ], [ 4 , 6 ], [ 3 , 1 ]], dtype = flow . float32 ) y = flow . tensor ([[ 8 ], [ 13 ], [ 26 ], [ 9 ]], dtype = flow . float32 ) class MyLrModule ( flow . nn . Module ): def __init__ ( self , lr , iter_count ): super () . __init__ () self . w = flow . nn . Parameter ( flow . tensor ([[ 2 ], [ 1 ]], dtype = flow . float32 )) self . lr = lr self . iter_count = iter_count def forward ( self , x ): return flow . matmul ( x , self . w ) model = MyLrModule ( 0.01 , 500 )","title":"\u4f7f\u7528 oneflow.optim \u4e2d\u7684\u4f18\u5316\u5668\u7c7b"},{"location":"basics/06_optimization.html#loss","text":"\u7136\u540e\uff0c\u9009\u62e9\u597d loss \u51fd\u6570\uff0cOneFlow \u81ea\u5e26\u4e86\u591a\u79cd loss \u51fd\u6570\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u9009\u62e9 MSELoss \uff1a loss = flow . nn . MSELoss ( reduction = \"sum\" )","title":"loss \u51fd\u6570"},{"location":"basics/06_optimization.html#optimizer_1","text":"\u53cd\u5411\u4f20\u64ad\u7684\u903b\u8f91\uff0c\u90fd\u88ab\u5c01\u88c5\u5728 optimizer \u4e2d\u3002\u6211\u4eec\u5728\u6b64\u9009\u62e9 SGD \uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u9009\u62e9\u5176\u5b83\u7684\u4f18\u5316\u7b97\u6cd5\uff0c\u5982 Adam \u3001 AdamW \u7b49\u3002 optimizer = flow . optim . SGD ( model . parameters (), model . lr ) \u6784\u9020 optimizer \u65f6\uff0c\u5c06\u6a21\u578b\u53c2\u6570\u53ca learning rate \u4f20\u9012\u7ed9 SGD \u3002\u4e4b\u540e\u8c03\u7528 optimizer.step() \uff0c\u5728\u5176\u5185\u90e8\u5c31\u4f1a\u81ea\u52a8\u5b8c\u6210\u5bf9\u6a21\u578b\u53c2\u6570\u6c42\u68af\u5ea6\u3001\u5e76\u6309\u7167 SGD \u7b97\u6cd5\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u3002","title":"\u6784\u9020 optimizer"},{"location":"basics/06_optimization.html#_1","text":"\u4ee5\u4e0a\u51c6\u5907\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\uff1a for i in range ( 0 , model . iter_count ): y_pred = model ( x ) l = loss ( y_pred , y ) if ( i + 1 ) % 50 == 0 : print ( f \" { i + 1 } / { model . iter_count } loss: { l . numpy () } \" ) optimizer . zero_grad () l . backward () optimizer . step () print ( f \" \\n w: { model . w } \" ) \u8f93\u51fa\uff1a 50/500 loss:0.003451163647696376 100/500 loss:1.965773662959691e-06 150/500 loss:1.103217073250562e-09 200/500 loss:3.865352482534945e-12 250/500 loss:3.865352482534945e-12 300/500 loss:3.865352482534945e-12 350/500 loss:3.865352482534945e-12 400/500 loss:3.865352482534945e-12 450/500 loss:3.865352482534945e-12 500/500 loss:3.865352482534945e-12 w: tensor([[2.], [3.]], dtype=oneflow.float32, grad_fn=<accumulate_grad>)","title":"\u8bad\u7ec3"},{"location":"basics/07_model_load_save.html","text":"\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58 \u00b6 \u5bf9\u4e8e\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58\uff0c\u5e38\u7528\u7684\u573a\u666f\u6709\uff1a \u5c06\u5df2\u7ecf\u8bad\u7ec3\u4e00\u6bb5\u65f6\u95f4\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u7ee7\u7eed\u8bad\u7ec3 \u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u540e\u7eed\u76f4\u63a5\u7528\u4e8e\u9884\u6d4b \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\uff0c\u5982\u4f55\u4f7f\u7528 save \u548c load API \u4fdd\u5b58\u6a21\u578b\u3001\u52a0\u8f7d\u6a21\u578b\u3002 \u540c\u65f6\u4e5f\u4f1a\u5c55\u793a\uff0c\u5982\u4f55\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u5b8c\u6210\u9884\u6d4b\u4efb\u52a1\u3002 \u6a21\u578b\u53c2\u6570\u7684\u83b7\u53d6\u4e0e\u52a0\u8f7d \u00b6 OneFlow \u9884\u5148\u63d0\u4f9b\u7684\u5404\u79cd Module \u6216\u8005\u7528\u6237\u81ea\u5b9a\u4e49\u7684 Module \uff0c\u90fd\u63d0\u4f9b\u4e86 state_dict \u65b9\u6cd5\u83b7\u53d6\u6a21\u578b\u6240\u6709\u7684\u53c2\u6570\uff0c\u5b83\u662f\u4ee5 \u201c\u53c2\u6570\u540d-\u53c2\u6570\u503c\u201d \u5f62\u5f0f\u5b58\u653e\u7684\u5b57\u5178\u3002 import oneflow as flow m = flow . nn . Linear ( 2 , 3 ) print ( m . state_dict ()) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c06\u663e\u5f0f\u6784\u9020\u597d\u7684 Linear Module \u5bf9\u8c61 m \u4e2d\u7684\u53c2\u6570\u6253\u5370\u51fa\u6765\uff1a OrderedDict([('weight', tensor([[-0.4297, -0.3571], [ 0.6797, -0.5295], [ 0.4918, -0.3039]], dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([ 0.0977, 0.1219, -0.5372], dtype=oneflow.float32, requires_grad=True))]) \u901a\u8fc7\u8c03\u7528 Module \u7684 load_state_dict \u65b9\u6cd5\uff0c\u53ef\u4ee5\u52a0\u8f7d\u53c2\u6570\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a myparams = { \"weight\" : flow . ones ( 3 , 2 ), \"bias\" : flow . zeros ( 3 )} m . load_state_dict ( myparams ) print ( m . state_dict ()) \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u5b57\u5178\u4e2d\u7684\u5f20\u91cf\uff0c\u5df2\u7ecf\u88ab\u52a0\u8f7d\u5230 m Module \u4e2d\uff1a OrderedDict([('weight', tensor([[1., 1.], [1., 1.], [1., 1.]], dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([0., 0., 0.], dtype=oneflow.float32, requires_grad=True))]) \u6a21\u578b\u4fdd\u5b58 \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.save \u65b9\u6cd5\u4fdd\u5b58\u6a21\u578b\u3002 flow . save ( m . state_dict (), \"./model\" ) \u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684 Module \u7684\u53c2\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4fdd\u5b58\u8def\u5f84\u3002\u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c06 m Module \u5bf9\u8c61\u7684\u53c2\u6570\uff0c\u4fdd\u5b58\u5230\u4e86 ./model \u76ee\u5f55\u4e0b\u3002 \u6a21\u578b\u52a0\u8f7d \u00b6 \u4f7f\u7528 oneflow.load \u53ef\u4ee5\u5c06\u53c2\u6570\u4ece\u6307\u5b9a\u7684\u78c1\u76d8\u8def\u5f84\u52a0\u8f7d\u53c2\u6570\u5230\u5185\u5b58\uff0c\u5f97\u5230\u5b58\u6709\u53c2\u6570\u7684\u5b57\u5178\u3002 params = flow . load ( \"./model\" ) \u7136\u540e\uff0c\u518d\u501f\u52a9\u4e0a\u6587\u4ecb\u7ecd\u7684 load_state_dict \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06\u5b57\u5178\u52a0\u8f7d\u5230\u6a21\u578b\u4e2d\uff1a m2 = flow . nn . Linear ( 2 , 3 ) m2 . load_state_dict ( params ) print ( m2 . state_dict ()) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u65b0\u6784\u5efa\u4e86\u4e00\u4e2a Linear Module \u5bf9\u8c61 m2 \uff0c\u5e76\u4e14\u5c06\u4ece\u4e0a\u6587\u4fdd\u5b58\u5f97\u5230\u7684\u7684\u53c2\u6570\u52a0\u8f7d\u5230 m2 \u4e0a\u3002\u5f97\u5230\u8f93\u51fa\uff1a OrderedDict([('weight', tensor([[1., 1.], [1., 1.], [1., 1.]], dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([0., 0., 0.], dtype=oneflow.float32, requires_grad=True))]) \u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u9884\u6d4b \u00b6 OneFlow \u662f\u53ef\u4ee5\u76f4\u63a5\u52a0\u8f7d PyTorch \u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u7528\u4e8e\u9884\u6d4b\u7684\u3002 \u53ea\u8981\u6a21\u578b\u7684\u4f5c\u8005\u80fd\u591f\u786e\u4fdd\u642d\u5efa\u7684\u6a21\u578b\u7684\u7ed3\u6784\u3001\u53c2\u6570\u540d\u4e0e PyTorch \u6a21\u578b\u5bf9\u9f50\u3002 \u76f8\u5173\u7684\u4f8b\u5b50\u53ef\u4ee5\u5728 OneFlow Models \u4ed3\u5e93\u7684\u8fd9\u4e2a README \u67e5\u770b\u3002 \u4ee5\u4e0b\u547d\u4ee4\u884c\uff0c\u53ef\u4ee5\u4f53\u9a8c\u5982\u4f55\u4f7f\u7528\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u8fdb\u884c\u9884\u6d4b\uff1a git clone https://github.com/Oneflow-Inc/models.git cd models/Vision/classification/image/shufflenetv2/ bash infer.sh","title":"\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58"},{"location":"basics/07_model_load_save.html#_1","text":"\u5bf9\u4e8e\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58\uff0c\u5e38\u7528\u7684\u573a\u666f\u6709\uff1a \u5c06\u5df2\u7ecf\u8bad\u7ec3\u4e00\u6bb5\u65f6\u95f4\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u7ee7\u7eed\u8bad\u7ec3 \u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u540e\u7eed\u76f4\u63a5\u7528\u4e8e\u9884\u6d4b \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\uff0c\u5982\u4f55\u4f7f\u7528 save \u548c load API \u4fdd\u5b58\u6a21\u578b\u3001\u52a0\u8f7d\u6a21\u578b\u3002 \u540c\u65f6\u4e5f\u4f1a\u5c55\u793a\uff0c\u5982\u4f55\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u5b8c\u6210\u9884\u6d4b\u4efb\u52a1\u3002","title":"\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58"},{"location":"basics/07_model_load_save.html#_2","text":"OneFlow \u9884\u5148\u63d0\u4f9b\u7684\u5404\u79cd Module \u6216\u8005\u7528\u6237\u81ea\u5b9a\u4e49\u7684 Module \uff0c\u90fd\u63d0\u4f9b\u4e86 state_dict \u65b9\u6cd5\u83b7\u53d6\u6a21\u578b\u6240\u6709\u7684\u53c2\u6570\uff0c\u5b83\u662f\u4ee5 \u201c\u53c2\u6570\u540d-\u53c2\u6570\u503c\u201d \u5f62\u5f0f\u5b58\u653e\u7684\u5b57\u5178\u3002 import oneflow as flow m = flow . nn . Linear ( 2 , 3 ) print ( m . state_dict ()) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c06\u663e\u5f0f\u6784\u9020\u597d\u7684 Linear Module \u5bf9\u8c61 m \u4e2d\u7684\u53c2\u6570\u6253\u5370\u51fa\u6765\uff1a OrderedDict([('weight', tensor([[-0.4297, -0.3571], [ 0.6797, -0.5295], [ 0.4918, -0.3039]], dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([ 0.0977, 0.1219, -0.5372], dtype=oneflow.float32, requires_grad=True))]) \u901a\u8fc7\u8c03\u7528 Module \u7684 load_state_dict \u65b9\u6cd5\uff0c\u53ef\u4ee5\u52a0\u8f7d\u53c2\u6570\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a myparams = { \"weight\" : flow . ones ( 3 , 2 ), \"bias\" : flow . zeros ( 3 )} m . load_state_dict ( myparams ) print ( m . state_dict ()) \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u5b57\u5178\u4e2d\u7684\u5f20\u91cf\uff0c\u5df2\u7ecf\u88ab\u52a0\u8f7d\u5230 m Module \u4e2d\uff1a OrderedDict([('weight', tensor([[1., 1.], [1., 1.], [1., 1.]], dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([0., 0., 0.], dtype=oneflow.float32, requires_grad=True))])","title":"\u6a21\u578b\u53c2\u6570\u7684\u83b7\u53d6\u4e0e\u52a0\u8f7d"},{"location":"basics/07_model_load_save.html#_3","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.save \u65b9\u6cd5\u4fdd\u5b58\u6a21\u578b\u3002 flow . save ( m . state_dict (), \"./model\" ) \u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684 Module \u7684\u53c2\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4fdd\u5b58\u8def\u5f84\u3002\u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c06 m Module \u5bf9\u8c61\u7684\u53c2\u6570\uff0c\u4fdd\u5b58\u5230\u4e86 ./model \u76ee\u5f55\u4e0b\u3002","title":"\u6a21\u578b\u4fdd\u5b58"},{"location":"basics/07_model_load_save.html#_4","text":"\u4f7f\u7528 oneflow.load \u53ef\u4ee5\u5c06\u53c2\u6570\u4ece\u6307\u5b9a\u7684\u78c1\u76d8\u8def\u5f84\u52a0\u8f7d\u53c2\u6570\u5230\u5185\u5b58\uff0c\u5f97\u5230\u5b58\u6709\u53c2\u6570\u7684\u5b57\u5178\u3002 params = flow . load ( \"./model\" ) \u7136\u540e\uff0c\u518d\u501f\u52a9\u4e0a\u6587\u4ecb\u7ecd\u7684 load_state_dict \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06\u5b57\u5178\u52a0\u8f7d\u5230\u6a21\u578b\u4e2d\uff1a m2 = flow . nn . Linear ( 2 , 3 ) m2 . load_state_dict ( params ) print ( m2 . state_dict ()) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u65b0\u6784\u5efa\u4e86\u4e00\u4e2a Linear Module \u5bf9\u8c61 m2 \uff0c\u5e76\u4e14\u5c06\u4ece\u4e0a\u6587\u4fdd\u5b58\u5f97\u5230\u7684\u7684\u53c2\u6570\u52a0\u8f7d\u5230 m2 \u4e0a\u3002\u5f97\u5230\u8f93\u51fa\uff1a OrderedDict([('weight', tensor([[1., 1.], [1., 1.], [1., 1.]], dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([0., 0., 0.], dtype=oneflow.float32, requires_grad=True))])","title":"\u6a21\u578b\u52a0\u8f7d"},{"location":"basics/07_model_load_save.html#_5","text":"OneFlow \u662f\u53ef\u4ee5\u76f4\u63a5\u52a0\u8f7d PyTorch \u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u7528\u4e8e\u9884\u6d4b\u7684\u3002 \u53ea\u8981\u6a21\u578b\u7684\u4f5c\u8005\u80fd\u591f\u786e\u4fdd\u642d\u5efa\u7684\u6a21\u578b\u7684\u7ed3\u6784\u3001\u53c2\u6570\u540d\u4e0e PyTorch \u6a21\u578b\u5bf9\u9f50\u3002 \u76f8\u5173\u7684\u4f8b\u5b50\u53ef\u4ee5\u5728 OneFlow Models \u4ed3\u5e93\u7684\u8fd9\u4e2a README \u67e5\u770b\u3002 \u4ee5\u4e0b\u547d\u4ee4\u884c\uff0c\u53ef\u4ee5\u4f53\u9a8c\u5982\u4f55\u4f7f\u7528\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u8fdb\u884c\u9884\u6d4b\uff1a git clone https://github.com/Oneflow-Inc/models.git cd models/Vision/classification/image/shufflenetv2/ bash infer.sh","title":"\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u9884\u6d4b"},{"location":"basics/08_nn_graph.html","text":"\u9759\u6001\u56fe\u6a21\u5757 nn.Graph \u00b6 \u76ee\u524d\uff0c\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u6a21\u578b\u7684\u8fd0\u884c\u65b9\u5f0f\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u5373 \u52a8\u6001\u56fe \u4e0e \u9759\u6001\u56fe \uff0c\u5728 OneFlow \u4e2d\uff0c\u4e5f\u88ab\u4e60\u60ef\u79f0\u4e3a Eager \u6a21\u5f0f \u548c Graph \u6a21\u5f0f \u3002 \u8fd9\u4e24\u79cd\u65b9\u5f0f\u5404\u6709\u4f18\u7f3a\u70b9\uff0cOneFlow \u5bf9\u4e24\u79cd\u65b9\u5f0f\u5747\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f Eager \u6a21\u5f0f\u3002\u5982\u679c\u4f60\u662f\u6309\u987a\u5e8f\u9605\u8bfb\u672c\u57fa\u7840\u4e13\u9898\u7684\u6559\u7a0b\uff0c\u90a3\u4e48\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u6240\u63a5\u89e6\u7684\u6240\u6709\u4ee3\u7801\u90fd\u662f Eager \u6a21\u5f0f\u7684\u4ee3\u7801\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u52a8\u6001\u56fe\u66f4\u6613\u7528\uff0c\u9759\u6001\u56fe\u6027\u80fd\u66f4\u5177\u4f18\u52bf\u3002OneFlow \u63d0\u4f9b\u7684 nn.Graph \u6a21\u5757\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7528\u7c7b\u4f3c Eager \u7684\u7f16\u7a0b\u4e60\u60ef\uff0c\u6784\u5efa\u9759\u6001\u56fe\u5e76\u8bad\u7ec3\u6a21\u578b\u3002 OneFlow \u7684 Eager \u6a21\u5f0f \u00b6 OneFlow \u9ed8\u8ba4\u4ee5 Eager \u6a21\u5f0f\u8fd0\u884c\u3002 \u4ee5\u4e0b\u811a\u672c\uff0c\u4f7f\u7528 CIFAR10 \u6570\u636e\u96c6\u8bad\u7ec3 mobilenet_v2 \u6a21\u578b\u3002 Code import oneflow as flow import oneflow.nn as nn import flowvision import flowvision.transforms as transforms BATCH_SIZE = 64 EPOCH_NUM = 1 DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) training_data = flowvision . datasets . CIFAR10 ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , ) train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) for t in range ( EPOCH_NUM ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) size = len ( train_dataloader . dataset ) for batch , ( x , y ) in enumerate ( train_dataloader ): x = x . to ( DEVICE ) y = y . to ( DEVICE ) # Compute prediction error pred = model ( x ) loss = loss_fn ( pred , y ) # Backpropagation optimizer . zero_grad () loss . backward () optimizer . step () current = batch * BATCH_SIZE if batch % 5 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u8f93\u51fa\uff1a loss: 6.921304 [ 0/50000] loss: 6.824391 [ 320/50000] loss: 6.688272 [ 640/50000] loss: 6.644351 [ 960/50000] ... OneFlow \u7684 Graph \u6a21\u5f0f \u00b6 \u81ea\u5b9a\u4e49\u4e00\u4e2a Graph \u00b6 OneFlow \u63d0\u4f9b\u4e86 nn.Graph \u57fa\u7c7b\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u5b83\uff0c\u81ea\u5b9a\u4e49 Graph \u7c7b\u3002 import oneflow as flow import oneflow.nn as nn class ModuleMyLinear ( nn . Module ): def __init__ ( self , in_features , out_features ): super () . __init__ () self . weight = nn . Parameter ( flow . randn ( in_features , out_features )) self . bias = nn . Parameter ( flow . randn ( out_features )) def forward ( self , input ): return flow . matmul ( input , self . weight ) + self . bias model = ModuleMyLinear ( 4 , 3 ) class GraphMyLinear ( nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model def build ( self , input ): return self . model ( input ) \u4ee5\u4e0a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5305\u542b\u4e86\u81ea\u5b9a\u4e49 Graph \u6240\u9700\u7684\u91cd\u8981\u6b65\u9aa4\uff1a \u7ee7\u627f nn.Graph \u5728 __init__ \u6700\u5f00\u59cb\u8c03\u7528 super().__init__() \uff0c\u8ba9 OneFlow \u5b8c\u6210 Graph \u5fc5\u8981\u7684\u521d\u59cb\u5316\u5de5\u4f5c \u5728 __init__ \u4e2d\u590d\u7528 Eager \u6a21\u5f0f\u4e0b\u7684 nn.Module \u5bf9\u8c61\uff08 self.model = model \uff09 \u5728 build \u4e2d\u63cf\u8ff0\u8ba1\u7b97\u8fc7\u7a0b \u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u5b9e\u4f8b\u5316\u5e76\u8c03\u7528 Graph\u3002 graph_mylinear = GraphMyLinear () input = flow . randn ( 1 , 4 ) out = graph_mylinear ( input ) print ( out ) \u8f93\u51fa\uff1a tensor([[-0.3298, -3.7907, 0.1661]], dtype=oneflow.float32) \u6ce8\u610f\uff0cGraph \u4e0e Module \u7c7b\u4f3c\uff0c\u5bf9\u8c61\u672c\u8eab\u662f\u53ef\u8c03\u7528\u7684\uff0c\u5e76\u4e14 \u4e0d\u63a8\u8350 \u663e\u5f0f\u8c03\u7528 build \u65b9\u6cd5\u3002Graph \u53ef\u4ee5\u76f4\u63a5\u590d\u7528\u5df2\u7ecf\u5b9a\u4e49\u597d\u7684 Module\u3002\u56e0\u6b64\uff0c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u53c2\u8003 \u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u5185\u5bb9\u642d\u5efa\u597d\u795e\u7ecf\u7f51\u7edc\uff0c\u7136\u540e\u5728 Graph \u7684 __init__ \u4e2d\u5c06 Module \u8bbe\u7f6e\u4e3a Graph \u7684\u6210\u5458\u5373\u53ef\u3002 \u6bd4\u5982\uff0c\u76f4\u63a5\u4f7f\u7528\u4ee5\u4e0a Eager \u6a21\u5f0f\u793a\u4f8b\u7684 model \uff0c\u4f5c\u4e3a\u7f51\u7edc\u7ed3\u6784\uff1a class ModelGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model def build ( self , x , y ): y_pred = self . model ( x ) return loss model_graph = ModelGraph () \u4e0e Module \u7684\u663e\u8457\u533a\u522b\u5728\u4e8e\uff0cGraph \u4f7f\u7528 build \u800c\u4e0d\u662f forward \u65b9\u6cd5\u63cf\u8ff0\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u8fd9\u662f\u56e0\u4e3a build \u4e0d\u4ec5\u53ef\u4ee5\u5305\u542b\u524d\u5411\u8ba1\u7b97\uff0c\u8fd8\u53ef\u4ee5\u8bbe\u7f6e loss \uff0c\u4f18\u5316\u5668\u7b49\uff0c\u5728\u4e0b\u6587\u4f1a\u770b\u5230\u4f7f\u7528 Graph \u505a\u8bad\u7ec3\u7684\u5b9e\u9645\u4f8b\u5b50\u3002 \u4f7f\u7528 Graph \u505a\u9884\u6d4b \u00b6 \u4ee5\u4e0b Graph \u505a\u9884\u6d4b\u7684\u4f8b\u5b50\uff0c\u76f4\u63a5\u4f7f\u7528\u4e86\u672c\u6587\u5f00\u59cb Eager \u6a21\u5f0f\u8bad\u7ec3\u597d\u7684 module\u3002 class GraphMobileNetV2 ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model def build ( self , x ): return self . model ( x ) graph_mobile_net_v2 = GraphMobileNetV2 () x , _ = next ( iter ( train_dataloader )) x = x . to ( DEVICE ) y_pred = graph_mobile_net_v2 ( x ) \u4f7f\u7528 Graph \u505a\u8bad\u7ec3 \u00b6 \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Graph \u505a\u8bad\u7ec3\u3002\u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u67e5\u770b\u8be6\u7ec6\u4ee3\u7801\u3002 Code import oneflow as flow import oneflow.nn as nn import flowvision import flowvision.transforms as transforms BATCH_SIZE = 64 EPOCH_NUM = 1 DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) training_data = flowvision . datasets . CIFAR10 ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , ) train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) class GraphMobileNetV2 ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model self . loss_fn = loss_fn self . add_optimizer ( optimizer ) def build ( self , x , y ): y_pred = self . model ( x ) loss = self . loss_fn ( y_pred , y ) loss . backward () return loss graph_mobile_net_v2 = GraphMobileNetV2 () # graph_mobile_net_v2.debug() for t in range ( EPOCH_NUM ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) size = len ( train_dataloader . dataset ) for batch , ( x , y ) in enumerate ( train_dataloader ): x = x . to ( DEVICE ) y = y . to ( DEVICE ) loss = graph_mobile_net_v2 ( x , y ) current = batch * BATCH_SIZE if batch % 5 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u4e0e Graph \u505a\u9884\u6d4b\u7684\u4ee3\u7801\u505a\u6bd4\u8f83\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u6709\u4ee5\u4e0b\u51e0\u70b9\u662f Graph \u505a\u8bad\u7ec3\u65f6\u7279\u6709\u7684\uff1a # Optimizer optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) # (1) # The MobileNetV2 Graph class GraphMobileNetV2 ( flow . nn . Graph ): def __init__ ( self ): # ... self . add_optimizer ( optimizer ) # (2) def build ( self , x , y ): # ... loss . backward () # (3) # ... \u6784\u9020 optimizer \u5bf9\u8c61\uff0c\u8fd9\u70b9\u548c \u53cd\u5411\u4f20\u64ad\u4e0e optimizer \u4ecb\u7ecd\u7684 Eager \u6a21\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5\u662f\u5b8c\u5168\u4e00\u81f4\u7684\u3002 \u5728 Graph \u7c7b\u7684 __init__ \u4e2d\uff0c\u8c03\u7528 self.add_optimizer \u65b9\u6cd5\uff0c\u5c06\u4e0a\u4e00\u6b65\u6784\u9020\u7684 optimizer \u5bf9\u8c61\u6dfb\u52a0\u8fdb Graph \u4e2d\u3002 \u5728 Graph \u7c7b\u7684 build \u4e2d\u8c03\u7528 backward \uff0c\u89e6\u53d1\u53cd\u5411\u4f20\u64ad Graph \u8c03\u8bd5 \u00b6 \u53ef\u4ee5\u8c03\u7528 print \u6253\u5370 Graph \u5bf9\u8c61\uff0c\u8f93\u51fa Graph \u5bf9\u8c61\u7684\u4fe1\u606f\u3002 print ( graph_mobile_net_v2 ) \u6839\u636e Graph \u5bf9\u8c61\u662f\u5426 \u5df2\u7ecf\u88ab\u8c03\u7528\u8fc7 \uff0c\u8f93\u51fa\u7684\u6548\u679c\u7565\u6709\u4e0d\u540c\uff1a \u5982\u679c Graph \u5bf9\u8c61\u8c03\u7528\u524d print \uff0c\u8f93\u51fa\u7684\u662f\u7f51\u7edc\u7ed3\u6784\u7684\u4fe1\u606f\u3002 \u4ee5\u4e0a graph_mobile_net_v2 \u8c03\u7528\u524d print \u6548\u679c\uff1a (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2): ( (CONFIG:config:GraphConfig(training=True, )) (MODULE:model:MobileNetV2()): ( (MODULE:model.features:Sequential()): ( (MODULE:model.features.0:ConvBNActivation()): ( (MODULE:model.features.0.0:Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)): ( (PARAMETER:model.features.0.0.weight:tensor(..., device='cuda:0', size=(32, 3, 3, 3), dtype=oneflow.float32, requires_grad=True)): () ) ... (MODULE:model.classifer:Sequential()): ( (MODULE:model.classifer.0:Dropout(p=0.2, inplace=False)): () (MODULE:model.classifer.1:Linear(in_features=1280, out_features=10, bias=True)): ( (PARAMETER:model.classifer.1.weight:tensor(..., size=(10, 1280), dtype=oneflow.float32, requires_grad=True)): () (PARAMETER:model.classifer.1.bias:tensor(..., size=(10,), dtype=oneflow.float32, requires_grad=True)): () ) ) ) (MODULE:loss_fn:CrossEntropyLoss()): () ) \u5982\u679c\u662f Graph \u5bf9\u8c61\u8c03\u7528\u540e print \uff0c\u9664\u4e86\u7f51\u7edc\u7684\u7ed3\u6784\u4fe1\u606f\u5916\uff0c\u8fd8\u4f1a\u6253\u5370\u8f93\u5165\u8f93\u51fa\u5f20\u91cf\u7684\u4fe1\u606f\uff0c\u6709\u5982\u4e0b\u7c7b\u4f3c\u6548\u679c\uff1a (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2): ( (CONFIG:config:GraphConfig(training=True, )) (INPUT:_GraphMobileNetV2_0-input_0:tensor(..., device='cuda:0', size=(64, 3, 32, 32), dtype=oneflow.float32)) (INPUT:_GraphMobileNetV2_0-input_1:tensor(..., device='cuda:0', size=(64,), dtype=oneflow.int64)) (MODULE:model:MobileNetV2()): ( (INPUT:_model-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (MODULE:model.features:Sequential()): ( (INPUT:_model.features-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (MODULE:model.features.0:ConvBNActivation()): ( (INPUT:_model.features.0-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (MODULE:model.features.0.0:Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)): ( (INPUT:_model.features.0.0-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (PARAMETER:model.features.0.0.weight:tensor(..., device='cuda:0', size=(32, 3, 3, 3), dtype=oneflow.float32, requires_grad=True)): () (OUTPUT:_model.features.0.0-output_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 32, 16, 16), dtype=oneflow.float32)) ) ... \u6b64\u5916\uff0c\u8c03\u7528 Graph \u5bf9\u8c61\u7684 debug \u65b9\u6cd5\uff0c\u5c31\u5f00\u542f\u4e86 Graph \u7684\u8c03\u8bd5\u6a21\u5f0f\u3002 OneFlow \u5728\u7f16\u8bd1\u751f\u6210\u8ba1\u7b97\u56fe\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u6253\u5370\u8c03\u8bd5\u4fe1\u606f\uff0c\u6bd4\u5982\uff0c\u5c06\u4e0a\u9762\u4f8b\u5b50\u4ee3\u7801\u4e2d graph_mobile_net_v2.debug() \u7684\u6ce8\u91ca\u53bb\u6389\uff0c\u5c06\u5728\u63a7\u5236\u53f0\u4e0a\u8f93\u51fa\u5982\u4e0b\u8f93\u51fa\uff1a (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) end building graph. (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) start compiling plan and init graph runtime. (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) end compiling plan and init graph rumtime. \u4f7f\u7528 debug \u7684\u597d\u5904\u5728\u4e8e\uff0c\u8c03\u8bd5\u4fe1\u606f\u662f \u8fb9\u6784\u56fe\u3001\u8fb9\u8f93\u51fa \u7684\uff0c\u8fd9\u6837\u5982\u679c\u6784\u56fe\u8fc7\u7a0b\u4e2d\u53d1\u751f\u9519\u8bef\uff0c\u5bb9\u6613\u53d1\u73b0\u6784\u56fe\u65f6\u7684\u95ee\u9898\u3002 \u8fd8\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e v_level \u53c2\u6570\uff0c\u8c03\u6574 debug \u7684\u8f93\u51fa\u8be6\u7ec6\u7a0b\u5ea6\uff1a graph_mobile_net_v2 . debug ( v_level = 1 ) # \u8f93\u51fa\u8be6\u7ec6\u4fe1\u606f \u9664\u4e86\u4ee5\u4e0a\u4ecb\u7ecd\u7684\u65b9\u6cd5\u5916\uff0c\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u53c2\u6570\u7684\u68af\u5ea6\u3001\u83b7\u53d6 learning rate \u7b49\u529f\u80fd\uff0c\u4e5f\u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u5373\u5c06\u4e0a\u7ebf\u3002 Graph \u7684\u4fdd\u5b58\u4e0e\u52a0\u8f7d \u00b6 Graph \u590d\u7528\u4e86 Module \u7684\u7f51\u7edc\u53c2\u6570\uff0c\u56e0\u6b64 Graph \u6ca1\u6709\u81ea\u5df1\u7684 save \u4e0e load \u63a5\u53e3\uff0c\u76f4\u63a5\u4f7f\u7528 Module \u7684\u63a5\u53e3\u5373\u53ef\u3002\u53ef\u4ee5\u53c2\u8003 \u6a21\u578b\u7684\u4fdd\u5b58\u4e0e\u52a0\u8f7d \u5373\u53ef\u3002 \u5982\u4ee5\u4e0a\u7684 graph_mobile_net_v2 \uff0c\u82e5\u60f3\u4fdd\u5b58\u5b83\u7684\u8bad\u7ec3\u7ed3\u679c\uff0c\u5176\u5b9e\u5e94\u8be5\u4fdd\u5b58\u5b83\u5176\u4e2d\u7684 Module\uff08\u5373\u4e4b\u524d model = flowvision.models.mobilenet_v2().to(DEVICE) \u5f97\u5230\u7684 model \u3002 flow . save ( model . state_dict (), \"./graph_model\" ) Note \u4e0d\u80fd \u7528\u4ee5\u4e0b\u65b9\u5f0f\u4fdd\u5b58\u3002\u56e0\u4e3a Graph \u5728\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u5bf9\u6210\u5458\u505a\u5904\u7406\uff0c\u6240\u4ee5 graph_mobile_net_v2.model \u5176\u5b9e\u5df2\u7ecf\u4e0d\u518d\u662f Module \u7c7b\u578b\uff1a flow . save ( graph_mobile_net_v2 . model . state_dict (), \"./graph_model\" ) # \u4f1a\u62a5\u9519 \u52a0\u8f7d\u4e4b\u524d\u4fdd\u5b58\u597d\u7684\u6a21\u578b\uff0c\u4e5f\u662f Module \u7684\u5de5\u4f5c\uff1a model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) model . load_state_dict ( flow . load ( \"./graph_model\" )) # \u52a0\u8f7d\u4fdd\u5b58\u597d\u7684\u6a21\u578b # ... Graph \u4e0e\u90e8\u7f72 \u00b6 nn.Graph \u652f\u6301\u4fdd\u5b58\u8ba1\u7b97\u56fe\u548c\u6a21\u578b\u53c2\u6570\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u652f\u6301\u6a21\u578b\u90e8\u7f72\u3002 \u5982\u679c\u6709\u6a21\u578b\u90e8\u7f72\u7684\u9700\u6c42\uff0c\u90a3\u4e48\u5e94\u8be5\u901a\u8fc7 oneflow.save \u63a5\u53e3\uff0c\u5c06 Graph \u5bf9\u8c61\u5bfc\u51fa\u4e3a\u90e8\u7f72\u9700\u8981\u7684\u683c\u5f0f\uff1a flow . save ( graph_mobile_net_v2 , \"./1/model\" ) \u8fd9\u6837\uff0c ./1/model \u76ee\u5f55\u4e0b\u4f1a\u540c\u65f6\u4fdd\u5b58\u90e8\u7f72\u6240\u9700\u7684\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u56fe\u3002\u8be6\u7ec6\u7684\u90e8\u7f72\u6d41\u7a0b\u53ef\u4ee5\u53c2\u9605 \u6a21\u578b\u90e8\u7f72 \u4e00\u6587\u3002 \u56e0\u4e3a\u90e8\u7f72\u6240\u9700\u7684\u683c\u5f0f\uff0c\u5fc5\u9700\u901a\u8fc7 Graph \u5bf9\u8c61\u5bfc\u51fa\u3002\u6240\u4ee5\uff0c\u5982\u679c\u662f Eager \u6a21\u5f0f\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\uff08\u5373 nn.Module \u5bf9\u8c61\uff09\uff0c\u9700\u8981\u7528 Graph \u5c06 Module \u5c01\u88c5\u540e\u518d\u5bfc\u51fa\u3002 \u4e0b\u9762\u6211\u4eec\u4ee5 flowvision \u4ed3\u5e93\u4e2d\u7684 neural_style_transfer \u4e3a\u4f8b\u5b50\uff0c\u5c55\u793a\u5982\u4f55\u5c01\u88c5\u5e76\u5bfc\u51fa nn.Module \u6a21\u578b\u3002 import oneflow as flow import oneflow.nn as nn from flowvision.models.neural_style_transfer.stylenet import neural_style_transfer class MyGraph ( nn . Graph ): def __init__ ( self , model ): super () . __init__ () self . model = model def build ( self , * input ): return self . model ( * input ) if __name__ == \"__main__\" : fake_image = flow . ones (( 1 , 3 , 1024 , 1024 )) model = neural_style_transfer ( pretrained = True , progress = True ) model . eval () graph = MyGraph ( model ) out = graph ( fake_image ) flow . save ( graph , \"1/model\" ) \u4ee5\u4e0a\u4ee3\u7801\u51e0\u5904\u7684\u5173\u952e\u4ee3\u7801\uff1a \u5b9a\u4e49\u4e86\u4e00\u4e2a MyGraph \u7c7b\uff0c\u5c06 nn.Module \u5bf9\u8c61\u7b80\u5355\u5730\u5c01\u88c5\u4e00\u5c42\uff08 return self.model(*input) \uff09\uff0c\u4f5c\u4e3a\u4ec5\u4ec5\u662f\u5c06 nn.Module \u8f6c\u4e3a Graph \u5bf9\u8c61\u3002 \u5b9e\u4f8b\u5316\u5f97\u5230 Graph \u5bf9\u8c61\uff08 graph = MyGraph(model) \uff09 \u8c03\u7528\u4e00\u6b21 Graph \u5b9e\u4f8b\u5316\u5bf9\u8c61\uff08 out = graph(fake_image) \uff09\u3002\u5b83\u5185\u90e8\u7684\u673a\u7406\u662f\u5229\u7528 \u201c\u5047\u6570\u636e\u201d \u5728\u6a21\u578b\u4e2d\u6d41\u52a8\u4e00\u904d\uff08\u5373 tracing \u673a\u5236\uff09\u6765\u5efa\u7acb\u8ba1\u7b97\u56fe\u3002 \u5bfc\u51fa\u90e8\u7f72\u6240\u9700\u7684\u6a21\u578b\uff1a flow.save(graph, \"1/model\") \u6269\u5c55\u9605\u8bfb\uff1a\u52a8\u6001\u56fe\u4e0e\u9759\u6001\u56fe \u00b6 \u7528\u6237\u5b9a\u4e49\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u90fd\u4f1a\u88ab\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u8f6c\u4e3a\u8ba1\u7b97\u56fe\uff0c\u5982 \u81ea\u52a8\u6c42\u68af\u5ea6 \u4e2d\u7684\u4f8b\u5b50\uff1a def loss ( y_pred , y ): return flow . sum ( 1 / 2 * ( y_pred - y ) ** 2 ) x = flow . ones ( 1 , 5 ) # \u8f93\u5165 w = flow . randn ( 5 , 3 , requires_grad = True ) b = flow . randn ( 1 , 3 , requires_grad = True ) z = flow . matmul ( x , w ) + b y = flow . zeros ( 1 , 3 ) # label l = loss ( z , y ) \u5bf9\u5e94\u7684\u8ba1\u7b97\u56fe\u4e3a\uff1a \u52a8\u6001\u56fe\uff08Dynamic Graph\uff09 \u52a8\u6001\u56fe\u7684\u7279\u70b9\u5728\u4e8e\uff0c\u5b83\u662f\u4e00\u8fb9\u6267\u884c\u4ee3\u7801\uff0c\u4e00\u8fb9\u5b8c\u6210\u8ba1\u7b97\u56fe\u7684\u6784\u5efa\u7684\u3002 \u4ee5\u4e0a\u4ee3\u7801\u548c\u6784\u56fe\u5173\u7cfb\u53ef\u770b\u4e0b\u56fe\uff08\u6ce8\u610f\uff1a\u4e0b\u56fe\u5bf9\u7b80\u5355\u7684\u8bed\u53e5\u505a\u4e86\u5408\u5e76\uff09 \u56e0\u4e3a\u52a8\u6001\u56fe\u662f\u4e00\u8fb9\u6267\u884c\u4e00\u8fb9\u6784\u56fe\uff0c\u6240\u4ee5\u5f88\u7075\u6d3b\uff0c\u53ef\u4ee5\u968f\u65f6\u4fee\u6539\u56fe\u7684\u7ed3\u6784\uff0c\u8fd0\u884c\u4e00\u884c\u4ee3\u7801\u5c31\u80fd\u5f97\u5230\u4e00\u884c\u7684\u7ed3\u679c\uff0c\u6613\u4e8e\u8c03\u8bd5\u3002\u4f46\u662f\u56e0\u4e3a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u65e0\u6cd5\u83b7\u53d6\u5b8c\u6574\u7684\u56fe\u4fe1\u606f\uff08\u968f\u65f6\u53ef\u4ee5\u6539\u53d8\u3001\u6c38\u8fdc\u4e0d\u80fd\u8ba4\u4e3a\u6784\u56fe\u5df2\u7ecf\u5b8c\u6210\uff09\uff0c\u56e0\u6b64\u65e0\u6cd5\u8fdb\u884c\u5145\u5206\u7684\u5168\u5c40\u4f18\u5316\uff0c\u5728\u6027\u80fd\u4e0a\u4f1a\u76f8\u5bf9\u6b20\u7f3a\u3002 \u9759\u6001\u56fe\uff08Static Graph\uff09 \u4e0e\u52a8\u6001\u56fe\u4e0d\u540c\uff0c\u9759\u6001\u56fe\u5148\u5b9a\u4e49\u5b8c\u6574\u7684\u8ba1\u7b97\u56fe\u3002\u5373\u9700\u8981\u7528\u6237\u5148\u58f0\u660e\u6240\u6709\u8ba1\u7b97\u8282\u70b9\u540e\uff0c\u6846\u67b6\u624d\u5f00\u59cb\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u53ef\u4ee5\u7406\u89e3\u4e3a\u5728\u7528\u6237\u4ee3\u7801\u4e0e\u6700\u7ec8\u8fd0\u884c\u7684\u8ba1\u7b97\u56fe\u4e4b\u95f4\uff0c\u6846\u67b6\u8d77\u5230\u4e86\u7f16\u8bd1\u5668\u7684\u4f5c\u7528\u3002 \u4ee5 OneFlow \u6846\u67b6\u4e3a\u4f8b\uff0c\u7528\u6237\u7684\u4ee3\u7801\u4f1a\u88ab\u5148\u8f6c\u6362\u4e3a\u5b8c\u6574\u7684\u8ba1\u7b97\u56fe\uff0c\u7136\u540e\u518d\u7531 OneFlow Runtime \u6a21\u5757\u8fd0\u884c\u3002 \u9759\u6001\u56fe\u8fd9\u79cd\u5148\u83b7\u53d6\u5b8c\u6574\u7f51\u7edc\uff0c\u518d\u7f16\u8bd1\u8fd0\u884c\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u5b83\u53ef\u4ee5\u505a\u5f88\u591a\u52a8\u6001\u56fe\u505a\u4e0d\u5230\u7684\u4f18\u5316\uff0c\u56e0\u6b64\u6027\u80fd\u4e0a\u66f4\u6709\u4f18\u52bf\u3002\u5e76\u4e14\u7f16\u8bd1\u5b8c\u6210\u540e\u7684\u8ba1\u7b97\u56fe\uff0c\u4e5f\u66f4\u5bb9\u6613\u8de8\u5e73\u53f0\u90e8\u7f72\u3002 \u4e0d\u8fc7\uff0c\u5728\u9759\u6001\u56fe\u4e2d\u771f\u6b63\u7684\u8ba1\u7b97\u53d1\u751f\u65f6\uff0c\u5df2\u7ecf\u4e0e\u7528\u6237\u7684\u4ee3\u7801\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\u4e86\uff0c\u56e0\u6b64\u9759\u6001\u56fe\u7684\u8c03\u8bd5\u8f83\u4e0d\u65b9\u4fbf\u3002 \u4e24\u79cd\u65b9\u5f0f\u5bf9\u6bd4\u603b\u7ed3\u5982\u4e0b\uff1a \u52a8\u6001\u56fe \u9759\u6001\u56fe \u8ba1\u7b97\u65b9\u5f0f Eager \u6a21\u5f0f Graph \u6a21\u5f0f \u4f18\u70b9 \u4ee3\u7801\u7f16\u5199\u7075\u6d3b\uff0c\u6613\u4e8e\u8c03\u8bd5 \u6027\u80fd\u597d\uff0c\u6613\u4e8e\u4f18\u5316\u548c\u90e8\u7f72 \u7f3a\u70b9 \u6027\u80fd\u53ca\u53ef\u79fb\u690d\u6027\u5dee \u4e0d\u6613\u8c03\u8bd5 OneFlow \u63d0\u4f9b\u7684 Eager \u6a21\u5f0f\uff0c\u4e0e PyTorch \u5bf9\u9f50\uff0c\u8ba9\u719f\u6089 PyTorch \u7684\u7528\u6237\u53ef\u4ee5\u96f6\u6210\u672c\u76f4\u63a5\u4e0a\u624b\u3002 OneFlow \u63d0\u4f9b\u7684 Graph \u6a21\u5f0f\uff0c\u4e5f\u57fa\u4e8e\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u98ce\u683c\uff0c\u8ba9\u719f\u6089 Eager \u5f00\u53d1\u7684\u7528\u6237\uff0c\u53ea\u9700\u8981\u6539\u5f88\u5c11\u91cf\u7684\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u9ad8\u6548\u7387\u7684\u9759\u6001\u56fe\u3002 \u76f8\u5173\u94fe\u63a5 \u00b6 OneFlow Eager\u6a21\u5f0f\u4e0b\u7684\u795e\u7ecf\u7f51\u7edc\u642d\u5efa\uff1a \u642d\u5efa\u795e\u7ecf\u7f51\u7edc","title":"\u9759\u6001\u56fe\u6a21\u5757 nn.Graph"},{"location":"basics/08_nn_graph.html#nngraph","text":"\u76ee\u524d\uff0c\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u6a21\u578b\u7684\u8fd0\u884c\u65b9\u5f0f\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u5373 \u52a8\u6001\u56fe \u4e0e \u9759\u6001\u56fe \uff0c\u5728 OneFlow \u4e2d\uff0c\u4e5f\u88ab\u4e60\u60ef\u79f0\u4e3a Eager \u6a21\u5f0f \u548c Graph \u6a21\u5f0f \u3002 \u8fd9\u4e24\u79cd\u65b9\u5f0f\u5404\u6709\u4f18\u7f3a\u70b9\uff0cOneFlow \u5bf9\u4e24\u79cd\u65b9\u5f0f\u5747\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f Eager \u6a21\u5f0f\u3002\u5982\u679c\u4f60\u662f\u6309\u987a\u5e8f\u9605\u8bfb\u672c\u57fa\u7840\u4e13\u9898\u7684\u6559\u7a0b\uff0c\u90a3\u4e48\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u6240\u63a5\u89e6\u7684\u6240\u6709\u4ee3\u7801\u90fd\u662f Eager \u6a21\u5f0f\u7684\u4ee3\u7801\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u52a8\u6001\u56fe\u66f4\u6613\u7528\uff0c\u9759\u6001\u56fe\u6027\u80fd\u66f4\u5177\u4f18\u52bf\u3002OneFlow \u63d0\u4f9b\u7684 nn.Graph \u6a21\u5757\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7528\u7c7b\u4f3c Eager \u7684\u7f16\u7a0b\u4e60\u60ef\uff0c\u6784\u5efa\u9759\u6001\u56fe\u5e76\u8bad\u7ec3\u6a21\u578b\u3002","title":"\u9759\u6001\u56fe\u6a21\u5757 nn.Graph"},{"location":"basics/08_nn_graph.html#oneflow-eager","text":"OneFlow \u9ed8\u8ba4\u4ee5 Eager \u6a21\u5f0f\u8fd0\u884c\u3002 \u4ee5\u4e0b\u811a\u672c\uff0c\u4f7f\u7528 CIFAR10 \u6570\u636e\u96c6\u8bad\u7ec3 mobilenet_v2 \u6a21\u578b\u3002 Code import oneflow as flow import oneflow.nn as nn import flowvision import flowvision.transforms as transforms BATCH_SIZE = 64 EPOCH_NUM = 1 DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) training_data = flowvision . datasets . CIFAR10 ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , ) train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) for t in range ( EPOCH_NUM ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) size = len ( train_dataloader . dataset ) for batch , ( x , y ) in enumerate ( train_dataloader ): x = x . to ( DEVICE ) y = y . to ( DEVICE ) # Compute prediction error pred = model ( x ) loss = loss_fn ( pred , y ) # Backpropagation optimizer . zero_grad () loss . backward () optimizer . step () current = batch * BATCH_SIZE if batch % 5 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u8f93\u51fa\uff1a loss: 6.921304 [ 0/50000] loss: 6.824391 [ 320/50000] loss: 6.688272 [ 640/50000] loss: 6.644351 [ 960/50000] ...","title":"OneFlow \u7684 Eager \u6a21\u5f0f"},{"location":"basics/08_nn_graph.html#oneflow-graph","text":"","title":"OneFlow \u7684 Graph \u6a21\u5f0f"},{"location":"basics/08_nn_graph.html#graph","text":"OneFlow \u63d0\u4f9b\u4e86 nn.Graph \u57fa\u7c7b\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u5b83\uff0c\u81ea\u5b9a\u4e49 Graph \u7c7b\u3002 import oneflow as flow import oneflow.nn as nn class ModuleMyLinear ( nn . Module ): def __init__ ( self , in_features , out_features ): super () . __init__ () self . weight = nn . Parameter ( flow . randn ( in_features , out_features )) self . bias = nn . Parameter ( flow . randn ( out_features )) def forward ( self , input ): return flow . matmul ( input , self . weight ) + self . bias model = ModuleMyLinear ( 4 , 3 ) class GraphMyLinear ( nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model def build ( self , input ): return self . model ( input ) \u4ee5\u4e0a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5305\u542b\u4e86\u81ea\u5b9a\u4e49 Graph \u6240\u9700\u7684\u91cd\u8981\u6b65\u9aa4\uff1a \u7ee7\u627f nn.Graph \u5728 __init__ \u6700\u5f00\u59cb\u8c03\u7528 super().__init__() \uff0c\u8ba9 OneFlow \u5b8c\u6210 Graph \u5fc5\u8981\u7684\u521d\u59cb\u5316\u5de5\u4f5c \u5728 __init__ \u4e2d\u590d\u7528 Eager \u6a21\u5f0f\u4e0b\u7684 nn.Module \u5bf9\u8c61\uff08 self.model = model \uff09 \u5728 build \u4e2d\u63cf\u8ff0\u8ba1\u7b97\u8fc7\u7a0b \u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u5b9e\u4f8b\u5316\u5e76\u8c03\u7528 Graph\u3002 graph_mylinear = GraphMyLinear () input = flow . randn ( 1 , 4 ) out = graph_mylinear ( input ) print ( out ) \u8f93\u51fa\uff1a tensor([[-0.3298, -3.7907, 0.1661]], dtype=oneflow.float32) \u6ce8\u610f\uff0cGraph \u4e0e Module \u7c7b\u4f3c\uff0c\u5bf9\u8c61\u672c\u8eab\u662f\u53ef\u8c03\u7528\u7684\uff0c\u5e76\u4e14 \u4e0d\u63a8\u8350 \u663e\u5f0f\u8c03\u7528 build \u65b9\u6cd5\u3002Graph \u53ef\u4ee5\u76f4\u63a5\u590d\u7528\u5df2\u7ecf\u5b9a\u4e49\u597d\u7684 Module\u3002\u56e0\u6b64\uff0c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u53c2\u8003 \u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u5185\u5bb9\u642d\u5efa\u597d\u795e\u7ecf\u7f51\u7edc\uff0c\u7136\u540e\u5728 Graph \u7684 __init__ \u4e2d\u5c06 Module \u8bbe\u7f6e\u4e3a Graph \u7684\u6210\u5458\u5373\u53ef\u3002 \u6bd4\u5982\uff0c\u76f4\u63a5\u4f7f\u7528\u4ee5\u4e0a Eager \u6a21\u5f0f\u793a\u4f8b\u7684 model \uff0c\u4f5c\u4e3a\u7f51\u7edc\u7ed3\u6784\uff1a class ModelGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model def build ( self , x , y ): y_pred = self . model ( x ) return loss model_graph = ModelGraph () \u4e0e Module \u7684\u663e\u8457\u533a\u522b\u5728\u4e8e\uff0cGraph \u4f7f\u7528 build \u800c\u4e0d\u662f forward \u65b9\u6cd5\u63cf\u8ff0\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u8fd9\u662f\u56e0\u4e3a build \u4e0d\u4ec5\u53ef\u4ee5\u5305\u542b\u524d\u5411\u8ba1\u7b97\uff0c\u8fd8\u53ef\u4ee5\u8bbe\u7f6e loss \uff0c\u4f18\u5316\u5668\u7b49\uff0c\u5728\u4e0b\u6587\u4f1a\u770b\u5230\u4f7f\u7528 Graph \u505a\u8bad\u7ec3\u7684\u5b9e\u9645\u4f8b\u5b50\u3002","title":"\u81ea\u5b9a\u4e49\u4e00\u4e2a Graph"},{"location":"basics/08_nn_graph.html#graph_1","text":"\u4ee5\u4e0b Graph \u505a\u9884\u6d4b\u7684\u4f8b\u5b50\uff0c\u76f4\u63a5\u4f7f\u7528\u4e86\u672c\u6587\u5f00\u59cb Eager \u6a21\u5f0f\u8bad\u7ec3\u597d\u7684 module\u3002 class GraphMobileNetV2 ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model def build ( self , x ): return self . model ( x ) graph_mobile_net_v2 = GraphMobileNetV2 () x , _ = next ( iter ( train_dataloader )) x = x . to ( DEVICE ) y_pred = graph_mobile_net_v2 ( x )","title":"\u4f7f\u7528 Graph \u505a\u9884\u6d4b"},{"location":"basics/08_nn_graph.html#graph_2","text":"\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Graph \u505a\u8bad\u7ec3\u3002\u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u67e5\u770b\u8be6\u7ec6\u4ee3\u7801\u3002 Code import oneflow as flow import oneflow.nn as nn import flowvision import flowvision.transforms as transforms BATCH_SIZE = 64 EPOCH_NUM = 1 DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) training_data = flowvision . datasets . CIFAR10 ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , ) train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) class GraphMobileNetV2 ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model self . loss_fn = loss_fn self . add_optimizer ( optimizer ) def build ( self , x , y ): y_pred = self . model ( x ) loss = self . loss_fn ( y_pred , y ) loss . backward () return loss graph_mobile_net_v2 = GraphMobileNetV2 () # graph_mobile_net_v2.debug() for t in range ( EPOCH_NUM ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) size = len ( train_dataloader . dataset ) for batch , ( x , y ) in enumerate ( train_dataloader ): x = x . to ( DEVICE ) y = y . to ( DEVICE ) loss = graph_mobile_net_v2 ( x , y ) current = batch * BATCH_SIZE if batch % 5 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u4e0e Graph \u505a\u9884\u6d4b\u7684\u4ee3\u7801\u505a\u6bd4\u8f83\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u6709\u4ee5\u4e0b\u51e0\u70b9\u662f Graph \u505a\u8bad\u7ec3\u65f6\u7279\u6709\u7684\uff1a # Optimizer optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) # (1) # The MobileNetV2 Graph class GraphMobileNetV2 ( flow . nn . Graph ): def __init__ ( self ): # ... self . add_optimizer ( optimizer ) # (2) def build ( self , x , y ): # ... loss . backward () # (3) # ... \u6784\u9020 optimizer \u5bf9\u8c61\uff0c\u8fd9\u70b9\u548c \u53cd\u5411\u4f20\u64ad\u4e0e optimizer \u4ecb\u7ecd\u7684 Eager \u6a21\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5\u662f\u5b8c\u5168\u4e00\u81f4\u7684\u3002 \u5728 Graph \u7c7b\u7684 __init__ \u4e2d\uff0c\u8c03\u7528 self.add_optimizer \u65b9\u6cd5\uff0c\u5c06\u4e0a\u4e00\u6b65\u6784\u9020\u7684 optimizer \u5bf9\u8c61\u6dfb\u52a0\u8fdb Graph \u4e2d\u3002 \u5728 Graph \u7c7b\u7684 build \u4e2d\u8c03\u7528 backward \uff0c\u89e6\u53d1\u53cd\u5411\u4f20\u64ad","title":"\u4f7f\u7528 Graph \u505a\u8bad\u7ec3"},{"location":"basics/08_nn_graph.html#graph_3","text":"\u53ef\u4ee5\u8c03\u7528 print \u6253\u5370 Graph \u5bf9\u8c61\uff0c\u8f93\u51fa Graph \u5bf9\u8c61\u7684\u4fe1\u606f\u3002 print ( graph_mobile_net_v2 ) \u6839\u636e Graph \u5bf9\u8c61\u662f\u5426 \u5df2\u7ecf\u88ab\u8c03\u7528\u8fc7 \uff0c\u8f93\u51fa\u7684\u6548\u679c\u7565\u6709\u4e0d\u540c\uff1a \u5982\u679c Graph \u5bf9\u8c61\u8c03\u7528\u524d print \uff0c\u8f93\u51fa\u7684\u662f\u7f51\u7edc\u7ed3\u6784\u7684\u4fe1\u606f\u3002 \u4ee5\u4e0a graph_mobile_net_v2 \u8c03\u7528\u524d print \u6548\u679c\uff1a (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2): ( (CONFIG:config:GraphConfig(training=True, )) (MODULE:model:MobileNetV2()): ( (MODULE:model.features:Sequential()): ( (MODULE:model.features.0:ConvBNActivation()): ( (MODULE:model.features.0.0:Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)): ( (PARAMETER:model.features.0.0.weight:tensor(..., device='cuda:0', size=(32, 3, 3, 3), dtype=oneflow.float32, requires_grad=True)): () ) ... (MODULE:model.classifer:Sequential()): ( (MODULE:model.classifer.0:Dropout(p=0.2, inplace=False)): () (MODULE:model.classifer.1:Linear(in_features=1280, out_features=10, bias=True)): ( (PARAMETER:model.classifer.1.weight:tensor(..., size=(10, 1280), dtype=oneflow.float32, requires_grad=True)): () (PARAMETER:model.classifer.1.bias:tensor(..., size=(10,), dtype=oneflow.float32, requires_grad=True)): () ) ) ) (MODULE:loss_fn:CrossEntropyLoss()): () ) \u5982\u679c\u662f Graph \u5bf9\u8c61\u8c03\u7528\u540e print \uff0c\u9664\u4e86\u7f51\u7edc\u7684\u7ed3\u6784\u4fe1\u606f\u5916\uff0c\u8fd8\u4f1a\u6253\u5370\u8f93\u5165\u8f93\u51fa\u5f20\u91cf\u7684\u4fe1\u606f\uff0c\u6709\u5982\u4e0b\u7c7b\u4f3c\u6548\u679c\uff1a (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2): ( (CONFIG:config:GraphConfig(training=True, )) (INPUT:_GraphMobileNetV2_0-input_0:tensor(..., device='cuda:0', size=(64, 3, 32, 32), dtype=oneflow.float32)) (INPUT:_GraphMobileNetV2_0-input_1:tensor(..., device='cuda:0', size=(64,), dtype=oneflow.int64)) (MODULE:model:MobileNetV2()): ( (INPUT:_model-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (MODULE:model.features:Sequential()): ( (INPUT:_model.features-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (MODULE:model.features.0:ConvBNActivation()): ( (INPUT:_model.features.0-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (MODULE:model.features.0.0:Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)): ( (INPUT:_model.features.0.0-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (PARAMETER:model.features.0.0.weight:tensor(..., device='cuda:0', size=(32, 3, 3, 3), dtype=oneflow.float32, requires_grad=True)): () (OUTPUT:_model.features.0.0-output_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 32, 16, 16), dtype=oneflow.float32)) ) ... \u6b64\u5916\uff0c\u8c03\u7528 Graph \u5bf9\u8c61\u7684 debug \u65b9\u6cd5\uff0c\u5c31\u5f00\u542f\u4e86 Graph \u7684\u8c03\u8bd5\u6a21\u5f0f\u3002 OneFlow \u5728\u7f16\u8bd1\u751f\u6210\u8ba1\u7b97\u56fe\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u6253\u5370\u8c03\u8bd5\u4fe1\u606f\uff0c\u6bd4\u5982\uff0c\u5c06\u4e0a\u9762\u4f8b\u5b50\u4ee3\u7801\u4e2d graph_mobile_net_v2.debug() \u7684\u6ce8\u91ca\u53bb\u6389\uff0c\u5c06\u5728\u63a7\u5236\u53f0\u4e0a\u8f93\u51fa\u5982\u4e0b\u8f93\u51fa\uff1a (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) end building graph. (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) start compiling plan and init graph runtime. (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) end compiling plan and init graph rumtime. \u4f7f\u7528 debug \u7684\u597d\u5904\u5728\u4e8e\uff0c\u8c03\u8bd5\u4fe1\u606f\u662f \u8fb9\u6784\u56fe\u3001\u8fb9\u8f93\u51fa \u7684\uff0c\u8fd9\u6837\u5982\u679c\u6784\u56fe\u8fc7\u7a0b\u4e2d\u53d1\u751f\u9519\u8bef\uff0c\u5bb9\u6613\u53d1\u73b0\u6784\u56fe\u65f6\u7684\u95ee\u9898\u3002 \u8fd8\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e v_level \u53c2\u6570\uff0c\u8c03\u6574 debug \u7684\u8f93\u51fa\u8be6\u7ec6\u7a0b\u5ea6\uff1a graph_mobile_net_v2 . debug ( v_level = 1 ) # \u8f93\u51fa\u8be6\u7ec6\u4fe1\u606f \u9664\u4e86\u4ee5\u4e0a\u4ecb\u7ecd\u7684\u65b9\u6cd5\u5916\uff0c\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u53c2\u6570\u7684\u68af\u5ea6\u3001\u83b7\u53d6 learning rate \u7b49\u529f\u80fd\uff0c\u4e5f\u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u5373\u5c06\u4e0a\u7ebf\u3002","title":"Graph \u8c03\u8bd5"},{"location":"basics/08_nn_graph.html#graph_4","text":"Graph \u590d\u7528\u4e86 Module \u7684\u7f51\u7edc\u53c2\u6570\uff0c\u56e0\u6b64 Graph \u6ca1\u6709\u81ea\u5df1\u7684 save \u4e0e load \u63a5\u53e3\uff0c\u76f4\u63a5\u4f7f\u7528 Module \u7684\u63a5\u53e3\u5373\u53ef\u3002\u53ef\u4ee5\u53c2\u8003 \u6a21\u578b\u7684\u4fdd\u5b58\u4e0e\u52a0\u8f7d \u5373\u53ef\u3002 \u5982\u4ee5\u4e0a\u7684 graph_mobile_net_v2 \uff0c\u82e5\u60f3\u4fdd\u5b58\u5b83\u7684\u8bad\u7ec3\u7ed3\u679c\uff0c\u5176\u5b9e\u5e94\u8be5\u4fdd\u5b58\u5b83\u5176\u4e2d\u7684 Module\uff08\u5373\u4e4b\u524d model = flowvision.models.mobilenet_v2().to(DEVICE) \u5f97\u5230\u7684 model \u3002 flow . save ( model . state_dict (), \"./graph_model\" ) Note \u4e0d\u80fd \u7528\u4ee5\u4e0b\u65b9\u5f0f\u4fdd\u5b58\u3002\u56e0\u4e3a Graph \u5728\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u5bf9\u6210\u5458\u505a\u5904\u7406\uff0c\u6240\u4ee5 graph_mobile_net_v2.model \u5176\u5b9e\u5df2\u7ecf\u4e0d\u518d\u662f Module \u7c7b\u578b\uff1a flow . save ( graph_mobile_net_v2 . model . state_dict (), \"./graph_model\" ) # \u4f1a\u62a5\u9519 \u52a0\u8f7d\u4e4b\u524d\u4fdd\u5b58\u597d\u7684\u6a21\u578b\uff0c\u4e5f\u662f Module \u7684\u5de5\u4f5c\uff1a model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) model . load_state_dict ( flow . load ( \"./graph_model\" )) # \u52a0\u8f7d\u4fdd\u5b58\u597d\u7684\u6a21\u578b # ...","title":"Graph \u7684\u4fdd\u5b58\u4e0e\u52a0\u8f7d"},{"location":"basics/08_nn_graph.html#graph_5","text":"nn.Graph \u652f\u6301\u4fdd\u5b58\u8ba1\u7b97\u56fe\u548c\u6a21\u578b\u53c2\u6570\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u652f\u6301\u6a21\u578b\u90e8\u7f72\u3002 \u5982\u679c\u6709\u6a21\u578b\u90e8\u7f72\u7684\u9700\u6c42\uff0c\u90a3\u4e48\u5e94\u8be5\u901a\u8fc7 oneflow.save \u63a5\u53e3\uff0c\u5c06 Graph \u5bf9\u8c61\u5bfc\u51fa\u4e3a\u90e8\u7f72\u9700\u8981\u7684\u683c\u5f0f\uff1a flow . save ( graph_mobile_net_v2 , \"./1/model\" ) \u8fd9\u6837\uff0c ./1/model \u76ee\u5f55\u4e0b\u4f1a\u540c\u65f6\u4fdd\u5b58\u90e8\u7f72\u6240\u9700\u7684\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u56fe\u3002\u8be6\u7ec6\u7684\u90e8\u7f72\u6d41\u7a0b\u53ef\u4ee5\u53c2\u9605 \u6a21\u578b\u90e8\u7f72 \u4e00\u6587\u3002 \u56e0\u4e3a\u90e8\u7f72\u6240\u9700\u7684\u683c\u5f0f\uff0c\u5fc5\u9700\u901a\u8fc7 Graph \u5bf9\u8c61\u5bfc\u51fa\u3002\u6240\u4ee5\uff0c\u5982\u679c\u662f Eager \u6a21\u5f0f\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\uff08\u5373 nn.Module \u5bf9\u8c61\uff09\uff0c\u9700\u8981\u7528 Graph \u5c06 Module \u5c01\u88c5\u540e\u518d\u5bfc\u51fa\u3002 \u4e0b\u9762\u6211\u4eec\u4ee5 flowvision \u4ed3\u5e93\u4e2d\u7684 neural_style_transfer \u4e3a\u4f8b\u5b50\uff0c\u5c55\u793a\u5982\u4f55\u5c01\u88c5\u5e76\u5bfc\u51fa nn.Module \u6a21\u578b\u3002 import oneflow as flow import oneflow.nn as nn from flowvision.models.neural_style_transfer.stylenet import neural_style_transfer class MyGraph ( nn . Graph ): def __init__ ( self , model ): super () . __init__ () self . model = model def build ( self , * input ): return self . model ( * input ) if __name__ == \"__main__\" : fake_image = flow . ones (( 1 , 3 , 1024 , 1024 )) model = neural_style_transfer ( pretrained = True , progress = True ) model . eval () graph = MyGraph ( model ) out = graph ( fake_image ) flow . save ( graph , \"1/model\" ) \u4ee5\u4e0a\u4ee3\u7801\u51e0\u5904\u7684\u5173\u952e\u4ee3\u7801\uff1a \u5b9a\u4e49\u4e86\u4e00\u4e2a MyGraph \u7c7b\uff0c\u5c06 nn.Module \u5bf9\u8c61\u7b80\u5355\u5730\u5c01\u88c5\u4e00\u5c42\uff08 return self.model(*input) \uff09\uff0c\u4f5c\u4e3a\u4ec5\u4ec5\u662f\u5c06 nn.Module \u8f6c\u4e3a Graph \u5bf9\u8c61\u3002 \u5b9e\u4f8b\u5316\u5f97\u5230 Graph \u5bf9\u8c61\uff08 graph = MyGraph(model) \uff09 \u8c03\u7528\u4e00\u6b21 Graph \u5b9e\u4f8b\u5316\u5bf9\u8c61\uff08 out = graph(fake_image) \uff09\u3002\u5b83\u5185\u90e8\u7684\u673a\u7406\u662f\u5229\u7528 \u201c\u5047\u6570\u636e\u201d \u5728\u6a21\u578b\u4e2d\u6d41\u52a8\u4e00\u904d\uff08\u5373 tracing \u673a\u5236\uff09\u6765\u5efa\u7acb\u8ba1\u7b97\u56fe\u3002 \u5bfc\u51fa\u90e8\u7f72\u6240\u9700\u7684\u6a21\u578b\uff1a flow.save(graph, \"1/model\")","title":"Graph \u4e0e\u90e8\u7f72"},{"location":"basics/08_nn_graph.html#_1","text":"\u7528\u6237\u5b9a\u4e49\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u90fd\u4f1a\u88ab\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u8f6c\u4e3a\u8ba1\u7b97\u56fe\uff0c\u5982 \u81ea\u52a8\u6c42\u68af\u5ea6 \u4e2d\u7684\u4f8b\u5b50\uff1a def loss ( y_pred , y ): return flow . sum ( 1 / 2 * ( y_pred - y ) ** 2 ) x = flow . ones ( 1 , 5 ) # \u8f93\u5165 w = flow . randn ( 5 , 3 , requires_grad = True ) b = flow . randn ( 1 , 3 , requires_grad = True ) z = flow . matmul ( x , w ) + b y = flow . zeros ( 1 , 3 ) # label l = loss ( z , y ) \u5bf9\u5e94\u7684\u8ba1\u7b97\u56fe\u4e3a\uff1a \u52a8\u6001\u56fe\uff08Dynamic Graph\uff09 \u52a8\u6001\u56fe\u7684\u7279\u70b9\u5728\u4e8e\uff0c\u5b83\u662f\u4e00\u8fb9\u6267\u884c\u4ee3\u7801\uff0c\u4e00\u8fb9\u5b8c\u6210\u8ba1\u7b97\u56fe\u7684\u6784\u5efa\u7684\u3002 \u4ee5\u4e0a\u4ee3\u7801\u548c\u6784\u56fe\u5173\u7cfb\u53ef\u770b\u4e0b\u56fe\uff08\u6ce8\u610f\uff1a\u4e0b\u56fe\u5bf9\u7b80\u5355\u7684\u8bed\u53e5\u505a\u4e86\u5408\u5e76\uff09 \u56e0\u4e3a\u52a8\u6001\u56fe\u662f\u4e00\u8fb9\u6267\u884c\u4e00\u8fb9\u6784\u56fe\uff0c\u6240\u4ee5\u5f88\u7075\u6d3b\uff0c\u53ef\u4ee5\u968f\u65f6\u4fee\u6539\u56fe\u7684\u7ed3\u6784\uff0c\u8fd0\u884c\u4e00\u884c\u4ee3\u7801\u5c31\u80fd\u5f97\u5230\u4e00\u884c\u7684\u7ed3\u679c\uff0c\u6613\u4e8e\u8c03\u8bd5\u3002\u4f46\u662f\u56e0\u4e3a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u65e0\u6cd5\u83b7\u53d6\u5b8c\u6574\u7684\u56fe\u4fe1\u606f\uff08\u968f\u65f6\u53ef\u4ee5\u6539\u53d8\u3001\u6c38\u8fdc\u4e0d\u80fd\u8ba4\u4e3a\u6784\u56fe\u5df2\u7ecf\u5b8c\u6210\uff09\uff0c\u56e0\u6b64\u65e0\u6cd5\u8fdb\u884c\u5145\u5206\u7684\u5168\u5c40\u4f18\u5316\uff0c\u5728\u6027\u80fd\u4e0a\u4f1a\u76f8\u5bf9\u6b20\u7f3a\u3002 \u9759\u6001\u56fe\uff08Static Graph\uff09 \u4e0e\u52a8\u6001\u56fe\u4e0d\u540c\uff0c\u9759\u6001\u56fe\u5148\u5b9a\u4e49\u5b8c\u6574\u7684\u8ba1\u7b97\u56fe\u3002\u5373\u9700\u8981\u7528\u6237\u5148\u58f0\u660e\u6240\u6709\u8ba1\u7b97\u8282\u70b9\u540e\uff0c\u6846\u67b6\u624d\u5f00\u59cb\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u53ef\u4ee5\u7406\u89e3\u4e3a\u5728\u7528\u6237\u4ee3\u7801\u4e0e\u6700\u7ec8\u8fd0\u884c\u7684\u8ba1\u7b97\u56fe\u4e4b\u95f4\uff0c\u6846\u67b6\u8d77\u5230\u4e86\u7f16\u8bd1\u5668\u7684\u4f5c\u7528\u3002 \u4ee5 OneFlow \u6846\u67b6\u4e3a\u4f8b\uff0c\u7528\u6237\u7684\u4ee3\u7801\u4f1a\u88ab\u5148\u8f6c\u6362\u4e3a\u5b8c\u6574\u7684\u8ba1\u7b97\u56fe\uff0c\u7136\u540e\u518d\u7531 OneFlow Runtime \u6a21\u5757\u8fd0\u884c\u3002 \u9759\u6001\u56fe\u8fd9\u79cd\u5148\u83b7\u53d6\u5b8c\u6574\u7f51\u7edc\uff0c\u518d\u7f16\u8bd1\u8fd0\u884c\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u5b83\u53ef\u4ee5\u505a\u5f88\u591a\u52a8\u6001\u56fe\u505a\u4e0d\u5230\u7684\u4f18\u5316\uff0c\u56e0\u6b64\u6027\u80fd\u4e0a\u66f4\u6709\u4f18\u52bf\u3002\u5e76\u4e14\u7f16\u8bd1\u5b8c\u6210\u540e\u7684\u8ba1\u7b97\u56fe\uff0c\u4e5f\u66f4\u5bb9\u6613\u8de8\u5e73\u53f0\u90e8\u7f72\u3002 \u4e0d\u8fc7\uff0c\u5728\u9759\u6001\u56fe\u4e2d\u771f\u6b63\u7684\u8ba1\u7b97\u53d1\u751f\u65f6\uff0c\u5df2\u7ecf\u4e0e\u7528\u6237\u7684\u4ee3\u7801\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\u4e86\uff0c\u56e0\u6b64\u9759\u6001\u56fe\u7684\u8c03\u8bd5\u8f83\u4e0d\u65b9\u4fbf\u3002 \u4e24\u79cd\u65b9\u5f0f\u5bf9\u6bd4\u603b\u7ed3\u5982\u4e0b\uff1a \u52a8\u6001\u56fe \u9759\u6001\u56fe \u8ba1\u7b97\u65b9\u5f0f Eager \u6a21\u5f0f Graph \u6a21\u5f0f \u4f18\u70b9 \u4ee3\u7801\u7f16\u5199\u7075\u6d3b\uff0c\u6613\u4e8e\u8c03\u8bd5 \u6027\u80fd\u597d\uff0c\u6613\u4e8e\u4f18\u5316\u548c\u90e8\u7f72 \u7f3a\u70b9 \u6027\u80fd\u53ca\u53ef\u79fb\u690d\u6027\u5dee \u4e0d\u6613\u8c03\u8bd5 OneFlow \u63d0\u4f9b\u7684 Eager \u6a21\u5f0f\uff0c\u4e0e PyTorch \u5bf9\u9f50\uff0c\u8ba9\u719f\u6089 PyTorch \u7684\u7528\u6237\u53ef\u4ee5\u96f6\u6210\u672c\u76f4\u63a5\u4e0a\u624b\u3002 OneFlow \u63d0\u4f9b\u7684 Graph \u6a21\u5f0f\uff0c\u4e5f\u57fa\u4e8e\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u98ce\u683c\uff0c\u8ba9\u719f\u6089 Eager \u5f00\u53d1\u7684\u7528\u6237\uff0c\u53ea\u9700\u8981\u6539\u5f88\u5c11\u91cf\u7684\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u9ad8\u6548\u7387\u7684\u9759\u6001\u56fe\u3002","title":"\u6269\u5c55\u9605\u8bfb\uff1a\u52a8\u6001\u56fe\u4e0e\u9759\u6001\u56fe"},{"location":"basics/08_nn_graph.html#_2","text":"OneFlow Eager\u6a21\u5f0f\u4e0b\u7684\u795e\u7ecf\u7f51\u7edc\u642d\u5efa\uff1a \u642d\u5efa\u795e\u7ecf\u7f51\u7edc","title":"\u76f8\u5173\u94fe\u63a5"},{"location":"cookies/serving.html","text":"\u6a21\u578b\u90e8\u7f72 \u00b6 \u6a21\u578b\u8bad\u7ec3\u597d\u540e\uff0c\u9700\u8981\u7ecf\u8fc7\u201c\u6a21\u578b\u90e8\u7f72\u201d\u624d\u80fd\u591f\u96c6\u6210\u5230\u4ea7\u54c1\u4e2d\u5e76\u4e0a\u7ebf\u3002\u56e0\u4e3a\u4ea7\u54c1\u4e0a\u7ebf\u65f6\u7684\u8f6f\u786c\u4ef6\u73af\u5883\u3001\u6a21\u578b\u4e0e\u4e1a\u52a1\u6a21\u5757\u7684\u5bf9\u63a5\u65b9\u5f0f\u90fd\u53ef\u80fd\u53d8\u5316\uff0c\u6240\u4ee5\u90e8\u7f72\u7684\u89e3\u51b3\u65b9\u6848\u4e5f\u591a\u79cd\u591a\u6837\u3002\u6bd4\u5982\u67d0\u4e9b\u65b9\u6848\u4f1a\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8f6c\u4e3a\u5176\u4ed6\u683c\u5f0f\uff08\u5982 ONNX\uff09\u540e\uff0c\u518d\u4f9d\u8d56\u7279\u5b9a\u7684 runtime \u90e8\u7f72\uff1b\u67d0\u4e9b\u65b9\u6848\u4f1a\u76f4\u63a5\u4f7f\u7528 C/C++ \u7b49\u80fd\u751f\u6210 native code \u7684\u8bed\u8a00\u91cd\u65b0\u5b9e\u73b0\u6a21\u578b\uff0c\u5e76\u5f15\u5165\u6c47\u7f16\u7ea7\u4f18\u5316\uff0c\u4ee5\u8ffd\u6c42\u786c\u4ef6\u9002\u914d\u6216\u90e8\u7f72\u6027\u80fd\u3002 OneFlow \u901a\u8fc7\u5bf9\u63a5\u4e86 Triton Inference Server \uff0c\u4e3a\u6a21\u578b\u63d0\u4f9b\u670d\u52a1\u3002 OneFlow \u7528\u6237\u8bad\u7ec3\u597d\u6a21\u578b\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 Triton \u90e8\u7f72\u6a21\u578b\uff0c\u5e76\u501f\u52a9 Triton \u4e30\u5bcc\u7684\u7279\u6027\uff0c\u5982 Dynamic batching\u3001Model Pipelines\u3001HTTP/gRPC \u63a5\u53e3\u7b49\uff0c\u5e76\u5feb\u901f\u9ad8\u6548\u5730\u96c6\u6210\u5230\u7ebf\u4e0a\u4ea7\u54c1\u4e2d\u3002 \u672c\u6587\u5185\u5bb9\u7ec4\u7ec7\u5982\u4e0b\uff1a OneFlow \u90e8\u7f72\u5feb\u901f\u4e0a\u624b OneFlow Serving \u67b6\u6784\u4ecb\u7ecd OneFlow \u4ece\u8bad\u7ec3\u5230\u90e8\u7f72\u6d41\u7a0b\u89e3\u6790 OneFlow \u90e8\u7f72\u5feb\u901f\u4e0a\u624b \u00b6 OneFlow Cloud \u4e0a\u51c6\u5907\u4e86\u4e00\u4e2a OneFlow Serving: Neural Style Transfer \u9879\u76ee\uff0c\u53c2\u7167\u9879\u76ee\u8bf4\u660e\u7528\u6237\u53ef\u4ee5\u4e00\u952e\u90e8\u7f72\u9879\u76ee\uff0c\u5e76\u4e14\u67e5\u770b\u9879\u76ee\u8fd0\u884c\u6548\u679c\u3002 \u5206\u6790\u9879\u76ee\u4ee3\u7801\u53ef\u4ee5\u53d1\u73b0\uff0c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u5173\u952e\u5904\uff1a run_cloud.sh \u4e2d\u542f\u52a8\u4e86 Triton \u670d\u52a1\u5668\u4e0e WEB \u5e94\u7528\u670d\u52a1\u5668\uff1a /opt/tritonserver/bin/tritonserver --model-store $( pwd ) /model_repo > 1 .txt & python3 server.py server.py \u4e2d\u53ea\u662f\u7b80\u5355\u548c\u666e\u901a\u7684 URL \u8def\u7531\uff0c\u771f\u6b63\u505a\u63a8\u7406\u5de5\u4f5c\u662f\u7531 infer.py \u4e2d\u7684 stylize \u5b8c\u6210\u7684\u3002 stylize \u51fd\u6570\u5185\u90e8\uff0c\u901a\u8fc7 HTTP \u4e0e Triton \u670d\u52a1\u5668\u4ea4\u4e92\u5f97\u5230\u63a8\u7406\u7ed3\u679c\u3002 def stylize ( content_path , output_path , style = 'udnie' ): triton_client = httpclient . InferenceServerClient ( url = '127.0.0.1:8000' ) ... inputs . append ( httpclient . InferInput ( 'INPUT_0' , image . shape , 'FP32' )) ... outputs . append ( httpclient . InferRequestedOutput ( 'OUTPUT_0' , binary_data = True )) ... \u9884\u8bad\u7ec3\u6a21\u578b\u653e\u7f6e\u5728 model_repo \u4e0b\uff0c\u5b83\u6309\u7167 Triton \u7684\u7ea6\u5b9a\u7ec4\u7ec7\u683c\u5f0f \u8fd9\u4e2a\u7b80\u5355\u7684\u5728\u7ebf\u793a\u4f8b\u5c55\u793a\u4e86 OneFlow \u6a21\u578b\u5982\u4f55\u901a\u8fc7 Triton \u90e8\u7f72\uff0c\u540c\u65f6\u4e5f\u5c55\u793a\u4e1a\u52a1\u6a21\u5757\u5982\u4f55\u4e0e Triton \u670d\u52a1\u7aef\u4ea4\u4e92\u83b7\u53d6\u63a8\u7406\u7ed3\u679c\u3002 \u5982\u679c\u4f60\u60f3\u5728\u672c\u5730\u8fd0\u884c\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4e5f\u53ef\u4ee5\u4e0b\u8f7d demo.zip \uff0c\u89e3\u538b\u540e\u8fd0\u884c\u5176\u4e2d\u7684 run.sh \u6587\u4ef6\u3002 bash run.sh \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd OneFlow \u4ece\u8bad\u7ec3\u5230\u90e8\u7f72\u7684\u8be6\u7ec6\u6d41\u7a0b\u3002 OneFlow \u4ece\u8bad\u7ec3\u5230\u90e8\u7f72\u6d41\u7a0b\u89e3\u6790 \u00b6 \u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e0b\u56fe\u603b\u4f53\u4e86\u89e3 OneFlow \u4e0e Triton \u7684\u5173\u7cfb\u3002 \u4ece\u4e0a\u56fe\u53ef\u4ee5\u77e5\u6653\uff0cTriton \u5904\u4e8e\u8054\u63a5\u5ba2\u6237\u7aef\u4e0e OneFlow \u7684\u4f4d\u7f6e\uff1aTriton \u63d0\u4f9b\u4e86 HTTP\u3001gRPC \u4ee5\u53ca C \u63a5\u53e3\uff0c\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u7075\u6d3b\u5730\u53d1\u8d77\u63a8\u7406\u8bf7\u6c42\u5e76\u5f97\u5230\u7ed3\u679c\u3002 \u5728 Triton \u7684\u67b6\u6784\u4e2d\uff0cOneFlow \u4e0e Model Repository \u4e00\u8d77\uff0c\u4e3a Triton \u63d0\u4f9b\u540e\u7aef\u63a8\u7406\u80fd\u529b\u3002Triton \u5bf9 Model Repository \u7684\u7ec4\u7ec7\u683c\u5f0f\u6709\u9884\u8bbe\u7684\u8981\u6c42\uff0cOneFlow \u63d0\u4f9b\u4e86\u5bf9\u5e94\u7684\u63a5\u53e3\uff0c\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5bfc\u51fa\u4e3a Triton \u8981\u6c42\u7684\u7ec4\u7ec7\u683c\u5f0f\u3002 \u6b64\u5916\uff0cTriton \u5185\u90e8\u8fd8\u63d0\u4f9b\u4e86\u4efb\u52a1\u8c03\u5ea6\u7b49\u7684\u5185\u7f6e\u529f\u80fd\uff0c\u4f7f\u5f97\u6027\u80fd\u6709\u4fdd\u8bc1\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 Triton \u7684\u5b98\u65b9\u6587\u6863 \u3002 \u4e86\u89e3\u8fd9\u4e9b\u57fa\u672c\u6982\u5ff5\u540e\uff0c\u8ba9\u6211\u4eec\u8be6\u7ec6\u89e3\u6790 OneFlow \u4ece\u6a21\u578b\u8bad\u7ec3\u5230\u90e8\u7f72\u7684\u6d41\u7a0b\uff1a \u6a21\u578b\u4fdd\u5b58 \u6a21\u578b\u914d\u7f6e \u542f\u52a8\u670d\u52a1 \u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42 \u6a21\u578b\u4fdd\u5b58 \u00b6 \u5982\u679c\u662f Graph \u6a21\u5f0f\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 oneflow.save \u5bfc\u51fa\u4e3a\u90e8\u7f72\u6240\u9700\u683c\u5f0f\uff1b\u5982\u679c\u662f Eager \u6a21\u5f0f\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\uff0c\u7b80\u5355\u8f6c\u6362\u540e\uff0c\u53ef\u4ee5\u5bfc\u51fa\u4e3a\u6240\u9700\u683c\u5f0f\u3002\u5177\u4f53\u64cd\u4f5c\u65b9\u6cd5\uff0c\u8bf7\u53c2\u9605 Graph \u4e0e\u90e8\u7f72 \u76f8\u5173\u5185\u5bb9\u3002 \u6a21\u578b\u914d\u7f6e \u00b6 Triton \u5bf9\u6a21\u578b\u7684\u76ee\u5f55\u7ec4\u7ec7\u7ed3\u6784\u6709\u4e00\u5b9a\u8981\u6c42\uff0c\u6211\u4eec\u9700\u8981\u6309\u7167 Triton \u7684\u7ea6\u5b9a \u7ec4\u7ec7\u6a21\u578b\u76ee\u5f55\u7ed3\u6784\uff0c\u5e76\u4e14\u7f16\u5199\u76f8\u5173\u914d\u7f6e\u6587\u4ef6\u3002 \u76ee\u5f55\u7ec4\u7ec7\u7ed3\u6784 \u5728\u672c\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u6a21\u578b\u6587\u4ef6\u653e\u7f6e\u5728 model_repository \u76ee\u5f55\u4e0b\uff0c\u5b83\u7684\u7ec4\u7ec7\u7ed3\u6784\u7b26\u5408 Triton \u7684\u7ea6\u5b9a\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5176\u7ec4\u7ec7\u65b9\u5f0f\u5e76\u89e3\u91ca\uff1a $ tree -L 3 model_repository/ model_repository/ \u2514\u2500\u2500 fast_neural_style \u251c\u2500\u2500 1 \u2502 \u2514\u2500\u2500 model \u251c\u2500\u2500 config.pbtxt \u2514\u2500\u2500 labels.txt model_repository \u662f\u6a21\u578b\u4ed3\u5e93\u6839\u76ee\u5f55\uff0c\u5728 triton \u542f\u52a8\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 --model-repository \u9009\u9879\u6307\u5b9a\u6a21\u578b\u4ed3\u5e93\u6839\u76ee\u5f55 fast_neural_style \u662f\u6a21\u578b\u4ed3\u5e93\u4e2d\u7684\u4e00\u4e2a\u6a21\u578b\u3002\u4e00\u4e2a\u6a21\u578b\u4ed3\u5e93\u4e0b\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u6a21\u578b\uff0c\u6bcf\u4e2a\u4e00\u7ea7\u5b50\u76ee\u5f55\u5c31\u662f\u4e00\u4e2a\u6a21\u578b\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u53ea\u51c6\u5907\u4e86 fast_neural_style \u8fd9\u4e00\u4e2a\u6a21\u578b \u5176\u4e2d\u7684 1/model \u76ee\u5f55\uff0c\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u901a\u8fc7 flow.save(graph, \"1/model\") \u4fdd\u5b58\u7684\u6a21\u578b\u3002\u5176\u4e2d\u7684 1 \u4e3a\u7248\u672c\u53f7\uff0cTriton \u4e2d\u7ea6\u5b9a\uff0c\u4e00\u4e2a\u6a21\u578b\u76ee\u5f55\u4e0b\u53ef\u4ee5\u6709\u591a\u4e2a\u6a21\u578b\u7248\u672c\uff0c\u6a21\u578b\u7248\u672c\u7684\u6587\u4ef6\u5939\u540d\u5fc5\u987b\u4e3a \u7eaf\u6570\u5b57 \u3002\u5728\u6a21\u578b\u7248\u672c\u6587\u4ef6\u5939\u4e0b\uff0c\u9700\u8981\u653e\u7f6e\u540d\u4e3a model \u7684\u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u4fdd\u5b58\u6709\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u56fe config.pbtxt \u662f\u4e00\u4e2a\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u7528\u4e8e\u914d\u7f6e\u8be5\u6a21\u578b\u4ed3\u5e93\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u8be6\u7ec6\u4ecb\u7ecd \u6a21\u578b\u4ed3\u5e93\u914d\u7f6e config.pbtxt \uff0c\u5b83\u662f\u4e00\u4e2a protobuf \u6587\u672c\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u901a\u8fc7\u7f16\u5199\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u914d\u7f6e\u6a21\u578b\u670d\u52a1\u7684\u4fe1\u606f\uff0c\u5982\u6307\u5b9a\u786c\u4ef6\u3001\u8f93\u5165\u8f93\u51fa\u7b49\u4fe1\u606f\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u5185\u5bb9\u5982\u4e0b\uff1a name: \"fast_neural_style\" backend: \"oneflow\" max_batch_size: 1 input [ { name: \"INPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] output [ { name: \"OUTPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] instance_group [ { count: 1 kind: KIND_GPU gpus: [ 0 ] } ] \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f9d\u6b21\u89e3\u91ca\u5176\u4e2d\u7684\u914d\u7f6e\u9879\u3002 name : \"fast_neural_style\" name \u5b57\u6bb5\u7528\u4e8e\u6307\u5b9a\u6a21\u578b\u3002\u8fd9\u884c\u8bf4\u660e\u4f7f\u7528 fast_neural_style \u8fd9\u4e2a\u6a21\u578b\uff0c\u6a21\u578b\u540d\u5b57\u9700\u8981\u548c\u4e0a\u6587\u4ecb\u7ecd\u7684\u6a21\u578b\u6587\u4ef6\u5939\u540d\u4e00\u81f4\u3002 backend: \"oneflow\" backend \u7528\u4e8e\u6307\u5b9a Triton \u540e\u7aef\uff0c\u7528 OneFlow \u90e8\u7f72\uff0c\u6b64\u5b57\u6bb5\u5fc5\u987b\u6307\u5b9a\u4e3a oneflow \u3002 \u63a5\u7740\uff0c\u9700\u8981\u5b9a\u4e49\u6a21\u578b\u7684\u8f93\u5165\u548c\u8f93\u51fa\u5f62\u72b6\u3002\u4e0b\u9762\u7684\u8f93\u5165\u8f93\u51fa\u540d\u5b57\u5b57\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u6309\u7167\u6a21\u578b\u7684\u8f93\u5165\u8f93\u51fa\u987a\u5e8f\u586b\u5199\uff0c\u5e76\u4e14\u547d\u540d\u683c\u5f0f\u662f INPUT_<index> \u548c OUTPUT_<index> \uff0c\u7528 <index> \u8868\u793a\u6a21\u578b\u8f93\u5165\u7684\u987a\u5e8f\uff0c\u9ed8\u8ba4\u4ece 0 \u5f00\u59cb\u3002 data_type \u5b57\u6bb5\u5b9a\u4e49\u4e86\u6570\u636e\u7c7b\u578b\uff0c dims \u5b57\u6bb5\u5b9a\u4e49\u4e86\u5f20\u91cf\u7684\u5f62\u72b6\u3002 input [ { name: \"INPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] output [ { name: \"OUTPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] \u4ee5\u4e0a\u7684\u6a21\u578b\u540d\u5b57\u3001\u63a8\u7406\u540e\u7aef\u3001\u8f93\u5165\u8f93\u51fa\u914d\u7f6e\u662f\u6700\u57fa\u7840\u7684\u914d\u7f6e\uff0c\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5df2\u7ecf\u53ef\u4ee5\u5f00\u59cb\u5de5\u4f5c\u3002 \u4e4b\u540e\u7684 instance_group \u7528\u4e8e\u914d\u7f6e\u786c\u4ef6\u4fe1\u606f\u3002 instance_group [ { count: 1 kind: KIND_GPU gpus: [ 0 ] } ] \u5b83\u610f\u5473\u7740\u6211\u4eec\u5b9e\u4f8b\u5316 1 \u4e2a\u6a21\u578b\uff0c\u5e76\u5c06\u5b83\u653e\u7f6e\u5728 0 \u53f7 GPU \u8bbe\u5907\u4e0a\u3002\u66f4\u591a\u7075\u6d3b\u8c03\u914d\u7684\u9009\u9879\uff0c\u8bf7\u53c2\u8003 Triton Inference Server \u7684\u6a21\u578b\u914d\u7f6e\u6587\u6863 \u3002 \u542f\u52a8\u670d\u52a1 \u00b6 OneFlow Serving \u63d0\u4f9b\u4e86 Docker \u955c\u50cf\uff0c\u4f7f\u7528 Docker \u542f\u52a8\u6a21\u578b\u670d\u52a1\u3002\u6309\u7167\u4e0a\u9762\u7684\u76ee\u5f55\u7ed3\u6784\u7ec4\u7ec7\u597d\u6587\u4ef6\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u6620\u5c04\u8def\u5f84\u5230\u5bb9\u5668\u4e2d\uff0c\u542f\u52a8\u670d\u52a1\u3002 docker run --rm --runtime=nvidia --network=host -v$(pwd)/model_repository:/models \\ oneflowinc/oneflow-serving:0.0.1 /opt/tritonserver/bin/tritonserver --model-store /models \u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u53ef\u4ee5\u68c0\u67e5\u6a21\u578b\u670d\u52a1\u662f\u5426\u542f\u52a8\u3002\u770b\u5230 http 200 \u72b6\u6001\u7801\uff0c\u90a3\u4e48\u6a21\u578b\u670d\u52a1\u5df2\u7ecf\u542f\u52a8\u3002 curl -v localhost:8000/v2/health/ready \u5411 Triton Server \u53d1\u9001\u8bf7\u6c42 \u00b6 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 tritonclient \u4e0e Triton Server \u4ea4\u4e92\u3002\u9700\u8981\u5148\u5b89\u88c5\u4e00\u4e2a python \u5305\u3002 pip3 install tritonclient[all] \u5b9e\u9645\u4e0a\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7 HTTP\u3001gRPC \u6216\u8005 C API \u7b49\u591a\u79cd\u65b9\u5f0f \u4e0e Triton Server \u4ea4\u4e92\uff0c\u5177\u4f53\u5185\u5bb9\u53ef\u4ee5\u53c2\u9605\u4ee5\u4e0a\u6587\u6863\u3002 \u4ee5\u4e0b\u4ee3\u7801\uff0c\u662f\u56fe\u7247\u8fdb\u884c\u98ce\u683c\u5316\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u53ef\u4ee5\u5c06\u547d\u4ee4\u884c\u4f20\u9012\u6765\u7684\u56fe\u7247\u6587\u4ef6\uff0c\u8fdb\u884c\u98ce\u683c\u5316\u3002\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u5728\u4e91\u5e73\u53f0\u4e0a\u67e5\u770b\uff0c\u6216\u8005\u4e0b\u8f7d demo.zip #... import tritonclient.http as httpclient if __name__ == '__main__' : parser = argparse . ArgumentParser () parser . add_argument ( '--image' , required = True , help = 'the image to transfer style' ) FLAGS = parser . parse_args () triton_client = httpclient . InferenceServerClient ( url = '127.0.0.1:8000' ) image , w , h = load_image ( FLAGS . image , 256 , 256 ) inputs = [] inputs . append ( httpclient . InferInput ( 'INPUT_0' , image . shape , 'FP32' )) inputs [ 0 ] . set_data_from_numpy ( image , binary_data = True ) outputs = [] outputs . append ( httpclient . InferRequestedOutput ( 'OUTPUT_0' , binary_data = True )) results = triton_client . infer ( 'fast_neural_style' , inputs = inputs , outputs = outputs ) output0_data = results . as_numpy ( 'OUTPUT_0' ) image = recover_image ( output0_data , h , w ) cv2 . imwrite ( 'result.jpg' , image ) \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a triton_client \uff0c\u5176\u4e2d\u7684 127.0.0.1:8000 \u662f Triton \u670d\u52a1\u7684\u9ed8\u8ba4\u7aef\u53e3 triton_client = httpclient . InferenceServerClient ( url = '127.0.0.1:8000' ) \u7136\u540e\uff0c\u901a\u8fc7 triton_client.infer \u63a5\u53e3\uff0c\u53ef\u4ee5\u5411 Triton Server \u53d1\u8d77\u63a8\u7406\u8bf7\u6c42\u5e76\u83b7\u53d6\u8f93\u51fa\u3002 \u4e00\u6761 Tirton \u63a8\u7406\u8bf7\u6c42\uff0c\u9700\u8981\u6307\u5b9a\u6a21\u578b\u3001\u8f93\u5165\u548c\u8f93\u51fa\u90e8\u5206\u3002 \u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e3b\u8981\u662f\u5728\u6784\u9020\u8f93\u5165\u3001\u8f93\u51fa\u5bf9\u8c61\uff0c\u5b83\u4eec\u7684\u914d\u7f6e\u4e0e\u5148\u524d\u5728 config.pbtxt \u4e2d\u7684\u914d\u7f6e\u4e00\u81f4\u3002\u5e76\u6700\u7ec8\u901a\u8fc7 triton_client.infer('fast_neural_style', inputs=inputs, outputs=outputs) \u53d1\u8d77\u63a8\u7406\u8bf7\u6c42\uff0c\u5176\u4e2d\u7684 fast_neural_style \u4e5f\u4e0e config.pbtxt \u4e2d\u7684\u914d\u7f6e\u4e00\u81f4\u3002 inputs = [] inputs . append ( httpclient . InferInput ( 'INPUT_0' , image . shape , 'FP32' )) inputs [ 0 ] . set_data_from_numpy ( image , binary_data = True ) outputs = [] outputs . append ( httpclient . InferRequestedOutput ( 'OUTPUT_0' , binary_data = True )) results = triton_client . infer ( 'fast_neural_style' , inputs = inputs , outputs = outputs ) \u83b7\u53d6\u5230\u7684\u63a8\u7406\u7ed3\u679c\uff0c\u8f6c\u6362\u683c\u5f0f\u5e76\u4fdd\u5b58\u4e3a\u8f93\u51fa\u56fe\u7247\uff1a output0_data = results . as_numpy ( 'OUTPUT_0' ) image = recover_image ( output0_data , h , w ) cv2 . imwrite ( 'result.jpg' , image ) \u6211\u4eec\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u5bf9\u6307\u5b9a\u7684\u56fe\u7247\u8fdb\u884c\u63a8\u7406\u98ce\u683c\u5316\uff0c\u7ed3\u679c\u5c06\u4f1a\u4fdd\u5b58\u5728 result.jpg \u4e0b\u9762\u3002 $ curl -o cat.jpg https://images.pexels.com/photos/156934/pexels-photo-156934.jpeg $ python infer.py --image cat.jpg","title":"\u6a21\u578b\u90e8\u7f72"},{"location":"cookies/serving.html#_1","text":"\u6a21\u578b\u8bad\u7ec3\u597d\u540e\uff0c\u9700\u8981\u7ecf\u8fc7\u201c\u6a21\u578b\u90e8\u7f72\u201d\u624d\u80fd\u591f\u96c6\u6210\u5230\u4ea7\u54c1\u4e2d\u5e76\u4e0a\u7ebf\u3002\u56e0\u4e3a\u4ea7\u54c1\u4e0a\u7ebf\u65f6\u7684\u8f6f\u786c\u4ef6\u73af\u5883\u3001\u6a21\u578b\u4e0e\u4e1a\u52a1\u6a21\u5757\u7684\u5bf9\u63a5\u65b9\u5f0f\u90fd\u53ef\u80fd\u53d8\u5316\uff0c\u6240\u4ee5\u90e8\u7f72\u7684\u89e3\u51b3\u65b9\u6848\u4e5f\u591a\u79cd\u591a\u6837\u3002\u6bd4\u5982\u67d0\u4e9b\u65b9\u6848\u4f1a\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8f6c\u4e3a\u5176\u4ed6\u683c\u5f0f\uff08\u5982 ONNX\uff09\u540e\uff0c\u518d\u4f9d\u8d56\u7279\u5b9a\u7684 runtime \u90e8\u7f72\uff1b\u67d0\u4e9b\u65b9\u6848\u4f1a\u76f4\u63a5\u4f7f\u7528 C/C++ \u7b49\u80fd\u751f\u6210 native code \u7684\u8bed\u8a00\u91cd\u65b0\u5b9e\u73b0\u6a21\u578b\uff0c\u5e76\u5f15\u5165\u6c47\u7f16\u7ea7\u4f18\u5316\uff0c\u4ee5\u8ffd\u6c42\u786c\u4ef6\u9002\u914d\u6216\u90e8\u7f72\u6027\u80fd\u3002 OneFlow \u901a\u8fc7\u5bf9\u63a5\u4e86 Triton Inference Server \uff0c\u4e3a\u6a21\u578b\u63d0\u4f9b\u670d\u52a1\u3002 OneFlow \u7528\u6237\u8bad\u7ec3\u597d\u6a21\u578b\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 Triton \u90e8\u7f72\u6a21\u578b\uff0c\u5e76\u501f\u52a9 Triton \u4e30\u5bcc\u7684\u7279\u6027\uff0c\u5982 Dynamic batching\u3001Model Pipelines\u3001HTTP/gRPC \u63a5\u53e3\u7b49\uff0c\u5e76\u5feb\u901f\u9ad8\u6548\u5730\u96c6\u6210\u5230\u7ebf\u4e0a\u4ea7\u54c1\u4e2d\u3002 \u672c\u6587\u5185\u5bb9\u7ec4\u7ec7\u5982\u4e0b\uff1a OneFlow \u90e8\u7f72\u5feb\u901f\u4e0a\u624b OneFlow Serving \u67b6\u6784\u4ecb\u7ecd OneFlow \u4ece\u8bad\u7ec3\u5230\u90e8\u7f72\u6d41\u7a0b\u89e3\u6790","title":"\u6a21\u578b\u90e8\u7f72"},{"location":"cookies/serving.html#oneflow","text":"OneFlow Cloud \u4e0a\u51c6\u5907\u4e86\u4e00\u4e2a OneFlow Serving: Neural Style Transfer \u9879\u76ee\uff0c\u53c2\u7167\u9879\u76ee\u8bf4\u660e\u7528\u6237\u53ef\u4ee5\u4e00\u952e\u90e8\u7f72\u9879\u76ee\uff0c\u5e76\u4e14\u67e5\u770b\u9879\u76ee\u8fd0\u884c\u6548\u679c\u3002 \u5206\u6790\u9879\u76ee\u4ee3\u7801\u53ef\u4ee5\u53d1\u73b0\uff0c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u5173\u952e\u5904\uff1a run_cloud.sh \u4e2d\u542f\u52a8\u4e86 Triton \u670d\u52a1\u5668\u4e0e WEB \u5e94\u7528\u670d\u52a1\u5668\uff1a /opt/tritonserver/bin/tritonserver --model-store $( pwd ) /model_repo > 1 .txt & python3 server.py server.py \u4e2d\u53ea\u662f\u7b80\u5355\u548c\u666e\u901a\u7684 URL \u8def\u7531\uff0c\u771f\u6b63\u505a\u63a8\u7406\u5de5\u4f5c\u662f\u7531 infer.py \u4e2d\u7684 stylize \u5b8c\u6210\u7684\u3002 stylize \u51fd\u6570\u5185\u90e8\uff0c\u901a\u8fc7 HTTP \u4e0e Triton \u670d\u52a1\u5668\u4ea4\u4e92\u5f97\u5230\u63a8\u7406\u7ed3\u679c\u3002 def stylize ( content_path , output_path , style = 'udnie' ): triton_client = httpclient . InferenceServerClient ( url = '127.0.0.1:8000' ) ... inputs . append ( httpclient . InferInput ( 'INPUT_0' , image . shape , 'FP32' )) ... outputs . append ( httpclient . InferRequestedOutput ( 'OUTPUT_0' , binary_data = True )) ... \u9884\u8bad\u7ec3\u6a21\u578b\u653e\u7f6e\u5728 model_repo \u4e0b\uff0c\u5b83\u6309\u7167 Triton \u7684\u7ea6\u5b9a\u7ec4\u7ec7\u683c\u5f0f \u8fd9\u4e2a\u7b80\u5355\u7684\u5728\u7ebf\u793a\u4f8b\u5c55\u793a\u4e86 OneFlow \u6a21\u578b\u5982\u4f55\u901a\u8fc7 Triton \u90e8\u7f72\uff0c\u540c\u65f6\u4e5f\u5c55\u793a\u4e1a\u52a1\u6a21\u5757\u5982\u4f55\u4e0e Triton \u670d\u52a1\u7aef\u4ea4\u4e92\u83b7\u53d6\u63a8\u7406\u7ed3\u679c\u3002 \u5982\u679c\u4f60\u60f3\u5728\u672c\u5730\u8fd0\u884c\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4e5f\u53ef\u4ee5\u4e0b\u8f7d demo.zip \uff0c\u89e3\u538b\u540e\u8fd0\u884c\u5176\u4e2d\u7684 run.sh \u6587\u4ef6\u3002 bash run.sh \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd OneFlow \u4ece\u8bad\u7ec3\u5230\u90e8\u7f72\u7684\u8be6\u7ec6\u6d41\u7a0b\u3002","title":"OneFlow \u90e8\u7f72\u5feb\u901f\u4e0a\u624b"},{"location":"cookies/serving.html#oneflow_1","text":"\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e0b\u56fe\u603b\u4f53\u4e86\u89e3 OneFlow \u4e0e Triton \u7684\u5173\u7cfb\u3002 \u4ece\u4e0a\u56fe\u53ef\u4ee5\u77e5\u6653\uff0cTriton \u5904\u4e8e\u8054\u63a5\u5ba2\u6237\u7aef\u4e0e OneFlow \u7684\u4f4d\u7f6e\uff1aTriton \u63d0\u4f9b\u4e86 HTTP\u3001gRPC \u4ee5\u53ca C \u63a5\u53e3\uff0c\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u7075\u6d3b\u5730\u53d1\u8d77\u63a8\u7406\u8bf7\u6c42\u5e76\u5f97\u5230\u7ed3\u679c\u3002 \u5728 Triton \u7684\u67b6\u6784\u4e2d\uff0cOneFlow \u4e0e Model Repository \u4e00\u8d77\uff0c\u4e3a Triton \u63d0\u4f9b\u540e\u7aef\u63a8\u7406\u80fd\u529b\u3002Triton \u5bf9 Model Repository \u7684\u7ec4\u7ec7\u683c\u5f0f\u6709\u9884\u8bbe\u7684\u8981\u6c42\uff0cOneFlow \u63d0\u4f9b\u4e86\u5bf9\u5e94\u7684\u63a5\u53e3\uff0c\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5bfc\u51fa\u4e3a Triton \u8981\u6c42\u7684\u7ec4\u7ec7\u683c\u5f0f\u3002 \u6b64\u5916\uff0cTriton \u5185\u90e8\u8fd8\u63d0\u4f9b\u4e86\u4efb\u52a1\u8c03\u5ea6\u7b49\u7684\u5185\u7f6e\u529f\u80fd\uff0c\u4f7f\u5f97\u6027\u80fd\u6709\u4fdd\u8bc1\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 Triton \u7684\u5b98\u65b9\u6587\u6863 \u3002 \u4e86\u89e3\u8fd9\u4e9b\u57fa\u672c\u6982\u5ff5\u540e\uff0c\u8ba9\u6211\u4eec\u8be6\u7ec6\u89e3\u6790 OneFlow \u4ece\u6a21\u578b\u8bad\u7ec3\u5230\u90e8\u7f72\u7684\u6d41\u7a0b\uff1a \u6a21\u578b\u4fdd\u5b58 \u6a21\u578b\u914d\u7f6e \u542f\u52a8\u670d\u52a1 \u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42","title":"OneFlow \u4ece\u8bad\u7ec3\u5230\u90e8\u7f72\u6d41\u7a0b\u89e3\u6790"},{"location":"cookies/serving.html#_2","text":"\u5982\u679c\u662f Graph \u6a21\u5f0f\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 oneflow.save \u5bfc\u51fa\u4e3a\u90e8\u7f72\u6240\u9700\u683c\u5f0f\uff1b\u5982\u679c\u662f Eager \u6a21\u5f0f\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\uff0c\u7b80\u5355\u8f6c\u6362\u540e\uff0c\u53ef\u4ee5\u5bfc\u51fa\u4e3a\u6240\u9700\u683c\u5f0f\u3002\u5177\u4f53\u64cd\u4f5c\u65b9\u6cd5\uff0c\u8bf7\u53c2\u9605 Graph \u4e0e\u90e8\u7f72 \u76f8\u5173\u5185\u5bb9\u3002","title":"\u6a21\u578b\u4fdd\u5b58"},{"location":"cookies/serving.html#_3","text":"Triton \u5bf9\u6a21\u578b\u7684\u76ee\u5f55\u7ec4\u7ec7\u7ed3\u6784\u6709\u4e00\u5b9a\u8981\u6c42\uff0c\u6211\u4eec\u9700\u8981\u6309\u7167 Triton \u7684\u7ea6\u5b9a \u7ec4\u7ec7\u6a21\u578b\u76ee\u5f55\u7ed3\u6784\uff0c\u5e76\u4e14\u7f16\u5199\u76f8\u5173\u914d\u7f6e\u6587\u4ef6\u3002 \u76ee\u5f55\u7ec4\u7ec7\u7ed3\u6784 \u5728\u672c\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u6a21\u578b\u6587\u4ef6\u653e\u7f6e\u5728 model_repository \u76ee\u5f55\u4e0b\uff0c\u5b83\u7684\u7ec4\u7ec7\u7ed3\u6784\u7b26\u5408 Triton \u7684\u7ea6\u5b9a\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5176\u7ec4\u7ec7\u65b9\u5f0f\u5e76\u89e3\u91ca\uff1a $ tree -L 3 model_repository/ model_repository/ \u2514\u2500\u2500 fast_neural_style \u251c\u2500\u2500 1 \u2502 \u2514\u2500\u2500 model \u251c\u2500\u2500 config.pbtxt \u2514\u2500\u2500 labels.txt model_repository \u662f\u6a21\u578b\u4ed3\u5e93\u6839\u76ee\u5f55\uff0c\u5728 triton \u542f\u52a8\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 --model-repository \u9009\u9879\u6307\u5b9a\u6a21\u578b\u4ed3\u5e93\u6839\u76ee\u5f55 fast_neural_style \u662f\u6a21\u578b\u4ed3\u5e93\u4e2d\u7684\u4e00\u4e2a\u6a21\u578b\u3002\u4e00\u4e2a\u6a21\u578b\u4ed3\u5e93\u4e0b\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u6a21\u578b\uff0c\u6bcf\u4e2a\u4e00\u7ea7\u5b50\u76ee\u5f55\u5c31\u662f\u4e00\u4e2a\u6a21\u578b\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u53ea\u51c6\u5907\u4e86 fast_neural_style \u8fd9\u4e00\u4e2a\u6a21\u578b \u5176\u4e2d\u7684 1/model \u76ee\u5f55\uff0c\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u901a\u8fc7 flow.save(graph, \"1/model\") \u4fdd\u5b58\u7684\u6a21\u578b\u3002\u5176\u4e2d\u7684 1 \u4e3a\u7248\u672c\u53f7\uff0cTriton \u4e2d\u7ea6\u5b9a\uff0c\u4e00\u4e2a\u6a21\u578b\u76ee\u5f55\u4e0b\u53ef\u4ee5\u6709\u591a\u4e2a\u6a21\u578b\u7248\u672c\uff0c\u6a21\u578b\u7248\u672c\u7684\u6587\u4ef6\u5939\u540d\u5fc5\u987b\u4e3a \u7eaf\u6570\u5b57 \u3002\u5728\u6a21\u578b\u7248\u672c\u6587\u4ef6\u5939\u4e0b\uff0c\u9700\u8981\u653e\u7f6e\u540d\u4e3a model \u7684\u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u4fdd\u5b58\u6709\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u56fe config.pbtxt \u662f\u4e00\u4e2a\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u7528\u4e8e\u914d\u7f6e\u8be5\u6a21\u578b\u4ed3\u5e93\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u8be6\u7ec6\u4ecb\u7ecd \u6a21\u578b\u4ed3\u5e93\u914d\u7f6e config.pbtxt \uff0c\u5b83\u662f\u4e00\u4e2a protobuf \u6587\u672c\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u901a\u8fc7\u7f16\u5199\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u914d\u7f6e\u6a21\u578b\u670d\u52a1\u7684\u4fe1\u606f\uff0c\u5982\u6307\u5b9a\u786c\u4ef6\u3001\u8f93\u5165\u8f93\u51fa\u7b49\u4fe1\u606f\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u5185\u5bb9\u5982\u4e0b\uff1a name: \"fast_neural_style\" backend: \"oneflow\" max_batch_size: 1 input [ { name: \"INPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] output [ { name: \"OUTPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] instance_group [ { count: 1 kind: KIND_GPU gpus: [ 0 ] } ] \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f9d\u6b21\u89e3\u91ca\u5176\u4e2d\u7684\u914d\u7f6e\u9879\u3002 name : \"fast_neural_style\" name \u5b57\u6bb5\u7528\u4e8e\u6307\u5b9a\u6a21\u578b\u3002\u8fd9\u884c\u8bf4\u660e\u4f7f\u7528 fast_neural_style \u8fd9\u4e2a\u6a21\u578b\uff0c\u6a21\u578b\u540d\u5b57\u9700\u8981\u548c\u4e0a\u6587\u4ecb\u7ecd\u7684\u6a21\u578b\u6587\u4ef6\u5939\u540d\u4e00\u81f4\u3002 backend: \"oneflow\" backend \u7528\u4e8e\u6307\u5b9a Triton \u540e\u7aef\uff0c\u7528 OneFlow \u90e8\u7f72\uff0c\u6b64\u5b57\u6bb5\u5fc5\u987b\u6307\u5b9a\u4e3a oneflow \u3002 \u63a5\u7740\uff0c\u9700\u8981\u5b9a\u4e49\u6a21\u578b\u7684\u8f93\u5165\u548c\u8f93\u51fa\u5f62\u72b6\u3002\u4e0b\u9762\u7684\u8f93\u5165\u8f93\u51fa\u540d\u5b57\u5b57\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u6309\u7167\u6a21\u578b\u7684\u8f93\u5165\u8f93\u51fa\u987a\u5e8f\u586b\u5199\uff0c\u5e76\u4e14\u547d\u540d\u683c\u5f0f\u662f INPUT_<index> \u548c OUTPUT_<index> \uff0c\u7528 <index> \u8868\u793a\u6a21\u578b\u8f93\u5165\u7684\u987a\u5e8f\uff0c\u9ed8\u8ba4\u4ece 0 \u5f00\u59cb\u3002 data_type \u5b57\u6bb5\u5b9a\u4e49\u4e86\u6570\u636e\u7c7b\u578b\uff0c dims \u5b57\u6bb5\u5b9a\u4e49\u4e86\u5f20\u91cf\u7684\u5f62\u72b6\u3002 input [ { name: \"INPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] output [ { name: \"OUTPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] \u4ee5\u4e0a\u7684\u6a21\u578b\u540d\u5b57\u3001\u63a8\u7406\u540e\u7aef\u3001\u8f93\u5165\u8f93\u51fa\u914d\u7f6e\u662f\u6700\u57fa\u7840\u7684\u914d\u7f6e\uff0c\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5df2\u7ecf\u53ef\u4ee5\u5f00\u59cb\u5de5\u4f5c\u3002 \u4e4b\u540e\u7684 instance_group \u7528\u4e8e\u914d\u7f6e\u786c\u4ef6\u4fe1\u606f\u3002 instance_group [ { count: 1 kind: KIND_GPU gpus: [ 0 ] } ] \u5b83\u610f\u5473\u7740\u6211\u4eec\u5b9e\u4f8b\u5316 1 \u4e2a\u6a21\u578b\uff0c\u5e76\u5c06\u5b83\u653e\u7f6e\u5728 0 \u53f7 GPU \u8bbe\u5907\u4e0a\u3002\u66f4\u591a\u7075\u6d3b\u8c03\u914d\u7684\u9009\u9879\uff0c\u8bf7\u53c2\u8003 Triton Inference Server \u7684\u6a21\u578b\u914d\u7f6e\u6587\u6863 \u3002","title":"\u6a21\u578b\u914d\u7f6e"},{"location":"cookies/serving.html#_4","text":"OneFlow Serving \u63d0\u4f9b\u4e86 Docker \u955c\u50cf\uff0c\u4f7f\u7528 Docker \u542f\u52a8\u6a21\u578b\u670d\u52a1\u3002\u6309\u7167\u4e0a\u9762\u7684\u76ee\u5f55\u7ed3\u6784\u7ec4\u7ec7\u597d\u6587\u4ef6\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u6620\u5c04\u8def\u5f84\u5230\u5bb9\u5668\u4e2d\uff0c\u542f\u52a8\u670d\u52a1\u3002 docker run --rm --runtime=nvidia --network=host -v$(pwd)/model_repository:/models \\ oneflowinc/oneflow-serving:0.0.1 /opt/tritonserver/bin/tritonserver --model-store /models \u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u53ef\u4ee5\u68c0\u67e5\u6a21\u578b\u670d\u52a1\u662f\u5426\u542f\u52a8\u3002\u770b\u5230 http 200 \u72b6\u6001\u7801\uff0c\u90a3\u4e48\u6a21\u578b\u670d\u52a1\u5df2\u7ecf\u542f\u52a8\u3002 curl -v localhost:8000/v2/health/ready","title":"\u542f\u52a8\u670d\u52a1"},{"location":"cookies/serving.html#triton-server","text":"\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 tritonclient \u4e0e Triton Server \u4ea4\u4e92\u3002\u9700\u8981\u5148\u5b89\u88c5\u4e00\u4e2a python \u5305\u3002 pip3 install tritonclient[all] \u5b9e\u9645\u4e0a\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7 HTTP\u3001gRPC \u6216\u8005 C API \u7b49\u591a\u79cd\u65b9\u5f0f \u4e0e Triton Server \u4ea4\u4e92\uff0c\u5177\u4f53\u5185\u5bb9\u53ef\u4ee5\u53c2\u9605\u4ee5\u4e0a\u6587\u6863\u3002 \u4ee5\u4e0b\u4ee3\u7801\uff0c\u662f\u56fe\u7247\u8fdb\u884c\u98ce\u683c\u5316\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u53ef\u4ee5\u5c06\u547d\u4ee4\u884c\u4f20\u9012\u6765\u7684\u56fe\u7247\u6587\u4ef6\uff0c\u8fdb\u884c\u98ce\u683c\u5316\u3002\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u5728\u4e91\u5e73\u53f0\u4e0a\u67e5\u770b\uff0c\u6216\u8005\u4e0b\u8f7d demo.zip #... import tritonclient.http as httpclient if __name__ == '__main__' : parser = argparse . ArgumentParser () parser . add_argument ( '--image' , required = True , help = 'the image to transfer style' ) FLAGS = parser . parse_args () triton_client = httpclient . InferenceServerClient ( url = '127.0.0.1:8000' ) image , w , h = load_image ( FLAGS . image , 256 , 256 ) inputs = [] inputs . append ( httpclient . InferInput ( 'INPUT_0' , image . shape , 'FP32' )) inputs [ 0 ] . set_data_from_numpy ( image , binary_data = True ) outputs = [] outputs . append ( httpclient . InferRequestedOutput ( 'OUTPUT_0' , binary_data = True )) results = triton_client . infer ( 'fast_neural_style' , inputs = inputs , outputs = outputs ) output0_data = results . as_numpy ( 'OUTPUT_0' ) image = recover_image ( output0_data , h , w ) cv2 . imwrite ( 'result.jpg' , image ) \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a triton_client \uff0c\u5176\u4e2d\u7684 127.0.0.1:8000 \u662f Triton \u670d\u52a1\u7684\u9ed8\u8ba4\u7aef\u53e3 triton_client = httpclient . InferenceServerClient ( url = '127.0.0.1:8000' ) \u7136\u540e\uff0c\u901a\u8fc7 triton_client.infer \u63a5\u53e3\uff0c\u53ef\u4ee5\u5411 Triton Server \u53d1\u8d77\u63a8\u7406\u8bf7\u6c42\u5e76\u83b7\u53d6\u8f93\u51fa\u3002 \u4e00\u6761 Tirton \u63a8\u7406\u8bf7\u6c42\uff0c\u9700\u8981\u6307\u5b9a\u6a21\u578b\u3001\u8f93\u5165\u548c\u8f93\u51fa\u90e8\u5206\u3002 \u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e3b\u8981\u662f\u5728\u6784\u9020\u8f93\u5165\u3001\u8f93\u51fa\u5bf9\u8c61\uff0c\u5b83\u4eec\u7684\u914d\u7f6e\u4e0e\u5148\u524d\u5728 config.pbtxt \u4e2d\u7684\u914d\u7f6e\u4e00\u81f4\u3002\u5e76\u6700\u7ec8\u901a\u8fc7 triton_client.infer('fast_neural_style', inputs=inputs, outputs=outputs) \u53d1\u8d77\u63a8\u7406\u8bf7\u6c42\uff0c\u5176\u4e2d\u7684 fast_neural_style \u4e5f\u4e0e config.pbtxt \u4e2d\u7684\u914d\u7f6e\u4e00\u81f4\u3002 inputs = [] inputs . append ( httpclient . InferInput ( 'INPUT_0' , image . shape , 'FP32' )) inputs [ 0 ] . set_data_from_numpy ( image , binary_data = True ) outputs = [] outputs . append ( httpclient . InferRequestedOutput ( 'OUTPUT_0' , binary_data = True )) results = triton_client . infer ( 'fast_neural_style' , inputs = inputs , outputs = outputs ) \u83b7\u53d6\u5230\u7684\u63a8\u7406\u7ed3\u679c\uff0c\u8f6c\u6362\u683c\u5f0f\u5e76\u4fdd\u5b58\u4e3a\u8f93\u51fa\u56fe\u7247\uff1a output0_data = results . as_numpy ( 'OUTPUT_0' ) image = recover_image ( output0_data , h , w ) cv2 . imwrite ( 'result.jpg' , image ) \u6211\u4eec\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u5bf9\u6307\u5b9a\u7684\u56fe\u7247\u8fdb\u884c\u63a8\u7406\u98ce\u683c\u5316\uff0c\u7ed3\u679c\u5c06\u4f1a\u4fdd\u5b58\u5728 result.jpg \u4e0b\u9762\u3002 $ curl -o cat.jpg https://images.pexels.com/photos/156934/pexels-photo-156934.jpeg $ python infer.py --image cat.jpg","title":"\u5411 Triton Server \u53d1\u9001\u8bf7\u6c42"},{"location":"parallelism/01_introduction.html","text":"\u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u00b6 \u4e3a\u4ec0\u4e48\u5206\u5e03\u5f0f\u8bad\u7ec3\u8d8a\u6765\u8d8a\u6d41\u884c \u00b6 \u8fd1\u5e74\u6765\uff0c\u6df1\u5ea6\u5b66\u4e60\u88ab\u5e7f\u6cdb\u5e94\u7528\u5230\u5404\u4e2a\u9886\u57df\uff0c\u5305\u62ec\u8ba1\u7b97\u673a\u89c6\u89c9\u3001\u8bed\u8a00\u7406\u89e3\u3001\u8bed\u97f3\u8bc6\u522b\u3001\u5e7f\u544a\u63a8\u8350\u7b49\u3002\u5728\u8fd9\u4e9b\u4e0d\u540c\u7684\u9886\u57df\u4e2d\uff0c\u4e00\u4e2a\u5171\u540c\u7684\u7279\u70b9\u5c31\u662f\u6a21\u578b\u89c4\u6a21\u8d8a\u6765\u8d8a\u5927\uff0c\u6bd4\u5982 GPT-3 \u6a21\u578b\u7684\u53c2\u6570\u91cf\u8fbe\u52301750\u4ebf\u3002\u5373\u4f7f\u75281024\u5f20 80 GB \u7684 A100\uff0c\u90a3\u4e48\u5b8c\u6574\u8bad\u7ec3 GPT-3 \u7684\u65f6\u957f\u90fd\u9700\u89811\u4e2a\u6708\u3002 \u6a21\u578b\u89c4\u6a21\u7684\u6269\u5927\uff0c\u5bf9\u786c\u4ef6\uff08\u7b97\u529b\u3001\u5185\u5b58\uff09\u7684\u53d1\u5c55\u63d0\u51fa\u8981\u6c42\u3002\u7136\u800c\uff0c\u56e0\u4e3a \u5185\u5b58\u5899 \u7684\u5b58\u5728\uff0c\u5355\u4e00\u8bbe\u5907\u7684\u7b97\u529b\u53ca\u5bb9\u91cf\uff0c\u53d7\u9650\u4e8e\u7269\u7406\u5b9a\u5f8b\uff0c\u6301\u7eed\u63d0\u9ad8\u82af\u7247\u7684\u96c6\u6210\u8d8a\u6765\u8d8a\u56f0\u96be\uff0c\u96be\u4ee5\u8ddf\u4e0a\u6a21\u578b\u6269\u5927\u7684\u9700\u6c42\u3002 \u4e3a\u4e86\u89e3\u51b3\u7b97\u529b\u589e\u901f\u4e0d\u8db3\u7684\u95ee\u9898\uff0c\u4eba\u4eec\u8003\u8651\u7528\u591a\u8282\u70b9\u96c6\u7fa4\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u4ee5\u63d0\u5347\u7b97\u529b\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u52bf\u5728\u5fc5\u884c\u3002 \u5e38\u89c1\u7684\u5e76\u884c\u7b56\u7565 \u00b6 \u7b80\u5355\u7684\u673a\u5668\u5806\u53e0\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u5e26\u6765\u7b97\u529b\u7684\u589e\u957f\u3002\u56e0\u4e3a\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u5e76\u4e0d\u662f\u5355\u7eaf\u7684\u201c\u628a\u539f\u6765\u4e00\u4e2a\u8bbe\u5907\u505a\u7684\u4e8b\u60c5\uff0c\u73b0\u5728\u5206\u7ed9\u591a\u4e2a\u8bbe\u5907\u5404\u81ea\u505a\u201d\uff0c\u5b83\u4e0d\u4ec5\u9700\u8981\u591a\u4e2a\u8bbe\u5907\u8fdb\u884c\u8ba1\u7b97\uff0c\u8fd8\u6d89\u53ca\u5230\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u53ea\u6709\u534f\u8c03\u597d\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u4e0e\u901a\u4fe1\uff0c\u624d\u80fd\u505a\u9ad8\u6548\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 \u6211\u4eec\u5c06\u4ee5\u77e9\u9635\u4e58\u6cd5\u7684\u4f8b\u5b50\uff0c\u89e3\u91ca\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u7684\u533a\u522b\u3002 \u5148\u4e86\u89e3\u4ee5\u4e0b\u903b\u8f91\u4e0a\u7684\u77e9\u9635\u4e58\u6cd5\u4f8b\u5b50: \u5047\u8bbe\u795e\u7ecf\u7f51\u7edc\u4e2d\u67d0\u4e00\u5c42\u662f\u505a\u77e9\u9635\u4e58\u6cd5\uff0c\u5176\u4e2d\u7684\u8f93\u5165 \\(x\\) \u7684\u5f62\u72b6\u4e3a \\(4\\times5\\) \uff0c\u6a21\u578b\u53c2\u6570 \\(w\\) \u7684\u5f62\u72b6\u4e3a \\(5\\times8\\) \uff0c\u90a3\u4e48\uff0c\u77e9\u9635\u4e58\u6cd5\u8f93\u51fa\u5f62\u72b6\u4e3a \\(4\\times8\\) \u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a \u5355\u673a\u5355\u5361\u7684\u8bad\u7ec3\u4e2d\uff0c\u4ee5\u4e0a\u77e9\u9635\u4e58\u6cd5\uff0c\u5148\u8ba1\u7b97\u5f97\u5230 \\(out\\) \uff0c\u5e76\u5c06 \\(out\\) \u4f20\u9012\u7ed9\u4e0b\u4e00\u5c42\uff0c\u5e76\u6700\u7ec8\u8ba1\u7b97\u5f97\u5230 \\(loss\\) \uff0c\u7136\u540e\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u5f97\u5230 \\(\\frac{\\partial loss}{\\partial w}\\) \uff0c\u7528\u4e8e\u66f4\u65b0 \\(w\\) \u3002 \u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\uff0c\u4f9d\u636e\u662f\u5207\u5206 \\(x\\) \u8fd8\u662f \\(w\\) \u7684\u4e0d\u540c\uff0c\u5206\u4e3a\u201c\u6570\u636e\u5e76\u884c\u201d\u548c\u201c\u6a21\u578b\u5e76\u884c\u201d\u7b56\u7565\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ecb\u7ecd\u5e38\u89c1\u7684\u5e76\u884c\u7b56\u7565\u3002 \u6570\u636e\u5e76\u884c \u00b6 \u6240\u8c13\u7684\u6570\u636e\u5e76\u884c\uff0c\u5c31\u662f\u5c06\u6570\u636e \\(x\\) \u8fdb\u884c\u5207\u5206\uff0c\u800c\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684\u6a21\u578b \\(w\\) \u662f\u5b8c\u6574\u7684\u3001\u4e00\u81f4\u7684\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c \\(x\\) \u88ab\u6309\u7167\u7b2c0\u7ef4\u5ea6\u5e73\u5747\u5207\u5206\u52302\u4e2a\u8bbe\u5907\u4e0a\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e0a\u90fd\u6709\u5b8c\u6574\u7684 \\(w\\) \u3002 \u8fd9\u6837\uff0c\u5728\u4e24\u53f0\u8bbe\u5907\u4e0a\uff0c\u5206\u522b\u5f97\u5230\u7684\u8f93\u51fa\uff0c\u90fd\u53ea\u662f\u903b\u8f91\u4e0a\u8f93\u51fa\u7684\u4e00\u534a\uff08\u5f62\u72b6\u4e3a \\(2\\times8\\) \uff09\uff0c\u5c06\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u8f93\u51fa\u62fc\u63a5\u5230\u4e00\u8d77\uff0c\u624d\u80fd\u5f97\u5230\u903b\u8f91\u4e0a\u5b8c\u6574\u7684\u8f93\u51fa\u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a\u6570\u636e\u88ab\u5206\u53d1\u5230\u4e862\u4e2a\u8bbe\u5907\u4e0a\uff0c\u56e0\u6b64\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\uff0c\u5404\u81ea\u8bbe\u5907\u4e0a\u5f97\u5230\u7684 \\(\\frac{\\partial loss}{\\partial w}\\) \u4f1a\u4e0d\u4e00\u6837\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u68af\u5ea6\u66f4\u65b0\u5404\u81ea\u7684\u6a21\u578b\uff0c\u4f1a\u9020\u62102\u4e2a\u8bbe\u5907\u4e0a\u7684 \u6a21\u578b\u4e0d\u4e00\u81f4 \uff0c\u8bad\u7ec3\u5c31\u5931\u53bb\u4e86\u610f\u4e49\uff08\u5230\u5e95\u7528\u54ea\u4e2a\u6a21\u578b\u597d\u5462\uff1f\uff09\u3002 \u56e0\u6b64\uff0c\u6570\u636e\u5e76\u884c\u7b56\u7565\u4e0b\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5bf9\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u68af\u5ea6\u8fdb\u884c AllReduce \uff0c\u4ee5\u786e\u4fdd\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u6a21\u578b\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\u3002 \u5f53\u6570\u636e\u96c6\u8f83\u5927\uff0c\u6a21\u578b\u8f83\u5c0f\u65f6\uff0c\u7531\u4e8e\u53cd\u5411\u8fc7\u7a0b\u4e2d\u4e3a\u540c\u6b65\u68af\u5ea6\u4ea7\u751f\u7684\u901a\u4fe1\u4ee3\u4ef7\u8f83\u5c0f\uff0c\u6b64\u65f6\u9009\u62e9\u6570\u636e\u5e76\u884c\u4e00\u822c\u6bd4\u8f83\u6709\u4f18\u52bf\uff0c\u5e38\u89c1\u7684\u89c6\u89c9\u5206\u7c7b\u6a21\u578b\uff0c\u5982 ResNet50\uff0c\u6bd4\u8f83\u9002\u5408\u91c7\u7528\u6570\u636e\u5e76\u884c\u3002 \u6a21\u578b\u5e76\u884c \u00b6 \u5f53\u795e\u7ecf\u7f51\u7edc\u975e\u5e38\u5de8\u5927\uff0c\u6570\u636e\u5e76\u884c\u540c\u6b65\u68af\u5ea6\u7684\u4ee3\u4ef7\u5c31\u4f1a\u5f88\u5927\uff0c\u751a\u81f3\u7f51\u7edc\u53ef\u80fd\u5de8\u5927\u5230\u65e0\u6cd5\u5b58\u653e\u5230\u5355\u4e00\u8ba1\u7b97\u8bbe\u5907\u4e2d\uff0c\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u91c7\u7528\u6a21\u578b\u5e76\u884c\u7b56\u7565\u89e3\u51b3\u95ee\u9898\u3002 \u6240\u8c13\u7684\u6a21\u578b\u5e76\u884c\uff0c\u5c31\u662f\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u662f\u5b8c\u6574\u7684\u3001\u4e00\u81f4\u7684\uff0c\u800c\u6a21\u578b \\(w\\) \u88ab\u5207\u5206\u5230\u4e86\u5404\u4e2a\u8bbe\u5907\u4e0a\uff0c\u6bcf\u4e2a\u8bbe\u5907\u53ea\u62e5\u6709\u6a21\u578b\u7684\u4e00\u90e8\u5206\uff0c\u6240\u6709\u8ba1\u7b97\u8bbe\u5907\u4e0a\u7684\u6a21\u578b\u62fc\u5728\u4e00\u8d77\uff0c\u624d\u662f\u5b8c\u6574\u7684\u6a21\u578b\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c \\(w\\) \u88ab\u6309\u7167\u7b2c1\u7ef4\u5ea6\u5e73\u5747\u5207\u5206\u52302\u4e2a\u8bbe\u5907\u4e0a\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e0a\u90fd\u6709\u5b8c\u6574\u7684 \\(x\\) \u3002\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u8f93\u51fa\u4e5f\u9700\u8981\u901a\u8fc7\u62fc\u63a5\u624d\u80fd\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u8f93\u51fa\u3002 \u6a21\u578b\u5e76\u884c\u7684\u597d\u5904\u662f\uff0c\u7701\u53bb\u4e86\u591a\u4e2a\u8bbe\u5907\u4e4b\u95f4\u7684\u68af\u5ea6 AllReduce\uff1b\u4f46\u662f\uff0c\u7531\u4e8e\u6bcf\u4e2a\u8bbe\u5907\u90fd\u9700\u8981\u5b8c\u6574\u7684\u6570\u636e\u8f93\u5165\uff0c\u56e0\u6b64\uff0c\u6570\u636e\u4f1a\u5728\u591a\u4e2a\u8bbe\u5907\u4e4b\u95f4\u8fdb\u884c\u5e7f\u64ad\uff0c\u4ea7\u751f\u901a\u4fe1\u4ee3\u4ef7\u3002\u6bd4\u5982\uff0c\u4e0a\u56fe\u4e2d\u7684\u6700\u7ec8\u5f97\u5230\u7684 \\(out~(4\\times8)\\) \uff0c\u5982\u679c\u5b83\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u7f51\u7edc\u7684\u8f93\u5165\uff0c\u90a3\u4e48\u5b83\u5c31\u9700\u8981\u88ab\u5e7f\u64ad\u53d1\u9001\u5230\u4e24\u4e2a\u8bbe\u5907\u4e0a\u3002 \u8bed\u8a00\u6a21\u578b\uff0c\u5982 BERT\uff0c\u5e38\u91c7\u7528\u6a21\u578b\u5e76\u884c\u3002 \u6d41\u6c34\u5e76\u884c \u00b6 \u5f53\u795e\u7ecf\u7f51\u7edc\u8fc7\u4e8e\u5de8\u5927\uff0c\u65e0\u6cd5\u5728\u4e00\u4e2a\u8bbe\u5907\u4e0a\u5b58\u653e\u65f6\uff0c\u9664\u4e86\u4e0a\u8ff0\u7684\u6a21\u578b\u5e76\u884c\u7684\u7b56\u7565\u5916\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u6d41\u6c34\u5e76\u884c\u3002 \u6d41\u6c34\u5e76\u884c\u6307\u5c06\u7f51\u7edc\u5207\u4e3a\u591a\u4e2a\u9636\u6bb5\uff0c\u5e76\u5206\u53d1\u5230\u4e0d\u540c\u7684\u8ba1\u7b97\u8bbe\u5907\u4e0a\uff0c\u5404\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e4b\u95f4\u4ee5\u201c\u63a5\u529b\u201d\u7684\u65b9\u5f0f\u5b8c\u6210\u8bad\u7ec3\u3002 \u5982\u4e0b\u56fe\uff0c\u5c55\u793a\u4e86\u4e00\u4e2a\u903b\u8f91\u4e0a\u76844\u5c42\u7f51\u7edc\uff08 T1 \u81f3 T4 )\u662f\u5982\u4f55\u505a\u6d41\u6c34\u5e76\u884c\u7684\u3002 4\u5c42\u7f51\u7edc\u88ab\u5207\u5206\u52302\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e0a\uff0c\u5176\u4e2d GPU0 \u4e0a\u8fdb\u884c T1 \u4e0e T2 \u7684\u8fd0\u7b97\uff0c GPU1 \u4e0a\u8fdb\u884c T3 \u4e0e T4 \u7684\u8ba1\u7b97\u3002 GPU0 \u4e0a\u5b8c\u6210\u524d\u4e24\u5c42\u7684\u8ba1\u7b97\u540e\uff0c\u5b83\u7684\u8f93\u51fa\u88ab\u5f53\u4f5c GPU1 \u7684\u8f93\u5165\uff0c\u7ee7\u7eed\u8fdb\u884c\u540e\u4e24\u5c42\u7684\u8ba1\u7b97\u3002 \u6df7\u5408\u5e76\u884c \u00b6 \u7f51\u7edc\u7684\u8bad\u7ec3\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5c06\u591a\u79cd\u5e76\u884c\u7b56\u7565\u6df7\u7528\uff0c\u4ee5 GPT-3 \u4e3a\u4f8b\uff0c\u4ee5\u4e0b\u662f\u5b83\u8bad\u7ec3\u65f6\u7684\u8bbe\u5907\u5e76\u884c\u65b9\u6848\uff1a \u5b83\u9996\u5148\u88ab\u5206\u4e3a 64 \u4e2a\u9636\u6bb5\uff0c\u8fdb\u884c\u6d41\u6c34\u5e76\u884c\u3002\u6bcf\u4e2a\u9636\u6bb5\u90fd\u8fd0\u884c\u5728 6 \u53f0 DGX-A100 \u4e3b\u673a\u4e0a\u3002\u57286\u53f0\u4e3b\u673a\u4e4b\u95f4\uff0c\u8fdb\u884c\u7684\u662f\u6570\u636e\u5e76\u884c\u8bad\u7ec3\uff1b\u6bcf\u53f0\u4e3b\u673a\u6709 8 \u5f20 GPU \u663e\u5361\uff0c\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u76848\u5f20 GPU \u663e\u5361\u4e4b\u95f4\u662f\u8fdb\u884c\u6a21\u578b\u5e76\u884c\u8bad\u7ec3\u3002 \u5e76\u884c\u7b56\u7565\u7684\u9009\u62e9\u5f71\u54cd\u7740\u8bad\u7ec3\u6548\u7387\uff0c\u6846\u67b6\u5bf9\u5e76\u884c\u8bad\u7ec3\u7684\u63a5\u53e3\u652f\u6301\u7a0b\u5ea6\uff0c\u51b3\u5b9a\u4e86\u7b97\u6cd5\u5de5\u7a0b\u5e08\u7684\u5f00\u53d1\u6548\u7387\u3002OneFlow \u9488\u5bf9\u5206\u5e03\u5f0f\u8bad\u7ec3\u6240\u505a\u7684\u7cfb\u7edf\u7ea7\u8bbe\u8ba1\u548c\u521b\u65b0\uff0c\u4e3a\u7528\u6237\u8f7b\u677e\u4e0a\u624b\u5206\u5e03\u5f0f\u8bad\u7ec3\u505a\u8db3\u4e86\u94fa\u57ab\u3002\u6211\u4eec\u5c06\u5728\u672c\u4e13\u9898\u7684\u5176\u5b83\u6587\u7ae0\u4e2d\u770b\u5230\u76f8\u5173\u793a\u4f8b\u3002","title":"\u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565"},{"location":"parallelism/01_introduction.html#_1","text":"","title":"\u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565"},{"location":"parallelism/01_introduction.html#_2","text":"\u8fd1\u5e74\u6765\uff0c\u6df1\u5ea6\u5b66\u4e60\u88ab\u5e7f\u6cdb\u5e94\u7528\u5230\u5404\u4e2a\u9886\u57df\uff0c\u5305\u62ec\u8ba1\u7b97\u673a\u89c6\u89c9\u3001\u8bed\u8a00\u7406\u89e3\u3001\u8bed\u97f3\u8bc6\u522b\u3001\u5e7f\u544a\u63a8\u8350\u7b49\u3002\u5728\u8fd9\u4e9b\u4e0d\u540c\u7684\u9886\u57df\u4e2d\uff0c\u4e00\u4e2a\u5171\u540c\u7684\u7279\u70b9\u5c31\u662f\u6a21\u578b\u89c4\u6a21\u8d8a\u6765\u8d8a\u5927\uff0c\u6bd4\u5982 GPT-3 \u6a21\u578b\u7684\u53c2\u6570\u91cf\u8fbe\u52301750\u4ebf\u3002\u5373\u4f7f\u75281024\u5f20 80 GB \u7684 A100\uff0c\u90a3\u4e48\u5b8c\u6574\u8bad\u7ec3 GPT-3 \u7684\u65f6\u957f\u90fd\u9700\u89811\u4e2a\u6708\u3002 \u6a21\u578b\u89c4\u6a21\u7684\u6269\u5927\uff0c\u5bf9\u786c\u4ef6\uff08\u7b97\u529b\u3001\u5185\u5b58\uff09\u7684\u53d1\u5c55\u63d0\u51fa\u8981\u6c42\u3002\u7136\u800c\uff0c\u56e0\u4e3a \u5185\u5b58\u5899 \u7684\u5b58\u5728\uff0c\u5355\u4e00\u8bbe\u5907\u7684\u7b97\u529b\u53ca\u5bb9\u91cf\uff0c\u53d7\u9650\u4e8e\u7269\u7406\u5b9a\u5f8b\uff0c\u6301\u7eed\u63d0\u9ad8\u82af\u7247\u7684\u96c6\u6210\u8d8a\u6765\u8d8a\u56f0\u96be\uff0c\u96be\u4ee5\u8ddf\u4e0a\u6a21\u578b\u6269\u5927\u7684\u9700\u6c42\u3002 \u4e3a\u4e86\u89e3\u51b3\u7b97\u529b\u589e\u901f\u4e0d\u8db3\u7684\u95ee\u9898\uff0c\u4eba\u4eec\u8003\u8651\u7528\u591a\u8282\u70b9\u96c6\u7fa4\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u4ee5\u63d0\u5347\u7b97\u529b\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u52bf\u5728\u5fc5\u884c\u3002","title":"\u4e3a\u4ec0\u4e48\u5206\u5e03\u5f0f\u8bad\u7ec3\u8d8a\u6765\u8d8a\u6d41\u884c"},{"location":"parallelism/01_introduction.html#_3","text":"\u7b80\u5355\u7684\u673a\u5668\u5806\u53e0\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u5e26\u6765\u7b97\u529b\u7684\u589e\u957f\u3002\u56e0\u4e3a\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u5e76\u4e0d\u662f\u5355\u7eaf\u7684\u201c\u628a\u539f\u6765\u4e00\u4e2a\u8bbe\u5907\u505a\u7684\u4e8b\u60c5\uff0c\u73b0\u5728\u5206\u7ed9\u591a\u4e2a\u8bbe\u5907\u5404\u81ea\u505a\u201d\uff0c\u5b83\u4e0d\u4ec5\u9700\u8981\u591a\u4e2a\u8bbe\u5907\u8fdb\u884c\u8ba1\u7b97\uff0c\u8fd8\u6d89\u53ca\u5230\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u53ea\u6709\u534f\u8c03\u597d\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u4e0e\u901a\u4fe1\uff0c\u624d\u80fd\u505a\u9ad8\u6548\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 \u6211\u4eec\u5c06\u4ee5\u77e9\u9635\u4e58\u6cd5\u7684\u4f8b\u5b50\uff0c\u89e3\u91ca\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u7684\u533a\u522b\u3002 \u5148\u4e86\u89e3\u4ee5\u4e0b\u903b\u8f91\u4e0a\u7684\u77e9\u9635\u4e58\u6cd5\u4f8b\u5b50: \u5047\u8bbe\u795e\u7ecf\u7f51\u7edc\u4e2d\u67d0\u4e00\u5c42\u662f\u505a\u77e9\u9635\u4e58\u6cd5\uff0c\u5176\u4e2d\u7684\u8f93\u5165 \\(x\\) \u7684\u5f62\u72b6\u4e3a \\(4\\times5\\) \uff0c\u6a21\u578b\u53c2\u6570 \\(w\\) \u7684\u5f62\u72b6\u4e3a \\(5\\times8\\) \uff0c\u90a3\u4e48\uff0c\u77e9\u9635\u4e58\u6cd5\u8f93\u51fa\u5f62\u72b6\u4e3a \\(4\\times8\\) \u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a \u5355\u673a\u5355\u5361\u7684\u8bad\u7ec3\u4e2d\uff0c\u4ee5\u4e0a\u77e9\u9635\u4e58\u6cd5\uff0c\u5148\u8ba1\u7b97\u5f97\u5230 \\(out\\) \uff0c\u5e76\u5c06 \\(out\\) \u4f20\u9012\u7ed9\u4e0b\u4e00\u5c42\uff0c\u5e76\u6700\u7ec8\u8ba1\u7b97\u5f97\u5230 \\(loss\\) \uff0c\u7136\u540e\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u5f97\u5230 \\(\\frac{\\partial loss}{\\partial w}\\) \uff0c\u7528\u4e8e\u66f4\u65b0 \\(w\\) \u3002 \u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\uff0c\u4f9d\u636e\u662f\u5207\u5206 \\(x\\) \u8fd8\u662f \\(w\\) \u7684\u4e0d\u540c\uff0c\u5206\u4e3a\u201c\u6570\u636e\u5e76\u884c\u201d\u548c\u201c\u6a21\u578b\u5e76\u884c\u201d\u7b56\u7565\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ecb\u7ecd\u5e38\u89c1\u7684\u5e76\u884c\u7b56\u7565\u3002","title":"\u5e38\u89c1\u7684\u5e76\u884c\u7b56\u7565"},{"location":"parallelism/01_introduction.html#_4","text":"\u6240\u8c13\u7684\u6570\u636e\u5e76\u884c\uff0c\u5c31\u662f\u5c06\u6570\u636e \\(x\\) \u8fdb\u884c\u5207\u5206\uff0c\u800c\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684\u6a21\u578b \\(w\\) \u662f\u5b8c\u6574\u7684\u3001\u4e00\u81f4\u7684\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c \\(x\\) \u88ab\u6309\u7167\u7b2c0\u7ef4\u5ea6\u5e73\u5747\u5207\u5206\u52302\u4e2a\u8bbe\u5907\u4e0a\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e0a\u90fd\u6709\u5b8c\u6574\u7684 \\(w\\) \u3002 \u8fd9\u6837\uff0c\u5728\u4e24\u53f0\u8bbe\u5907\u4e0a\uff0c\u5206\u522b\u5f97\u5230\u7684\u8f93\u51fa\uff0c\u90fd\u53ea\u662f\u903b\u8f91\u4e0a\u8f93\u51fa\u7684\u4e00\u534a\uff08\u5f62\u72b6\u4e3a \\(2\\times8\\) \uff09\uff0c\u5c06\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u8f93\u51fa\u62fc\u63a5\u5230\u4e00\u8d77\uff0c\u624d\u80fd\u5f97\u5230\u903b\u8f91\u4e0a\u5b8c\u6574\u7684\u8f93\u51fa\u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a\u6570\u636e\u88ab\u5206\u53d1\u5230\u4e862\u4e2a\u8bbe\u5907\u4e0a\uff0c\u56e0\u6b64\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\uff0c\u5404\u81ea\u8bbe\u5907\u4e0a\u5f97\u5230\u7684 \\(\\frac{\\partial loss}{\\partial w}\\) \u4f1a\u4e0d\u4e00\u6837\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u68af\u5ea6\u66f4\u65b0\u5404\u81ea\u7684\u6a21\u578b\uff0c\u4f1a\u9020\u62102\u4e2a\u8bbe\u5907\u4e0a\u7684 \u6a21\u578b\u4e0d\u4e00\u81f4 \uff0c\u8bad\u7ec3\u5c31\u5931\u53bb\u4e86\u610f\u4e49\uff08\u5230\u5e95\u7528\u54ea\u4e2a\u6a21\u578b\u597d\u5462\uff1f\uff09\u3002 \u56e0\u6b64\uff0c\u6570\u636e\u5e76\u884c\u7b56\u7565\u4e0b\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5bf9\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u68af\u5ea6\u8fdb\u884c AllReduce \uff0c\u4ee5\u786e\u4fdd\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u6a21\u578b\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\u3002 \u5f53\u6570\u636e\u96c6\u8f83\u5927\uff0c\u6a21\u578b\u8f83\u5c0f\u65f6\uff0c\u7531\u4e8e\u53cd\u5411\u8fc7\u7a0b\u4e2d\u4e3a\u540c\u6b65\u68af\u5ea6\u4ea7\u751f\u7684\u901a\u4fe1\u4ee3\u4ef7\u8f83\u5c0f\uff0c\u6b64\u65f6\u9009\u62e9\u6570\u636e\u5e76\u884c\u4e00\u822c\u6bd4\u8f83\u6709\u4f18\u52bf\uff0c\u5e38\u89c1\u7684\u89c6\u89c9\u5206\u7c7b\u6a21\u578b\uff0c\u5982 ResNet50\uff0c\u6bd4\u8f83\u9002\u5408\u91c7\u7528\u6570\u636e\u5e76\u884c\u3002","title":"\u6570\u636e\u5e76\u884c"},{"location":"parallelism/01_introduction.html#_5","text":"\u5f53\u795e\u7ecf\u7f51\u7edc\u975e\u5e38\u5de8\u5927\uff0c\u6570\u636e\u5e76\u884c\u540c\u6b65\u68af\u5ea6\u7684\u4ee3\u4ef7\u5c31\u4f1a\u5f88\u5927\uff0c\u751a\u81f3\u7f51\u7edc\u53ef\u80fd\u5de8\u5927\u5230\u65e0\u6cd5\u5b58\u653e\u5230\u5355\u4e00\u8ba1\u7b97\u8bbe\u5907\u4e2d\uff0c\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u91c7\u7528\u6a21\u578b\u5e76\u884c\u7b56\u7565\u89e3\u51b3\u95ee\u9898\u3002 \u6240\u8c13\u7684\u6a21\u578b\u5e76\u884c\uff0c\u5c31\u662f\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u662f\u5b8c\u6574\u7684\u3001\u4e00\u81f4\u7684\uff0c\u800c\u6a21\u578b \\(w\\) \u88ab\u5207\u5206\u5230\u4e86\u5404\u4e2a\u8bbe\u5907\u4e0a\uff0c\u6bcf\u4e2a\u8bbe\u5907\u53ea\u62e5\u6709\u6a21\u578b\u7684\u4e00\u90e8\u5206\uff0c\u6240\u6709\u8ba1\u7b97\u8bbe\u5907\u4e0a\u7684\u6a21\u578b\u62fc\u5728\u4e00\u8d77\uff0c\u624d\u662f\u5b8c\u6574\u7684\u6a21\u578b\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c \\(w\\) \u88ab\u6309\u7167\u7b2c1\u7ef4\u5ea6\u5e73\u5747\u5207\u5206\u52302\u4e2a\u8bbe\u5907\u4e0a\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e0a\u90fd\u6709\u5b8c\u6574\u7684 \\(x\\) \u3002\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u8f93\u51fa\u4e5f\u9700\u8981\u901a\u8fc7\u62fc\u63a5\u624d\u80fd\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u8f93\u51fa\u3002 \u6a21\u578b\u5e76\u884c\u7684\u597d\u5904\u662f\uff0c\u7701\u53bb\u4e86\u591a\u4e2a\u8bbe\u5907\u4e4b\u95f4\u7684\u68af\u5ea6 AllReduce\uff1b\u4f46\u662f\uff0c\u7531\u4e8e\u6bcf\u4e2a\u8bbe\u5907\u90fd\u9700\u8981\u5b8c\u6574\u7684\u6570\u636e\u8f93\u5165\uff0c\u56e0\u6b64\uff0c\u6570\u636e\u4f1a\u5728\u591a\u4e2a\u8bbe\u5907\u4e4b\u95f4\u8fdb\u884c\u5e7f\u64ad\uff0c\u4ea7\u751f\u901a\u4fe1\u4ee3\u4ef7\u3002\u6bd4\u5982\uff0c\u4e0a\u56fe\u4e2d\u7684\u6700\u7ec8\u5f97\u5230\u7684 \\(out~(4\\times8)\\) \uff0c\u5982\u679c\u5b83\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u7f51\u7edc\u7684\u8f93\u5165\uff0c\u90a3\u4e48\u5b83\u5c31\u9700\u8981\u88ab\u5e7f\u64ad\u53d1\u9001\u5230\u4e24\u4e2a\u8bbe\u5907\u4e0a\u3002 \u8bed\u8a00\u6a21\u578b\uff0c\u5982 BERT\uff0c\u5e38\u91c7\u7528\u6a21\u578b\u5e76\u884c\u3002","title":"\u6a21\u578b\u5e76\u884c"},{"location":"parallelism/01_introduction.html#_6","text":"\u5f53\u795e\u7ecf\u7f51\u7edc\u8fc7\u4e8e\u5de8\u5927\uff0c\u65e0\u6cd5\u5728\u4e00\u4e2a\u8bbe\u5907\u4e0a\u5b58\u653e\u65f6\uff0c\u9664\u4e86\u4e0a\u8ff0\u7684\u6a21\u578b\u5e76\u884c\u7684\u7b56\u7565\u5916\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u6d41\u6c34\u5e76\u884c\u3002 \u6d41\u6c34\u5e76\u884c\u6307\u5c06\u7f51\u7edc\u5207\u4e3a\u591a\u4e2a\u9636\u6bb5\uff0c\u5e76\u5206\u53d1\u5230\u4e0d\u540c\u7684\u8ba1\u7b97\u8bbe\u5907\u4e0a\uff0c\u5404\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e4b\u95f4\u4ee5\u201c\u63a5\u529b\u201d\u7684\u65b9\u5f0f\u5b8c\u6210\u8bad\u7ec3\u3002 \u5982\u4e0b\u56fe\uff0c\u5c55\u793a\u4e86\u4e00\u4e2a\u903b\u8f91\u4e0a\u76844\u5c42\u7f51\u7edc\uff08 T1 \u81f3 T4 )\u662f\u5982\u4f55\u505a\u6d41\u6c34\u5e76\u884c\u7684\u3002 4\u5c42\u7f51\u7edc\u88ab\u5207\u5206\u52302\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e0a\uff0c\u5176\u4e2d GPU0 \u4e0a\u8fdb\u884c T1 \u4e0e T2 \u7684\u8fd0\u7b97\uff0c GPU1 \u4e0a\u8fdb\u884c T3 \u4e0e T4 \u7684\u8ba1\u7b97\u3002 GPU0 \u4e0a\u5b8c\u6210\u524d\u4e24\u5c42\u7684\u8ba1\u7b97\u540e\uff0c\u5b83\u7684\u8f93\u51fa\u88ab\u5f53\u4f5c GPU1 \u7684\u8f93\u5165\uff0c\u7ee7\u7eed\u8fdb\u884c\u540e\u4e24\u5c42\u7684\u8ba1\u7b97\u3002","title":"\u6d41\u6c34\u5e76\u884c"},{"location":"parallelism/01_introduction.html#_7","text":"\u7f51\u7edc\u7684\u8bad\u7ec3\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5c06\u591a\u79cd\u5e76\u884c\u7b56\u7565\u6df7\u7528\uff0c\u4ee5 GPT-3 \u4e3a\u4f8b\uff0c\u4ee5\u4e0b\u662f\u5b83\u8bad\u7ec3\u65f6\u7684\u8bbe\u5907\u5e76\u884c\u65b9\u6848\uff1a \u5b83\u9996\u5148\u88ab\u5206\u4e3a 64 \u4e2a\u9636\u6bb5\uff0c\u8fdb\u884c\u6d41\u6c34\u5e76\u884c\u3002\u6bcf\u4e2a\u9636\u6bb5\u90fd\u8fd0\u884c\u5728 6 \u53f0 DGX-A100 \u4e3b\u673a\u4e0a\u3002\u57286\u53f0\u4e3b\u673a\u4e4b\u95f4\uff0c\u8fdb\u884c\u7684\u662f\u6570\u636e\u5e76\u884c\u8bad\u7ec3\uff1b\u6bcf\u53f0\u4e3b\u673a\u6709 8 \u5f20 GPU \u663e\u5361\uff0c\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u76848\u5f20 GPU \u663e\u5361\u4e4b\u95f4\u662f\u8fdb\u884c\u6a21\u578b\u5e76\u884c\u8bad\u7ec3\u3002 \u5e76\u884c\u7b56\u7565\u7684\u9009\u62e9\u5f71\u54cd\u7740\u8bad\u7ec3\u6548\u7387\uff0c\u6846\u67b6\u5bf9\u5e76\u884c\u8bad\u7ec3\u7684\u63a5\u53e3\u652f\u6301\u7a0b\u5ea6\uff0c\u51b3\u5b9a\u4e86\u7b97\u6cd5\u5de5\u7a0b\u5e08\u7684\u5f00\u53d1\u6548\u7387\u3002OneFlow \u9488\u5bf9\u5206\u5e03\u5f0f\u8bad\u7ec3\u6240\u505a\u7684\u7cfb\u7edf\u7ea7\u8bbe\u8ba1\u548c\u521b\u65b0\uff0c\u4e3a\u7528\u6237\u8f7b\u677e\u4e0a\u624b\u5206\u5e03\u5f0f\u8bad\u7ec3\u505a\u8db3\u4e86\u94fa\u57ab\u3002\u6211\u4eec\u5c06\u5728\u672c\u4e13\u9898\u7684\u5176\u5b83\u6587\u7ae0\u4e2d\u770b\u5230\u76f8\u5173\u793a\u4f8b\u3002","title":"\u6df7\u5408\u5e76\u884c"},{"location":"parallelism/02_sbp.html","text":"\u96c6\u7fa4\u7684\u5168\u5c40\u89c6\u89d2 \u00b6 OneFlow \u63d0\u51fa\u4e86 \u5168\u5c40\u89c6\u89d2\uff08Global View\uff09 \u7684\u6982\u5ff5\uff0c\u7528\u4e8e\u7b80\u5316\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u7b80\u5355\u800c\u8a00\uff0c\u5728 OneFlow \u7684\u5168\u5c40\u89c6\u89d2\u4e0b\uff0c\u96c6\u7fa4\u88ab\u62bd\u8c61\u4e3a\u4e00\u53f0\u201c\u8d85\u7ea7\u8ba1\u7b97\u8bbe\u5907\u201d\u3002 \u7528\u6237\u4e0d\u7528\u5173\u5fc3\u96c6\u7fa4\u4e2d\u8ba1\u7b97\u3001\u901a\u4fe1\u7684\u7ec6\u8282\uff0c\u53ea\u9700\u5173\u5fc3\u903b\u8f91\u4e0a\u7684\u6570\u636e\u4e0e\u8ba1\u7b97\uff0c\u4f9d\u7136\u50cf\u5355\u673a\u5355\u5361\u90a3\u6837\u601d\u8003\u3001\u7f16\u7a0b\uff0c\u5c31\u80fd\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 OneFlow \u7684\u5168\u5c40\u89c6\u89d2\uff0c\u4f9d\u8d56\u51e0\u4e2a\u91cd\u8981\u6982\u5ff5\uff1aPlacement\u3001SBP \u4e0e SBP Signature\u3002 Placement \u00b6 OneFlow \u5168\u5c40\u89c6\u89d2\u4e0b\u7684 Tensor \u6709 placement \u5c5e\u6027\uff0c\u901a\u8fc7 placement \u5c5e\u6027\u53ef\u4ee5\u6307\u5b9a\u8be5 Tensor \u5b58\u653e\u5728\u54ea\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\u3002 OneFlow \u4f1a\u81ea\u52a8\u4e3a\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u8bbe\u5907\u7f16\u53f7\u3002\u6bd4\u5982\uff0c\u5982\u679c\u96c6\u7fa4\u4e2d\u6709 4 \u53f0\u4e3b\u673a\uff0c\u6bcf\u53f0\u4e3b\u673a\u4e0a\u6709 8 \u5f20\u663e\u5361\uff0c\u4e00\u5171 32 \u5f20\u663e\u5361\uff0c\u90a3\u4e48 OneFlow \u4f1a\u5c06\u8fd9 32 \u5f20\u663e\u5361\u81ea\u52a8\u7f16\u53f7\u4e3a 0~31\u3002 \u5982\u679c\u60f3\u5c06 Tensor \u653e\u7f6e\u5728\u7b2c 0 \u53f0\u673a\u5668\u7684\u524d 4 \u5f20\u663e\u5361\u4e0a\uff0c\u53ea\u9700\u8981\u914d\u7f6e\uff1a placement(\"cuda\", [0, 1, 2, 3] \u3002 \u5982\u679c\u60f3\u5c06 Tensor \u653e\u7f6e\u5728\u7b2c 0 \u53f0\u673a\u5668\u7684\u540e 4 \u5f20\u663e\u5361\u4e0a\uff0c\u53ea\u9700\u8981\u914d\u7f6e\uff1a placement(\"cuda\", [4, 5, 6, 7]) \u3002 placement \u4f7f\u5f97 OneFlow \u5f88\u5bb9\u6613\u652f\u6301\u6d41\u6c34\u5e76\u884c\uff0c\u6211\u4eec\u5c06\u5728\u672c\u4e13\u9898\u7684\u5176\u5b83\u6587\u7ae0\u4e2d\u770b\u5230\u4e0e placement \u6709\u5173\u7684\u5b9e\u9645\u4f8b\u5b50\u3002 SBP \u00b6 SBP \u662f OneFlow \u53d1\u660e\u7684\u6982\u5ff5\uff0c\u63cf\u8ff0\u4e86\u201c\u8d85\u7ea7\u8ba1\u7b97\u8bbe\u5907\u201d\u5168\u5c40\u89c6\u89d2\u4e0b\u7684\u6570\u636e\u4e0e\u96c6\u7fa4\u4e2d\u771f\u5b9e\u7684\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5b83\u7531 split , broadcast , partial \u7684\u9996\u5b57\u6bcd\u7ec4\u5408\u800c\u6210\u3002 \u8be6\u7ec6\u800c\u8a00\uff1a split \u8868\u793a\u7269\u7406\u8bbe\u5907\u4e0a\u7684 Tensor\uff0c\u662f\u5c06\u5168\u5c40\u89c6\u89d2\u7684 Tensor \u5207\u5206\u5f97\u5230\u7684\u3002\u5207\u5206\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u5207\u5206\u7684\u7ef4\u5ea6\u3002\u7269\u7406\u8bbe\u5907\u4e0a\u7684 Tensor \uff0c\u7ecf\u8fc7\u62fc\u63a5\uff0c\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u5168\u5c40\u89c6\u89d2\u7684 Tensor \u3002 broadcast \u8868\u793a\u5168\u5c40\u89c6\u89d2\u4e0b\u7684 Tensor\uff0c\u4f1a\u590d\u5236\u5e76\u5e7f\u64ad\u5230\u6240\u6709\u7684\u7269\u7406\u8bbe\u5907\u4e0a\u3002 partial \u8868\u793a\u5168\u5c40\u89c6\u89d2\u4e0b\u7684 Tensor \u4e0e\u7269\u7406\u8bbe\u5907\u4e0a\u7684 Tensor \u7684 \u5f62\u72b6\u76f8\u540c \uff0c\u4f46\u662f\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u503c\uff0c\u53ea\u662f\u5168\u5c40\u89c6\u89d2\u4e0b Tensor \u7684 \u4e00\u90e8\u5206 \u3002\u4ee5 partial sum \u4e3a\u4f8b\uff0c\u5982\u679c\u6211\u4eec\u5c06\u96c6\u7fa4\u4e2d\u6240\u6709\u8bbe\u5907\u7684\u5f20\u91cf\u6309\u4f4d\u7f6e\u76f8\u52a0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u5168\u5c40\u89c6\u89d2\u7684 Tensor\u3002\u9664\u4e86 sum \u5916\uff0c min \u3001 max \u7b49\u64cd\u4f5c\u4e5f\u9002\u7528\u4e8e partial \u3002 \u4e0b\u56fe\u4e2d\u5206\u522b\u5c55\u793a\u4e86 SBP \u7684\u60c5\u51b5\uff0c\u5206\u522b\u662f split(0) \u3001 split(1) \u3001 broadcast \u548c partial sum \u3002 \u5728\u521b\u5efa Global Tensor \u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a Tensor \u7684 SBP\uff0c\u5b9e\u9645\u7684\u4ee3\u7801\u4f8b\u5b50\u5c06\u5728\u4e0b\u4e00\u7bc7\u6587\u7ae0 Global Tensor \u4e2d\u770b\u5230\u3002 SBP Signature \u00b6 SBP \u63cf\u8ff0\u4e86\u5168\u5c40\u89c6\u89d2\u4e0b\u7684\u6570\u636e\u4e0e\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5f53\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0cOneFlow \u6839\u636e\u6570\u636e\u7684 SBP \u5c5e\u6027\uff0c\u5c06\u6570\u636e\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\uff0c\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5b64\u7acb\u7684 Tensor\uff0c\u6211\u4eec\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\u5b83\u7684 SBP \u5c5e\u6027\u3002 \u4f46\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u7684\u7b97\u5b50\uff0c\u6211\u4eec\u5374\u4e0d\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\u5b83\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u5c5e\u6027\u3002\u8fd9\u662f\u56e0\u4e3a\u968f\u610f\u8bbe\u7f6e\u4e00\u4e2a\u7b97\u5b50\u8f93\u5165\u8f93\u51fa\u7684 SBP \u5c5e\u6027\uff0c\u53ef\u80fd\u4e0d\u7b26\u5408\u5168\u5c40\u89c6\u89d2\u4e0b\u7b97\u5b50\u7684\u8fd0\u7b97\u6cd5\u5219\u3002 \u8ba9\u6211\u4eec\u4ee5\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002\u770b\u770b\u5728\u67092\u4e2a\u8bbe\u5907\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u77e9\u9635\u4e58\u6cd5\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u8981\u5982\u4f55\u7ec4\u5408\u624d\u5408\u6cd5\uff0c\u5982\u4f55\u7ec4\u5408\u4e0d\u5408\u6cd5\u3002 \u5047\u8bbe\u5168\u5c40\u89c6\u89d2\u4e0b\u8981\uff0c\u4e00\u4e2a\u5f62\u72b6\u4e3a \\((m, k)\\) \u7684\u77e9\u9635 \\(A\\) \u4e0e\u5f62\u72b6\u4e3a \\((k, n)\\) \u7684\u77e9\u9635 \\(B\\) \u76f8\u4e58\u5f97\u5230 \\(Y\\) \uff0c \\(Y\\) \u7684\u5f62\u72b6\u5fc5\u7136\u4e3a \\((m, n)\\) \u3002 \u4f9d\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u89c4\u5f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u77e9\u9635 \\(A\\) \u6309\u7b2c0\u7ef4\u8fdb\u884c\u5207\u5206\uff0c\u5207\u5206\u4e3a\u5f62\u72b6\u5206\u522b\u4e3a \\((m_0, k)\\) \u3001 \\((m_1, k)\\) \u7684\u4e24\u4e2a\u77e9\u9635\uff1a \\(A_0\\) \u548c \\(A_1\\) \uff0c\u7136\u540e\u57282\u4e2a\u8bbe\u5907\u4e0a\u5206\u522b\u8ba1\u7b97\uff1a \u8bbe\u5907\u4e00\uff1a \\[ \\begin{matrix} A_0 \\times B = Y_0 \\\\ (m_0, k) (k, n) (m_0, n) \\end{matrix} \\] \u8bbe\u5907\u4e8c\uff1a \\[ \\begin{matrix} A_1 \\times B = Y_1 \\\\ (m_1, k) (k, n) (m_1, n) \\end{matrix} \\] \u6211\u4eec\u5bb9\u6613\u5f97\u5230\u7269\u7406\u8bbe\u5907\u4e0a\u7684 \\(A_0\\) \u3001 \\(A_1\\) \u4e0e\u5168\u5c40\u89c6\u89d2 \\(A\\) \u7684\u5173\u7cfb\uff0c\u4ee5\u53ca \\(Y_0\\) \u3001 \\(Y_1\\) \u4e0e\u5168\u5c40\u89c6\u89d2\u6570\u636e \\(Y\\) \u7684\u5173\u7cfb\uff1a \\[ \\begin{matrix} A &= concat&(A_0 ,& A_1) \\\\ (m,k) & & (m_0, k) & (m_1, k) \\end{matrix} \\] \\[ \\begin{matrix} Y &= concat&(Y_0 ,& Y_1) \\\\ (m,n) & & (m_0, n) & (m_1, n) \\end{matrix} \\] \u6ce8\u610f\uff1a\u4ee5\u4e0a\u7684 concat \u8868\u793a\u62fc\u63a5\u64cd\u4f5c\u3002 \u53ef\u89c1\uff0c\u6309\u7167\u4ee5\u4e0a\u7684\u65b9\u5f0f\uff0c\u5c06\u5168\u5c40\u89c6\u89d2\u7684\u6570\u636e\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u662f\u80fd\u591f\u5b8c\u6210\u8fd0\u7b97\uff0c\u5e76\u4e14\u6700\u7ec8\u5f97\u5230\u5168\u5c40\u89c6\u89d2\u4e0a\u7684\u6b63\u786e\u7ed3\u679c\u7684\u3002\u4ee5\u4e0a\u8f83\u957f\u7684\u7bc7\u5e45\uff0c\u82e5 \u4f7f\u7528 SBP \u6765\u63cf\u8ff0\uff0c\u4f1a\u53d8\u5f97\u5f02\u5e38\u7b80\u5355 \uff1a \\(A\\) \u4e3a split(0) \uff0c \\(B\\) \u4e3a broadcast \uff0c\u8fd0\u7b97\u7ed3\u679c \\(Y\\) \u4e3a split(0) \u3002 \u53ef\u89c1\uff0c\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\u800c\u8a00\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u7684 SBP\uff0c\u6309\u4ee5\u4e0a\u65b9\u5f0f\u7ec4\u5408\uff0c\u662f\u5408\u6cd5\u7684\u3002\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\u800c\u8a00\uff0c \u5408\u6cd5\u7684 SBP \u7ec4\u5408\u4e0d\u6b62\u4e00\u79cd \uff0c\u6bd4\u5982\u8fd8\u53ef\u4ee5\u662f\uff1a \\(A\\) \u4e3a broadcast \uff0c \\(B\\) \u4e3a split(1) \uff0c\u8fd0\u7b97\u7ed3\u679c \\(Y\\) \u4e3a split(1) \u3002 \u6216\u8005\uff1a \\(A\\) \u4e3a split(1) \uff0c \\(B\\) \u4e3a split(0) \uff0c\u8fd0\u7b97\u7ed3\u679c \\(Y\\) \u4e3a partial sum \u3002 \u867d\u7136\u5c55\u793a\u4e86\u591a\u4e2a\u5408\u6cd5\u7684 SBP \u7ec4\u5408\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u4efb\u610f\u7684 SBP \u7ec4\u5408\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u6bd4\u5982\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\uff0c\u5982\u679c \\(A\\) \u3001 \\(B\\) \u5747\u4e3a split(0) \uff0c\u90a3\u4e48\uff1a \\[ \\begin{matrix} A &= concat&(A_0 ,& A_1) \\\\ (m,k) & & (m_0, k) & (m_1, k) \\end{matrix} \\] \\[ \\begin{matrix} B &= concat&(B_0 ,& B_1) \\\\ (k,n) & & (k_0, n) & (k_1, n) \\end{matrix} \\] \u90a3\u4e48\u5728\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u56e0\u4e3a \\(A_0\\) \u4e0e \\(B_0\\) \u7684\u5f62\u72b6\uff0c\u5e76\u4e0d\u6ee1\u8db3\u77e9\u9635\u4e58\u6cd5\u7684\u8981\u6c42\uff0c\u4e5f\u5c31\u65e0\u6cd5\u5728\u7269\u7406\u8bbe\u5907\u4e0a\u5b8c\u6210\u77e9\u9635\u4e58\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u8bf4\uff0c \\(A\\) \u4e3a split(0) \uff0c \\(B\\) \u4e3a split(0) \u7684 SBP \u7ec4\u5408\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u6211\u4eec\u5c06\u4e0a\u6587\u51fa\u73b0\u7684\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u7b97\u5b50\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u7684\u4e00\u4e2a \u7279\u5b9a\u7684\u3001\u5408\u6cd5\u7684 SBP \u7ec4\u5408 \uff0c\u79f0\u4e3a\u8fd9\u4e2a\u7b97\u5b50\u7684\u4e00\u4e2a SBP Signature \u3002 SBP Signature \u81ea\u52a8\u63a8\u5bfc \u00b6 \u6709\u4e86 SBP Signature \u7684\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u63d0\u51fa\u51e0\u4e2a\u95ee\u9898\uff1a \u7528\u6237\u662f\u5426\u8981\u77e5\u9053\u7b97\u5b50\u7684\u6240\u6709 SBP Signature\uff0c\u624d\u80fd\u7528 OneFlow \u505a\u597d\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1f \u4f5c\u4e3a\u7b97\u6cd5\u5de5\u7a0b\u5e08\uff0c\u7528\u6237\u662f\u5426\u8981\u4e3a\u6bcf\u5c42\u7f51\u7edc\u90fd\u8bbe\u7f6e\u8f93\u5165\u7684 SBP\uff1f \u5bf9\u4e8e\u524d\u4e00\u4e2a\u95ee\u9898\uff0c\u7528\u6237\u5f53\u7136\u4e0d\u9700\u8981\u77e5\u6653\u7b97\u5b50\u6240\u6709\u7684 SBP Signature\u3002\u7f57\u5217\u67d0\u4e2a\u7b97\u5b50\u6240\u6709\u53ef\u80fd\u7684 SBP Signature \u7684\u5de5\u4f5c\uff0c\u662f \u7b97\u5b50\u4f5c\u8005 \u7684\u8d23\u4efb\u3002\u7b97\u5b50\u4f5c\u8005\u6839\u636e\u7b97\u5b50\u7684\u8fd0\u7b97\u6cd5\u5219\uff0c\u5728\u5f00\u53d1\u7b97\u5b50\u65f6\uff0c\u5c31\u5df2\u7ecf\u7f57\u5217\u5e76\u9884\u8bbe\u597d\u8be5\u7b97\u5b50\u6240\u6709\u53ef\u80fd\u7684 SBP Signature\u3002 \u8fd9\u987a\u4fbf\u5c31\u89e3\u7b54\u4e86\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a\u56e0\u4e3a\u6709\u9884\u8bbe\u597d\u7684 SBP Signature\uff0c\u6240\u4ee5\uff0c\u67d0\u4e00\u5c42\u7b97\u5b50\u53ea\u8981\u6709\u8f93\u5165\u7684 SBP\uff0cOneFlow \u5c31\u53ef\u4ee5\u6839\u636e SBP Signature \u63a8\u5bfc\u51fa\u8be5\u5c42\u7b97\u5b50\u8f93\u51fa\u7684 SBP\u3002\u800c\u4e0a\u6e38\u7b97\u5b50\u7684\u8f93\u51fa\uff0c\u53c8\u662f\u4e0b\u6e38\u7b97\u5b50\u7684\u8f93\u5165\uff0c\u8fd9\u6837\uff0c\u5c31\u786e\u5b9a\u4e86\u4e0b\u6e38\u7b97\u5b50\u8f93\u5165\u7684 SBP\uff0c\u7136\u540e\u53c8\u53ef\u4ee5\u6839\u636e SBP Signature \u786e\u5b9a\u66f4\u4e0b\u6e38\u8f93\u51fa\u7684 SBP\u2026\u2026 \u8fd9\u6837\u4e0d\u65ad\u63a8\u5bfc\u3001\u4f20\u64ad\u3002\u56e0\u6b64\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u662f\u4e0d\u9700\u8981\u4e3a\u6bcf\u5c42\u7f51\u7edc\u90fd\u8bbe\u7f6e\u8f93\u5165\u7684 SBP\u3002\u800c\u53ea\u6709\u6700\u521d\u8f93\u5165\u5c42\uff0c\u6216\u8005\u9700\u8981\u5f3a\u5236\u6307\u5b9a\u67d0\u5c42\u7684 SBP \u65f6\uff0c\u624d\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u3002 \u7528\u6237\u8fd8\u53ef\u80fd\u4f1a\u6709\u65b0\u7684\u95ee\u9898\uff1a \u4e00\u4e2a\u7b97\u5b50\u7684\u5408\u6cd5 SBP Signature \u5e38\u5e38\u6709\u591a\u4e2a\uff0cOneFlow \u8fd0\u884c\u65f6\u5230\u5e95\u4f1a\u9009\u62e9\u54ea\u4e00\u4e2a\u5462\uff0c\u5b83\u662f\u4f9d\u636e\u4ec0\u4e48\u505a\u51fa\u9009\u62e9\u7684\uff1f \u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u9700\u8981\u4e86\u89e3 OneFlow \u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc \u673a\u5236\u3002\u6240\u8c13\u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc\uff0c\u6307\u7684\u662f\uff1a\u5728\u7ed9\u5b9a\u6240\u6709\u7b97\u5b50\u7684\u6240\u6709\u5408\u6cd5\u7684 SBP Signature \u7684\u524d\u63d0\u4e0b\uff0cOneFlow \u6709\u4e00\u5957\u7b97\u6cd5\uff0c\u4f1a\u57fa\u4e8e\u4f20\u8f93\u4ee3\u4ef7\u4e3a\u6bcf\u79cd\u5408\u6cd5\u7684 SBP Signature \u8fdb\u884c\u6253\u5206\uff0c\u5e76\u9009\u62e9\u4f20\u8f93\u4ee3\u4ef7\u6700\u5c0f\u7684\u90a3\u4e2a SBP Signature\u3002\u8fd9\u6837\u4f7f\u5f97\u7cfb\u7edf\u7684\u541e\u5410\u6548\u7387\u6700\u9ad8\u3002 Boxing \u673a\u5236 \u00b6 \u4e25\u683c\u5730\u8bf4\uff0cOneFlow \u7684 Boxing \u673a\u5236\u5bf9\u4e8e\u7528\u6237\u5176\u5b9e\u662f\u900f\u660e\u7684\uff0c\u7528\u6237\u4f7f\u7528 OneFlow \u505a\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0c\u4e0d\u7528\u77e5\u6653\u5b83\u4e5f\u611f\u77e5\u4e0d\u5230\u5b83\u3002 \u4f46\u662f\uff0c\u9274\u4e8e\u67d0\u4e9b\u6df1\u5165\u601d\u8003\u7684\u7528\u6237\uff0c\u53ef\u80fd\u4e86\u89e3 SBP Signature \u81ea\u52a8\u63a8\u5bfc\u540e\uff0c\u4f1a\u81ea\u7136\u63d0\u51fa\u4ee5\u4e0b\u95ee\u9898\uff1a \u5982\u679c OneFlow \u81ea\u52a8\u9009\u62e9\u7684 SBP Signature\uff0c\u4e0a\u4e00\u5c42\u7b97\u5b50\u7684\u8f93\u51fa\u4e0e\u4e0b\u4e00\u5c42\u7b97\u5b50\u7684\u8f93\u5165\u7684 SBP \u5c5e\u6027\u4e0d\u5339\u914d\u65f6\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f \u4e3e\u4e2a\u5177\u4f53\u4f8b\u5b50\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c\u4e0a\u4e00\u5c42\u7b97\u5b50 matmul \u7684\u8f93\u51fa SBP \u672c\u6765\u662f split(0) \uff0c\u4f46\u662f\u4e0b\u4e00\u5c42\u7b97\u5b50 matmul \u7684\u8f93\u5165\uff0c\u88ab\u8f6c\u6210\u4e86 broadcast \u3002\u6b64\u65f6\uff0c\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\u4e0e\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\uff0c\u5b83\u4eec\u7684 SBP \u5176\u5b9e\u5c31\u4e0d\u4e00\u81f4\u4e86\u3002 import oneflow as flow P0 = flow . placement ( \"cuda\" , ranks = [ 0 , 1 ]) P1 = flow . placement ( \"cuda\" , ranks = [ 2 , 3 ]) a0_sbp = flow . sbp . split ( 0 ) b0_sbp = flow . sbp . broadcast y0_sbp = flow . sbp . broadcast b1_sbp = flow . sbp . split ( 1 ) A0 = flow . randn ( 4 , 5 , placement = P0 , sbp = a0_sbp ) B0 = flow . randn ( 5 , 8 , placement = P0 , sbp = b0_sbp ) Y0 = flow . matmul ( A0 , B0 ) Y0 . to_global ( placement = P1 , sbp = y0_sbp ) B1 = flow . randn ( 8 , 6 , placement = P1 , sbp = b1_sbp ) Y2 = flow . matmul ( Y0 , B1 ) \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cOneFlow \u5176\u5b9e\u4f1a\u68c0\u6d4b\u5230\u8fd9\u79cd\u4e0d\u4e00\u81f4\uff0c\u5e76\u4e14\u5728\u4e0a\u6e38\u7684\u8f93\u51fa\u548c\u4e0b\u6e38\u7684\u8f93\u5165\u95f4\u63d2\u5165\u4e00\u4e2a\u7b97\u5b50\uff0c\u505a\u76f8\u5173\u7684\u8f6c\u6362\u5de5\u4f5c\u3002\u8fd9\u7c7b\u81ea\u52a8\u52a0\u5165\u505a\u8f6c\u6362\u7684\u7b97\u5b50\uff0c\u5c31\u79f0\u4e3a Boxing \u7b97\u5b50 \u3002 \u4ee5\u4e0a\u4ee3\u7801\u7684\u903b\u8f91\u56fe\u548c\u7269\u7406\u6267\u884c\u56fe\u7684\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a \u603b\u7ed3 \u00b6 placement \u4e0e SBP \u3001 SBP Signature \u662f OneFlow \u5206\u5e03\u5f0f\u5168\u5c40\u89c6\u89d2\u7684\u91cd\u8981\u4fdd\u8bc1\uff0cOneFlow \u7684\u5168\u5c40\u89c6\u89d2\u4f7f\u5f97 OneFlow \u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e0e\u5355\u673a\u5355\u5361\u4e00\u6837\u7b80\u5355\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u53ea\u9700\u8981\u5728\u8d77\u59cb\u7f51\u7edc\u5c42\u8bbe\u7f6e SBP \uff0c\u7531\u6b64\u53ef\u4ee5\u7701\u7565\u4f20\u7edf\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u624b\u5199\u901a\u4fe1\u64cd\u4f5c\u7684\u9ebb\u70e6\u3002\u66f4\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u9664\u4e86\u672c\u6587\u4ecb\u7ecd\u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc\u673a\u5236\u5916\uff0cOneFlow \u56e2\u961f\u6b63\u5728\u7814\u53d1\u4e00\u79cd\u5bfb\u6c42\u5168\u5c40\u6700\u4f18\u89e3\u7684\u81ea\u52a8\u5e76\u884c\u65b9\u6cd5\uff0c\u6b63\u5728\u5185\u6d4b\uff0c\u7b49\u5b83\u4e0a\u7ebf\u540e\uff0c\u7528\u6237\u53ef\u4ee5\u4e0d\u505a\u4efb\u4f55 SBP \u914d\u7f6e\u5c31\u5f97\u5230\u5f88\u597d\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u6548\u679c\uff0c\u656c\u8bf7\u671f\u5f85\u3002 \u5728\u4e0b\u4e00\u7bc7 Global Tensor \u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5168\u5c40\u89c6\u89d2\u7684\u7f16\u7a0b\u4f8b\u5b50\u3002","title":"\u96c6\u7fa4\u7684\u5168\u5c40\u89c6\u89d2"},{"location":"parallelism/02_sbp.html#_1","text":"OneFlow \u63d0\u51fa\u4e86 \u5168\u5c40\u89c6\u89d2\uff08Global View\uff09 \u7684\u6982\u5ff5\uff0c\u7528\u4e8e\u7b80\u5316\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u7b80\u5355\u800c\u8a00\uff0c\u5728 OneFlow \u7684\u5168\u5c40\u89c6\u89d2\u4e0b\uff0c\u96c6\u7fa4\u88ab\u62bd\u8c61\u4e3a\u4e00\u53f0\u201c\u8d85\u7ea7\u8ba1\u7b97\u8bbe\u5907\u201d\u3002 \u7528\u6237\u4e0d\u7528\u5173\u5fc3\u96c6\u7fa4\u4e2d\u8ba1\u7b97\u3001\u901a\u4fe1\u7684\u7ec6\u8282\uff0c\u53ea\u9700\u5173\u5fc3\u903b\u8f91\u4e0a\u7684\u6570\u636e\u4e0e\u8ba1\u7b97\uff0c\u4f9d\u7136\u50cf\u5355\u673a\u5355\u5361\u90a3\u6837\u601d\u8003\u3001\u7f16\u7a0b\uff0c\u5c31\u80fd\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 OneFlow \u7684\u5168\u5c40\u89c6\u89d2\uff0c\u4f9d\u8d56\u51e0\u4e2a\u91cd\u8981\u6982\u5ff5\uff1aPlacement\u3001SBP \u4e0e SBP Signature\u3002","title":"\u96c6\u7fa4\u7684\u5168\u5c40\u89c6\u89d2"},{"location":"parallelism/02_sbp.html#placement","text":"OneFlow \u5168\u5c40\u89c6\u89d2\u4e0b\u7684 Tensor \u6709 placement \u5c5e\u6027\uff0c\u901a\u8fc7 placement \u5c5e\u6027\u53ef\u4ee5\u6307\u5b9a\u8be5 Tensor \u5b58\u653e\u5728\u54ea\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\u3002 OneFlow \u4f1a\u81ea\u52a8\u4e3a\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u8bbe\u5907\u7f16\u53f7\u3002\u6bd4\u5982\uff0c\u5982\u679c\u96c6\u7fa4\u4e2d\u6709 4 \u53f0\u4e3b\u673a\uff0c\u6bcf\u53f0\u4e3b\u673a\u4e0a\u6709 8 \u5f20\u663e\u5361\uff0c\u4e00\u5171 32 \u5f20\u663e\u5361\uff0c\u90a3\u4e48 OneFlow \u4f1a\u5c06\u8fd9 32 \u5f20\u663e\u5361\u81ea\u52a8\u7f16\u53f7\u4e3a 0~31\u3002 \u5982\u679c\u60f3\u5c06 Tensor \u653e\u7f6e\u5728\u7b2c 0 \u53f0\u673a\u5668\u7684\u524d 4 \u5f20\u663e\u5361\u4e0a\uff0c\u53ea\u9700\u8981\u914d\u7f6e\uff1a placement(\"cuda\", [0, 1, 2, 3] \u3002 \u5982\u679c\u60f3\u5c06 Tensor \u653e\u7f6e\u5728\u7b2c 0 \u53f0\u673a\u5668\u7684\u540e 4 \u5f20\u663e\u5361\u4e0a\uff0c\u53ea\u9700\u8981\u914d\u7f6e\uff1a placement(\"cuda\", [4, 5, 6, 7]) \u3002 placement \u4f7f\u5f97 OneFlow \u5f88\u5bb9\u6613\u652f\u6301\u6d41\u6c34\u5e76\u884c\uff0c\u6211\u4eec\u5c06\u5728\u672c\u4e13\u9898\u7684\u5176\u5b83\u6587\u7ae0\u4e2d\u770b\u5230\u4e0e placement \u6709\u5173\u7684\u5b9e\u9645\u4f8b\u5b50\u3002","title":"Placement"},{"location":"parallelism/02_sbp.html#sbp","text":"SBP \u662f OneFlow \u53d1\u660e\u7684\u6982\u5ff5\uff0c\u63cf\u8ff0\u4e86\u201c\u8d85\u7ea7\u8ba1\u7b97\u8bbe\u5907\u201d\u5168\u5c40\u89c6\u89d2\u4e0b\u7684\u6570\u636e\u4e0e\u96c6\u7fa4\u4e2d\u771f\u5b9e\u7684\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5b83\u7531 split , broadcast , partial \u7684\u9996\u5b57\u6bcd\u7ec4\u5408\u800c\u6210\u3002 \u8be6\u7ec6\u800c\u8a00\uff1a split \u8868\u793a\u7269\u7406\u8bbe\u5907\u4e0a\u7684 Tensor\uff0c\u662f\u5c06\u5168\u5c40\u89c6\u89d2\u7684 Tensor \u5207\u5206\u5f97\u5230\u7684\u3002\u5207\u5206\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u5207\u5206\u7684\u7ef4\u5ea6\u3002\u7269\u7406\u8bbe\u5907\u4e0a\u7684 Tensor \uff0c\u7ecf\u8fc7\u62fc\u63a5\uff0c\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u5168\u5c40\u89c6\u89d2\u7684 Tensor \u3002 broadcast \u8868\u793a\u5168\u5c40\u89c6\u89d2\u4e0b\u7684 Tensor\uff0c\u4f1a\u590d\u5236\u5e76\u5e7f\u64ad\u5230\u6240\u6709\u7684\u7269\u7406\u8bbe\u5907\u4e0a\u3002 partial \u8868\u793a\u5168\u5c40\u89c6\u89d2\u4e0b\u7684 Tensor \u4e0e\u7269\u7406\u8bbe\u5907\u4e0a\u7684 Tensor \u7684 \u5f62\u72b6\u76f8\u540c \uff0c\u4f46\u662f\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u503c\uff0c\u53ea\u662f\u5168\u5c40\u89c6\u89d2\u4e0b Tensor \u7684 \u4e00\u90e8\u5206 \u3002\u4ee5 partial sum \u4e3a\u4f8b\uff0c\u5982\u679c\u6211\u4eec\u5c06\u96c6\u7fa4\u4e2d\u6240\u6709\u8bbe\u5907\u7684\u5f20\u91cf\u6309\u4f4d\u7f6e\u76f8\u52a0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u5168\u5c40\u89c6\u89d2\u7684 Tensor\u3002\u9664\u4e86 sum \u5916\uff0c min \u3001 max \u7b49\u64cd\u4f5c\u4e5f\u9002\u7528\u4e8e partial \u3002 \u4e0b\u56fe\u4e2d\u5206\u522b\u5c55\u793a\u4e86 SBP \u7684\u60c5\u51b5\uff0c\u5206\u522b\u662f split(0) \u3001 split(1) \u3001 broadcast \u548c partial sum \u3002 \u5728\u521b\u5efa Global Tensor \u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a Tensor \u7684 SBP\uff0c\u5b9e\u9645\u7684\u4ee3\u7801\u4f8b\u5b50\u5c06\u5728\u4e0b\u4e00\u7bc7\u6587\u7ae0 Global Tensor \u4e2d\u770b\u5230\u3002","title":"SBP"},{"location":"parallelism/02_sbp.html#sbp-signature","text":"SBP \u63cf\u8ff0\u4e86\u5168\u5c40\u89c6\u89d2\u4e0b\u7684\u6570\u636e\u4e0e\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5f53\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0cOneFlow \u6839\u636e\u6570\u636e\u7684 SBP \u5c5e\u6027\uff0c\u5c06\u6570\u636e\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\uff0c\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5b64\u7acb\u7684 Tensor\uff0c\u6211\u4eec\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\u5b83\u7684 SBP \u5c5e\u6027\u3002 \u4f46\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u7684\u7b97\u5b50\uff0c\u6211\u4eec\u5374\u4e0d\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\u5b83\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u5c5e\u6027\u3002\u8fd9\u662f\u56e0\u4e3a\u968f\u610f\u8bbe\u7f6e\u4e00\u4e2a\u7b97\u5b50\u8f93\u5165\u8f93\u51fa\u7684 SBP \u5c5e\u6027\uff0c\u53ef\u80fd\u4e0d\u7b26\u5408\u5168\u5c40\u89c6\u89d2\u4e0b\u7b97\u5b50\u7684\u8fd0\u7b97\u6cd5\u5219\u3002 \u8ba9\u6211\u4eec\u4ee5\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002\u770b\u770b\u5728\u67092\u4e2a\u8bbe\u5907\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u77e9\u9635\u4e58\u6cd5\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u8981\u5982\u4f55\u7ec4\u5408\u624d\u5408\u6cd5\uff0c\u5982\u4f55\u7ec4\u5408\u4e0d\u5408\u6cd5\u3002 \u5047\u8bbe\u5168\u5c40\u89c6\u89d2\u4e0b\u8981\uff0c\u4e00\u4e2a\u5f62\u72b6\u4e3a \\((m, k)\\) \u7684\u77e9\u9635 \\(A\\) \u4e0e\u5f62\u72b6\u4e3a \\((k, n)\\) \u7684\u77e9\u9635 \\(B\\) \u76f8\u4e58\u5f97\u5230 \\(Y\\) \uff0c \\(Y\\) \u7684\u5f62\u72b6\u5fc5\u7136\u4e3a \\((m, n)\\) \u3002 \u4f9d\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u89c4\u5f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u77e9\u9635 \\(A\\) \u6309\u7b2c0\u7ef4\u8fdb\u884c\u5207\u5206\uff0c\u5207\u5206\u4e3a\u5f62\u72b6\u5206\u522b\u4e3a \\((m_0, k)\\) \u3001 \\((m_1, k)\\) \u7684\u4e24\u4e2a\u77e9\u9635\uff1a \\(A_0\\) \u548c \\(A_1\\) \uff0c\u7136\u540e\u57282\u4e2a\u8bbe\u5907\u4e0a\u5206\u522b\u8ba1\u7b97\uff1a \u8bbe\u5907\u4e00\uff1a \\[ \\begin{matrix} A_0 \\times B = Y_0 \\\\ (m_0, k) (k, n) (m_0, n) \\end{matrix} \\] \u8bbe\u5907\u4e8c\uff1a \\[ \\begin{matrix} A_1 \\times B = Y_1 \\\\ (m_1, k) (k, n) (m_1, n) \\end{matrix} \\] \u6211\u4eec\u5bb9\u6613\u5f97\u5230\u7269\u7406\u8bbe\u5907\u4e0a\u7684 \\(A_0\\) \u3001 \\(A_1\\) \u4e0e\u5168\u5c40\u89c6\u89d2 \\(A\\) \u7684\u5173\u7cfb\uff0c\u4ee5\u53ca \\(Y_0\\) \u3001 \\(Y_1\\) \u4e0e\u5168\u5c40\u89c6\u89d2\u6570\u636e \\(Y\\) \u7684\u5173\u7cfb\uff1a \\[ \\begin{matrix} A &= concat&(A_0 ,& A_1) \\\\ (m,k) & & (m_0, k) & (m_1, k) \\end{matrix} \\] \\[ \\begin{matrix} Y &= concat&(Y_0 ,& Y_1) \\\\ (m,n) & & (m_0, n) & (m_1, n) \\end{matrix} \\] \u6ce8\u610f\uff1a\u4ee5\u4e0a\u7684 concat \u8868\u793a\u62fc\u63a5\u64cd\u4f5c\u3002 \u53ef\u89c1\uff0c\u6309\u7167\u4ee5\u4e0a\u7684\u65b9\u5f0f\uff0c\u5c06\u5168\u5c40\u89c6\u89d2\u7684\u6570\u636e\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u662f\u80fd\u591f\u5b8c\u6210\u8fd0\u7b97\uff0c\u5e76\u4e14\u6700\u7ec8\u5f97\u5230\u5168\u5c40\u89c6\u89d2\u4e0a\u7684\u6b63\u786e\u7ed3\u679c\u7684\u3002\u4ee5\u4e0a\u8f83\u957f\u7684\u7bc7\u5e45\uff0c\u82e5 \u4f7f\u7528 SBP \u6765\u63cf\u8ff0\uff0c\u4f1a\u53d8\u5f97\u5f02\u5e38\u7b80\u5355 \uff1a \\(A\\) \u4e3a split(0) \uff0c \\(B\\) \u4e3a broadcast \uff0c\u8fd0\u7b97\u7ed3\u679c \\(Y\\) \u4e3a split(0) \u3002 \u53ef\u89c1\uff0c\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\u800c\u8a00\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u7684 SBP\uff0c\u6309\u4ee5\u4e0a\u65b9\u5f0f\u7ec4\u5408\uff0c\u662f\u5408\u6cd5\u7684\u3002\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\u800c\u8a00\uff0c \u5408\u6cd5\u7684 SBP \u7ec4\u5408\u4e0d\u6b62\u4e00\u79cd \uff0c\u6bd4\u5982\u8fd8\u53ef\u4ee5\u662f\uff1a \\(A\\) \u4e3a broadcast \uff0c \\(B\\) \u4e3a split(1) \uff0c\u8fd0\u7b97\u7ed3\u679c \\(Y\\) \u4e3a split(1) \u3002 \u6216\u8005\uff1a \\(A\\) \u4e3a split(1) \uff0c \\(B\\) \u4e3a split(0) \uff0c\u8fd0\u7b97\u7ed3\u679c \\(Y\\) \u4e3a partial sum \u3002 \u867d\u7136\u5c55\u793a\u4e86\u591a\u4e2a\u5408\u6cd5\u7684 SBP \u7ec4\u5408\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u4efb\u610f\u7684 SBP \u7ec4\u5408\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u6bd4\u5982\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\uff0c\u5982\u679c \\(A\\) \u3001 \\(B\\) \u5747\u4e3a split(0) \uff0c\u90a3\u4e48\uff1a \\[ \\begin{matrix} A &= concat&(A_0 ,& A_1) \\\\ (m,k) & & (m_0, k) & (m_1, k) \\end{matrix} \\] \\[ \\begin{matrix} B &= concat&(B_0 ,& B_1) \\\\ (k,n) & & (k_0, n) & (k_1, n) \\end{matrix} \\] \u90a3\u4e48\u5728\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u56e0\u4e3a \\(A_0\\) \u4e0e \\(B_0\\) \u7684\u5f62\u72b6\uff0c\u5e76\u4e0d\u6ee1\u8db3\u77e9\u9635\u4e58\u6cd5\u7684\u8981\u6c42\uff0c\u4e5f\u5c31\u65e0\u6cd5\u5728\u7269\u7406\u8bbe\u5907\u4e0a\u5b8c\u6210\u77e9\u9635\u4e58\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u8bf4\uff0c \\(A\\) \u4e3a split(0) \uff0c \\(B\\) \u4e3a split(0) \u7684 SBP \u7ec4\u5408\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u6211\u4eec\u5c06\u4e0a\u6587\u51fa\u73b0\u7684\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u7b97\u5b50\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u7684\u4e00\u4e2a \u7279\u5b9a\u7684\u3001\u5408\u6cd5\u7684 SBP \u7ec4\u5408 \uff0c\u79f0\u4e3a\u8fd9\u4e2a\u7b97\u5b50\u7684\u4e00\u4e2a SBP Signature \u3002","title":"SBP Signature"},{"location":"parallelism/02_sbp.html#sbp-signature_1","text":"\u6709\u4e86 SBP Signature \u7684\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u63d0\u51fa\u51e0\u4e2a\u95ee\u9898\uff1a \u7528\u6237\u662f\u5426\u8981\u77e5\u9053\u7b97\u5b50\u7684\u6240\u6709 SBP Signature\uff0c\u624d\u80fd\u7528 OneFlow \u505a\u597d\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1f \u4f5c\u4e3a\u7b97\u6cd5\u5de5\u7a0b\u5e08\uff0c\u7528\u6237\u662f\u5426\u8981\u4e3a\u6bcf\u5c42\u7f51\u7edc\u90fd\u8bbe\u7f6e\u8f93\u5165\u7684 SBP\uff1f \u5bf9\u4e8e\u524d\u4e00\u4e2a\u95ee\u9898\uff0c\u7528\u6237\u5f53\u7136\u4e0d\u9700\u8981\u77e5\u6653\u7b97\u5b50\u6240\u6709\u7684 SBP Signature\u3002\u7f57\u5217\u67d0\u4e2a\u7b97\u5b50\u6240\u6709\u53ef\u80fd\u7684 SBP Signature \u7684\u5de5\u4f5c\uff0c\u662f \u7b97\u5b50\u4f5c\u8005 \u7684\u8d23\u4efb\u3002\u7b97\u5b50\u4f5c\u8005\u6839\u636e\u7b97\u5b50\u7684\u8fd0\u7b97\u6cd5\u5219\uff0c\u5728\u5f00\u53d1\u7b97\u5b50\u65f6\uff0c\u5c31\u5df2\u7ecf\u7f57\u5217\u5e76\u9884\u8bbe\u597d\u8be5\u7b97\u5b50\u6240\u6709\u53ef\u80fd\u7684 SBP Signature\u3002 \u8fd9\u987a\u4fbf\u5c31\u89e3\u7b54\u4e86\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a\u56e0\u4e3a\u6709\u9884\u8bbe\u597d\u7684 SBP Signature\uff0c\u6240\u4ee5\uff0c\u67d0\u4e00\u5c42\u7b97\u5b50\u53ea\u8981\u6709\u8f93\u5165\u7684 SBP\uff0cOneFlow \u5c31\u53ef\u4ee5\u6839\u636e SBP Signature \u63a8\u5bfc\u51fa\u8be5\u5c42\u7b97\u5b50\u8f93\u51fa\u7684 SBP\u3002\u800c\u4e0a\u6e38\u7b97\u5b50\u7684\u8f93\u51fa\uff0c\u53c8\u662f\u4e0b\u6e38\u7b97\u5b50\u7684\u8f93\u5165\uff0c\u8fd9\u6837\uff0c\u5c31\u786e\u5b9a\u4e86\u4e0b\u6e38\u7b97\u5b50\u8f93\u5165\u7684 SBP\uff0c\u7136\u540e\u53c8\u53ef\u4ee5\u6839\u636e SBP Signature \u786e\u5b9a\u66f4\u4e0b\u6e38\u8f93\u51fa\u7684 SBP\u2026\u2026 \u8fd9\u6837\u4e0d\u65ad\u63a8\u5bfc\u3001\u4f20\u64ad\u3002\u56e0\u6b64\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u662f\u4e0d\u9700\u8981\u4e3a\u6bcf\u5c42\u7f51\u7edc\u90fd\u8bbe\u7f6e\u8f93\u5165\u7684 SBP\u3002\u800c\u53ea\u6709\u6700\u521d\u8f93\u5165\u5c42\uff0c\u6216\u8005\u9700\u8981\u5f3a\u5236\u6307\u5b9a\u67d0\u5c42\u7684 SBP \u65f6\uff0c\u624d\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u3002 \u7528\u6237\u8fd8\u53ef\u80fd\u4f1a\u6709\u65b0\u7684\u95ee\u9898\uff1a \u4e00\u4e2a\u7b97\u5b50\u7684\u5408\u6cd5 SBP Signature \u5e38\u5e38\u6709\u591a\u4e2a\uff0cOneFlow \u8fd0\u884c\u65f6\u5230\u5e95\u4f1a\u9009\u62e9\u54ea\u4e00\u4e2a\u5462\uff0c\u5b83\u662f\u4f9d\u636e\u4ec0\u4e48\u505a\u51fa\u9009\u62e9\u7684\uff1f \u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u9700\u8981\u4e86\u89e3 OneFlow \u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc \u673a\u5236\u3002\u6240\u8c13\u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc\uff0c\u6307\u7684\u662f\uff1a\u5728\u7ed9\u5b9a\u6240\u6709\u7b97\u5b50\u7684\u6240\u6709\u5408\u6cd5\u7684 SBP Signature \u7684\u524d\u63d0\u4e0b\uff0cOneFlow \u6709\u4e00\u5957\u7b97\u6cd5\uff0c\u4f1a\u57fa\u4e8e\u4f20\u8f93\u4ee3\u4ef7\u4e3a\u6bcf\u79cd\u5408\u6cd5\u7684 SBP Signature \u8fdb\u884c\u6253\u5206\uff0c\u5e76\u9009\u62e9\u4f20\u8f93\u4ee3\u4ef7\u6700\u5c0f\u7684\u90a3\u4e2a SBP Signature\u3002\u8fd9\u6837\u4f7f\u5f97\u7cfb\u7edf\u7684\u541e\u5410\u6548\u7387\u6700\u9ad8\u3002","title":"SBP Signature \u81ea\u52a8\u63a8\u5bfc"},{"location":"parallelism/02_sbp.html#boxing","text":"\u4e25\u683c\u5730\u8bf4\uff0cOneFlow \u7684 Boxing \u673a\u5236\u5bf9\u4e8e\u7528\u6237\u5176\u5b9e\u662f\u900f\u660e\u7684\uff0c\u7528\u6237\u4f7f\u7528 OneFlow \u505a\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0c\u4e0d\u7528\u77e5\u6653\u5b83\u4e5f\u611f\u77e5\u4e0d\u5230\u5b83\u3002 \u4f46\u662f\uff0c\u9274\u4e8e\u67d0\u4e9b\u6df1\u5165\u601d\u8003\u7684\u7528\u6237\uff0c\u53ef\u80fd\u4e86\u89e3 SBP Signature \u81ea\u52a8\u63a8\u5bfc\u540e\uff0c\u4f1a\u81ea\u7136\u63d0\u51fa\u4ee5\u4e0b\u95ee\u9898\uff1a \u5982\u679c OneFlow \u81ea\u52a8\u9009\u62e9\u7684 SBP Signature\uff0c\u4e0a\u4e00\u5c42\u7b97\u5b50\u7684\u8f93\u51fa\u4e0e\u4e0b\u4e00\u5c42\u7b97\u5b50\u7684\u8f93\u5165\u7684 SBP \u5c5e\u6027\u4e0d\u5339\u914d\u65f6\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f \u4e3e\u4e2a\u5177\u4f53\u4f8b\u5b50\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c\u4e0a\u4e00\u5c42\u7b97\u5b50 matmul \u7684\u8f93\u51fa SBP \u672c\u6765\u662f split(0) \uff0c\u4f46\u662f\u4e0b\u4e00\u5c42\u7b97\u5b50 matmul \u7684\u8f93\u5165\uff0c\u88ab\u8f6c\u6210\u4e86 broadcast \u3002\u6b64\u65f6\uff0c\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\u4e0e\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\uff0c\u5b83\u4eec\u7684 SBP \u5176\u5b9e\u5c31\u4e0d\u4e00\u81f4\u4e86\u3002 import oneflow as flow P0 = flow . placement ( \"cuda\" , ranks = [ 0 , 1 ]) P1 = flow . placement ( \"cuda\" , ranks = [ 2 , 3 ]) a0_sbp = flow . sbp . split ( 0 ) b0_sbp = flow . sbp . broadcast y0_sbp = flow . sbp . broadcast b1_sbp = flow . sbp . split ( 1 ) A0 = flow . randn ( 4 , 5 , placement = P0 , sbp = a0_sbp ) B0 = flow . randn ( 5 , 8 , placement = P0 , sbp = b0_sbp ) Y0 = flow . matmul ( A0 , B0 ) Y0 . to_global ( placement = P1 , sbp = y0_sbp ) B1 = flow . randn ( 8 , 6 , placement = P1 , sbp = b1_sbp ) Y2 = flow . matmul ( Y0 , B1 ) \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cOneFlow \u5176\u5b9e\u4f1a\u68c0\u6d4b\u5230\u8fd9\u79cd\u4e0d\u4e00\u81f4\uff0c\u5e76\u4e14\u5728\u4e0a\u6e38\u7684\u8f93\u51fa\u548c\u4e0b\u6e38\u7684\u8f93\u5165\u95f4\u63d2\u5165\u4e00\u4e2a\u7b97\u5b50\uff0c\u505a\u76f8\u5173\u7684\u8f6c\u6362\u5de5\u4f5c\u3002\u8fd9\u7c7b\u81ea\u52a8\u52a0\u5165\u505a\u8f6c\u6362\u7684\u7b97\u5b50\uff0c\u5c31\u79f0\u4e3a Boxing \u7b97\u5b50 \u3002 \u4ee5\u4e0a\u4ee3\u7801\u7684\u903b\u8f91\u56fe\u548c\u7269\u7406\u6267\u884c\u56fe\u7684\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a","title":"Boxing \u673a\u5236"},{"location":"parallelism/02_sbp.html#_2","text":"placement \u4e0e SBP \u3001 SBP Signature \u662f OneFlow \u5206\u5e03\u5f0f\u5168\u5c40\u89c6\u89d2\u7684\u91cd\u8981\u4fdd\u8bc1\uff0cOneFlow \u7684\u5168\u5c40\u89c6\u89d2\u4f7f\u5f97 OneFlow \u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e0e\u5355\u673a\u5355\u5361\u4e00\u6837\u7b80\u5355\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u53ea\u9700\u8981\u5728\u8d77\u59cb\u7f51\u7edc\u5c42\u8bbe\u7f6e SBP \uff0c\u7531\u6b64\u53ef\u4ee5\u7701\u7565\u4f20\u7edf\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u624b\u5199\u901a\u4fe1\u64cd\u4f5c\u7684\u9ebb\u70e6\u3002\u66f4\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u9664\u4e86\u672c\u6587\u4ecb\u7ecd\u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc\u673a\u5236\u5916\uff0cOneFlow \u56e2\u961f\u6b63\u5728\u7814\u53d1\u4e00\u79cd\u5bfb\u6c42\u5168\u5c40\u6700\u4f18\u89e3\u7684\u81ea\u52a8\u5e76\u884c\u65b9\u6cd5\uff0c\u6b63\u5728\u5185\u6d4b\uff0c\u7b49\u5b83\u4e0a\u7ebf\u540e\uff0c\u7528\u6237\u53ef\u4ee5\u4e0d\u505a\u4efb\u4f55 SBP \u914d\u7f6e\u5c31\u5f97\u5230\u5f88\u597d\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u6548\u679c\uff0c\u656c\u8bf7\u671f\u5f85\u3002 \u5728\u4e0b\u4e00\u7bc7 Global Tensor \u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5168\u5c40\u89c6\u89d2\u7684\u7f16\u7a0b\u4f8b\u5b50\u3002","title":"\u603b\u7ed3"},{"location":"parallelism/03_consistent_tensor.html","text":"Global Tensor \u00b6 \u5168\u5c40\u89c6\u89d2\u4e0e\u7269\u7406\u89c6\u89d2\u7684\u6620\u5c04 \u00b6 \u521b\u5efa Global Tensor \u00b6 \u8981\u5728\u67092\u5f20 GPU \u663e\u5361\u7684\u4e3b\u673a\u4e0a\u4ea4\u4e92\u5f0f\u4f53\u9a8c global tensor\uff0c\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u5f0f\u57282\u4e2a\u63a7\u5236\u53f0\u5206\u522b\u542f\u52a8 python\u3002 Note \u5206\u522b \u70b9\u51fb \u4ee5\u4e0b Terminal 0 \u6216 Terminal 1 \u6807\u7b7e\uff0c\u67e5\u770b2\u4e2a\u63a7\u5236\u53f0\u7684\u547d\u4ee4/\u4ee3\u7801 Terminal 0 export MASTER_ADDR = 127 .0.0.1 MASTER_PORT = 17789 WORLD_SIZE = 2 RANK = 0 LOCAL_RANK = 0 python3 Terminal 1 export MASTER_ADDR = 127 .0.0.1 MASTER_PORT = 17789 WORLD_SIZE = 2 RANK = 1 LOCAL_RANK = 1 python3 \u4ee5\u4e0a\u7684\u73af\u5883\u53d8\u91cf\u7684\u8bbe\u7f6e\u662f\u505a\u5206\u5e03\u5f0f\u7684\u914d\u7f6e\uff0c\u8be6\u7ec6\u89e3\u91ca\u53ca\u501f\u52a9\u5de5\u5177\u542f\u52a8\u5206\u5e03\u5f0f\uff0c\u8bf7\u53c2\u8003\u6587\u672b\u7684 \u6269\u5c55\u9605\u8bfb \u76f4\u63a5\u521b\u5efa global tensor \u00b6 \u5728\u4e24\u4e2a\u63a7\u5236\u53f0\uff0c\u5206\u522b\u5bfc\u5165 oneflow \uff0c\u5e76\u521b\u5efa x \u3002 \u5176\u4e2d flow.placement(\"cuda\", [0,1]) \u6307\u5b9a\u4e86 global tensor \u5728\u96c6\u7fa4\u7684\u8303\u56f4\u3002 \"cuda\" \u8868\u793a\u5728 GPU \u8bbe\u5907\u4e0a\u3002 placement \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a list \uff0c\u96c6\u7fa4\u4e2d\u7684\u8bbe\u5907\u4f1a\u88ab\u81ea\u52a8\u7f16\u53f7\uff0c\u901a\u8fc7\u6570\u5b57\u6307\u5b9a\u4f7f\u7528\u54ea\u4e9b\u8bbe\u5907\u3002 [0,1] \u8868\u793a global tensor \u4f7f\u7528\u7b2c 0\u30011 \u5f20\u663e\u5361\u4e0a\u3002 Terminal 0 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x = flow . randn ( 4 , 5 , placement = placement , sbp = sbp ) x . shape Terminal 1 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x = flow . randn ( 4 , 5 , placement = placement , sbp = sbp ) x . shape \u8f93\u51fa\uff1a Terminal 0 oneflow.Size([4, 5]) Terminal 1 oneflow.Size([4, 5]) \u7531 global tensor \u5f97\u5230 local tensor \u00b6 \u901a\u8fc7 to_local \u65b9\u6cd5\u53ef\u4ee5\u67e5\u770b\u7269\u7406\u8bbe\u5907\u4e0a\u7684 local tensor\uff1a Terminal 0 x . to_local () tensor ([[ 2.9186e-01 , - 3.9442e-01 , 4.7072e-04 , - 3.2216e-01 , 1.7788e-01 ], [ - 4.5284e-01 , 1.2361e-01 , - 3.5962e-01 , 2.6651e-01 , 1.2951e+00 ]], device = 'cuda:0' , dtype = oneflow . float32 ) Terminal 1 x . to_local () tensor ([[ - 0.4363 , 0.9985 , - 2.5387 , 0.3003 , 0.3803 ], [ 0.0556 , - 0.8077 , 1.1191 , - 2.1278 , 0.1468 ]], device = 'cuda:1' , dtype = oneflow . float32 ) \u7531 local tensor \u8f6c\u6362\u5f97\u5230 global tensor \u00b6 \u53ef\u4ee5\u5148\u521b\u5efa local tensor\uff0c\u518d\u5229\u7528 Tensor.to_global \u65b9\u6cd5\uff0c\u5c06 local tensor \u8f6c\u4e3a global tensor\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u57282\u53f0\u8bbe\u5907\u4e0a\u5206\u522b\u521b\u5efa\u4e86 shape=(2,5) \u76842\u4e2a local tensor\u3002 \u6ce8\u610f\u7ecf\u8fc7 to_global \u65b9\u6cd5\u540e\uff0c\u5f97\u5230\u7684 global tensor \u7684 shape \u4e3a (4,5) \u3002 \u8fd9\u662f\u56e0\u4e3a\u9009\u62e9\u7684 sbp=flow.sbp.split(0) \uff0c2\u4e2a\u5f62\u72b6\u4e3a (2,5) \u7684 local tensor\uff0c\u9700\u8981\u5728\u7b2c0\u7ef4\u62fc\u63a5\uff0c\u5f97\u5230 (4,5) \u7684 global tensor\u3002 Terminal 0 import oneflow as flow x = flow . randn ( 2 , 5 ) placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x_global = x . to_global ( placement = placement , sbp = sbp ) x_global . shape Terminal 1 import oneflow as flow x = flow . randn ( 2 , 5 ) placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x_global = x . to_global ( placement = placement , sbp = sbp ) x_global . shape \u5b9e\u8df5 SBP Signature \u7684\u4f5c\u7528 \u00b6 \u6570\u636e\u5e76\u884c \u00b6 \u4ee5\u4e0b\u7684\u4ee3\u7801\u5bf9\u5e94\u4e86 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u7b56\u7565 \u7684\u6570\u636e\u5e76\u884c\u3002 Terminal 0 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . split ( 0 )) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . broadcast ) y = flow . matmul ( x , w ) y . sbp y . shape Terminal 1 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . split ( 0 )) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . broadcast ) y = flow . matmul ( x , w ) y . sbp y . shape \u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c flow.matmul \u6839\u636e\u8f93\u5165 x \u4e0e w \u7684 SBP \u5206\u522b\u4e3a split(0) \u3001 broadcast \u3002OneFlow \u81ea\u52a8\u63a8\u5bfc\u51fa\u8f93\u51fa y \u7684 SBP \u5e94\u8be5\u4e3a split(0) \uff0c\u5b8c\u6210\u8ba1\u7b97\uff0c\u5f97\u5230 shape=(4,8) \u7684\u77e9\u9635\u3002\u8f93\u51fa\uff1a Terminal 0 (oneflow.sbp.split(axis=0),) oneflow.Size([4, 8]) Terminal 1 (oneflow.sbp.split(axis=0),) oneflow.Size([4, 8]) \u6a21\u578b\u5e76\u884c \u00b6 \u4ee5\u4e0b\u7684\u4ee3\u7801\u5bf9\u5e94\u4e86 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u7b56\u7565 \u7684\u6a21\u578b\u5e76\u884c\u3002 Terminal 0 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . broadcast ) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . split ( 1 )) y = flow . matmul ( x , w ) y . sbp y . shape Terminal 1 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . broadcast ) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . split ( 1 )) y = flow . matmul ( x , w ) y . sbp y . shape \u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c flow.matmul \u6839\u636e\u8f93\u5165 x \u4e0e w \u7684 SBP \u5206\u522b\u4e3a broadcast \u3001 split(1) \u3002OneFlow \u81ea\u52a8\u63a8\u5bfc\u51fa\u8f93\u51fa y \u7684 SBP \u5e94\u8be5\u4e3a split(1) \uff0c\u5b8c\u6210\u8ba1\u7b97\uff0c\u5f97\u5230 shape=(4,8) \u7684\u77e9\u9635\u3002\u8f93\u51fa\uff1a Terminal 0 (oneflow.sbp.split(axis=1),) oneflow.Size([4, 8]) Terminal 1 (oneflow.sbp.split(axis=1),) oneflow.Size([4, 8]) \u6269\u5c55\u9605\u8bfb \u00b6 \u591a\u673a\u8bad\u7ec3\u65f6\u7684\u73af\u5883\u53d8\u91cf \u00b6 \u672c\u6587\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5728\u4ea4\u4e92\u5f0f Python \u73af\u5883\u4e0b\u65b9\u4fbf\u67e5\u770b\u5b9e\u9a8c\u6548\u679c\u3002 \u5982\u679c\u4e0d\u662f\u5b66\u4e60\u3001\u8bd5\u9a8c\u76ee\u7684\uff0c\u800c\u662f\u751f\u4ea7\u9700\u6c42\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 oneflow.distributed.launch \u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u8be5\u6a21\u5757\u5185\u90e8\u6839\u636e\u547d\u4ee4\u884c\u53c2\u6570\u81ea\u52a8\u8bbe\u7f6e\u4e86\u5fc5\u8981\u7684\u73af\u5883\u53d8\u91cf\u3002 MASTER_ADDR \uff1a\u591a\u673a\u8bad\u7ec3\u7684\u7b2c0\u53f7\u673a\u5668\u7684 IP MASTER_PORT \uff1a\u591a\u673a\u8bad\u7ec3\u7684\u7b2c0\u53f7\u673a\u5668\u7684\u76d1\u542c\u7aef\u53e3\uff0c\u4e0d\u4e0e\u5df2\u7ecf\u5360\u7528\u7684\u7aef\u53e3\u51b2\u7a81\u5373\u53ef WORLD_SIZE \uff1a\u6574\u4e2a\u96c6\u7fa4\u4e2d\u8ba1\u7b97\u8bbe\u5907\u7684\u6570\u76ee\uff0c\u56e0\u4e3a\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u5404\u4e2a\u673a\u5668\u4e0a\u663e\u5361\u6570\u76ee\u4e0d\u4e00\u81f4\uff0c\u56e0\u6b64 WORLD_SIZE \u7684\u6570\u76ee\u5b9e\u9645\u4e0a\u662f \\(\u673a\u5668\u6570\u76ee \\times \u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u663e\u5361\u6570\u76ee\\) \u3002\u5982\u6211\u4eec\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u662f\u5355\u673a2\u5361\u7684\u60c5\u51b5\uff0c\u56e0\u6b64 WORLD_SIZE=2 RANK \u548c LOCAL_RANK \u90fd\u662f\u5bf9\u8ba1\u7b97\u8bbe\u5907\u7684\u7f16\u53f7\uff0c\u4e0d\u540c\u7684\u662f RANK \u662f\u201c\u5168\u5c40\u89c6\u89d2\u201d\u7684\u7f16\u53f7\uff0c LOCAL_RANK \u67d0\u4e2a\u7279\u5b9a\u673a\u5668\u4e0a\u7684\u201c\u5c40\u90e8\u89c6\u89d2\u201d\u7684\u7f16\u53f7\u3002\u5f53\u662f\u5355\u673a\u8bad\u7ec3\uff08\u5355\u673a\u5355\u5361\u6216\u5355\u673a\u591a\u5361\uff09\u65f6\uff0c\u4e24\u8005\u662f\u6ca1\u6709\u533a\u522b\u7684\u3002\u4ee5\u4e0a\u7684\u4f8b\u5b50\u4e2d\uff0c\u6709\u4e24\u4e2a\u663e\u5361\uff0c\u5206\u522b\u662f0\u53f7\u548c1\u53f7\u3002 \u5f53\u662f\u591a\u673a\u8bad\u7ec3\u65f6\uff0c\u6bcf\u53f0\u673a\u5668\u4e0a\u7684 LOCAL_RANK \u7684\u4e0a\u9650\uff0c\u5c31\u662f\u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u8ba1\u7b97\u8bbe\u5907\u7684\u6570\u76ee\uff1b RANK \u7684\u4e0a\u9650\uff0c\u5c31\u662f\u6240\u6709\u673a\u5668\u4e0a\u6240\u6709\u8ba1\u7b97\u8bbe\u5907\u7684\u603b\u548c\uff0c\u5b83\u4eec\u7684\u7f16\u53f7\u5747\u4ece0\u5f00\u59cb\u3002\uff08\u56e0\u4e3a\u7f16\u53f7\u4ece0\u5f00\u59cb\uff0c\u6240\u4ee5\u4e0d\u5305\u542b\u4e0a\u9650\uff09 \u4ee5\u4e24\u53f0\u673a\u5668\u3001\u6bcf\u53f0\u673a\u5668\u4e0a\u6709\u4e24\u5f20\u663e\u5361\u4e3a\u4f8b\uff0c\u53ef\u4ee5\u6574\u7406\u51fa\u6bcf\u5f20\u663e\u5361\u7684 LOCAL_RANK \u4e0e RANK \u5bf9\u5e94\u60c5\u51b5\uff1a RANK LOCAL_RANK \u673a\u56680\u7684\u7b2c0\u5f20\u663e\u5361 0 0 \u673a\u56680\u7684\u7b2c1\u5f20\u663e\u5361 1 1 \u673a\u56681\u7684\u7b2c0\u5f20\u663e\u5361 2 0 \u673a\u56681\u7684\u7b2c1\u5f20\u663e\u5361 3 1 Boxing\uff08\u81ea\u52a8\u8f6c\u6362 SBP\uff09 \u00b6 \u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u4ee5\u4e0a\u4ee3\u7801\u7684\u4f8b\u5b50\uff0c\u77e5\u9053\u4e00\u4e2a\u7b97\u5b50\u4f1a\u6839\u636e\u8f93\u5165 tensor \u7684 SBP \u5c5e\u6027\u4ee5\u53ca\u7b97\u5b50\u5185\u7f6e\u7684 SBP Signature\uff0c\u81ea\u52a8\u8bbe\u7f6e\u8f93\u51fa tensor \u7684 SBP\u3002 \u4f46\u662f\uff0c\u7ec6\u5fc3\u7684\u7528\u6237\u53ef\u80fd\u4f1a\u8fdb\u4e00\u6b65\u601d\u8003\uff0c\u5982\u679c\u4e0a\u6e38\u7b97\u5b50\u8f93\u51fa tensor \u7684 SBP\uff0c\u4e0e\u4e0b\u6e38\u7b97\u5b50\u8f93\u5165\u7684\u9700\u8981\u4e0d\u4e00\u81f4\u65f6\uff0c\u600e\u4e48\u529e\u5462\uff1f \u6bd4\u5982\uff0c\u5047\u8bbe\u5728\u6a21\u578b\u5e76\u884c\u4e2d\uff0c\u67092\u5c42\u77e9\u9635\u4e58\u6cd5\uff0c\u5728\u7b2c\u4e00\u5c42\u548c\u548c\u7b2c\u4e8c\u5c42\u90fd\u505a\u6a21\u578b\u5e76\u884c\u3002 \u56e0\u4e3a\u7b2c\u4e00\u5c42\u7684\u8f93\u51fa\u7684 SBP\uff08 split(1) \uff09\uff0c\u5e76\u4e0d\u662f\u7b2c\u4e8c\u5c42\u8f93\u5165\u6240\u671f\u5f85\u7684\uff08 broadcast \uff09\uff0c\u8fd9\u65f6\u5019\uff0cOneFlow \u4f1a\u81ea\u52a8\u5728\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\u548c\u4e0b\u4e00\u5c42\u7684\u8f93\u51fa\u4e4b\u95f4\uff0c\u63d2\u5165 Boxing \u64cd\u4f5c\uff0c\u5229\u7528\u96c6\u5408\u901a\u4fe1\u8fdb\u884c\u5fc5\u8981\u7684\u6570\u636e\u8f6c\u6362\u3002 \u4ece split(1) \u8f6c\u6362\u4e3a broadcast \uff0c\u76f8\u5f53\u4e8e\u505a\u4e86\u4e00\u6b21 AllGather \u64cd\u4f5c\u3002\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u56e0\u4e3a\u6709 Boxing \u673a\u5236\u7684\u5b58\u5728\uff0c\u4f7f\u5f97\u7528\u6237\u53ea\u7528\u5173\u5fc3\u5c11\u6570\u5173\u952e\u5730\u65b9\uff08\u5982 source \u7b97\u5b50\uff09\u7684 SBP \u8bbe\u7f6e\uff0c\u5269\u4e0b\u7684\u5168\u90e8\u90fd\u53ef\u4ee5\u4ea4\u7ed9 OneFlow \u6846\u67b6\u3002","title":"Global Tensor"},{"location":"parallelism/03_consistent_tensor.html#global-tensor","text":"","title":"Global Tensor"},{"location":"parallelism/03_consistent_tensor.html#_1","text":"","title":"\u5168\u5c40\u89c6\u89d2\u4e0e\u7269\u7406\u89c6\u89d2\u7684\u6620\u5c04"},{"location":"parallelism/03_consistent_tensor.html#global-tensor_1","text":"\u8981\u5728\u67092\u5f20 GPU \u663e\u5361\u7684\u4e3b\u673a\u4e0a\u4ea4\u4e92\u5f0f\u4f53\u9a8c global tensor\uff0c\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u5f0f\u57282\u4e2a\u63a7\u5236\u53f0\u5206\u522b\u542f\u52a8 python\u3002 Note \u5206\u522b \u70b9\u51fb \u4ee5\u4e0b Terminal 0 \u6216 Terminal 1 \u6807\u7b7e\uff0c\u67e5\u770b2\u4e2a\u63a7\u5236\u53f0\u7684\u547d\u4ee4/\u4ee3\u7801 Terminal 0 export MASTER_ADDR = 127 .0.0.1 MASTER_PORT = 17789 WORLD_SIZE = 2 RANK = 0 LOCAL_RANK = 0 python3 Terminal 1 export MASTER_ADDR = 127 .0.0.1 MASTER_PORT = 17789 WORLD_SIZE = 2 RANK = 1 LOCAL_RANK = 1 python3 \u4ee5\u4e0a\u7684\u73af\u5883\u53d8\u91cf\u7684\u8bbe\u7f6e\u662f\u505a\u5206\u5e03\u5f0f\u7684\u914d\u7f6e\uff0c\u8be6\u7ec6\u89e3\u91ca\u53ca\u501f\u52a9\u5de5\u5177\u542f\u52a8\u5206\u5e03\u5f0f\uff0c\u8bf7\u53c2\u8003\u6587\u672b\u7684 \u6269\u5c55\u9605\u8bfb","title":"\u521b\u5efa Global Tensor"},{"location":"parallelism/03_consistent_tensor.html#global-tensor_2","text":"\u5728\u4e24\u4e2a\u63a7\u5236\u53f0\uff0c\u5206\u522b\u5bfc\u5165 oneflow \uff0c\u5e76\u521b\u5efa x \u3002 \u5176\u4e2d flow.placement(\"cuda\", [0,1]) \u6307\u5b9a\u4e86 global tensor \u5728\u96c6\u7fa4\u7684\u8303\u56f4\u3002 \"cuda\" \u8868\u793a\u5728 GPU \u8bbe\u5907\u4e0a\u3002 placement \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a list \uff0c\u96c6\u7fa4\u4e2d\u7684\u8bbe\u5907\u4f1a\u88ab\u81ea\u52a8\u7f16\u53f7\uff0c\u901a\u8fc7\u6570\u5b57\u6307\u5b9a\u4f7f\u7528\u54ea\u4e9b\u8bbe\u5907\u3002 [0,1] \u8868\u793a global tensor \u4f7f\u7528\u7b2c 0\u30011 \u5f20\u663e\u5361\u4e0a\u3002 Terminal 0 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x = flow . randn ( 4 , 5 , placement = placement , sbp = sbp ) x . shape Terminal 1 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x = flow . randn ( 4 , 5 , placement = placement , sbp = sbp ) x . shape \u8f93\u51fa\uff1a Terminal 0 oneflow.Size([4, 5]) Terminal 1 oneflow.Size([4, 5])","title":"\u76f4\u63a5\u521b\u5efa global tensor"},{"location":"parallelism/03_consistent_tensor.html#global-tensor-local-tensor","text":"\u901a\u8fc7 to_local \u65b9\u6cd5\u53ef\u4ee5\u67e5\u770b\u7269\u7406\u8bbe\u5907\u4e0a\u7684 local tensor\uff1a Terminal 0 x . to_local () tensor ([[ 2.9186e-01 , - 3.9442e-01 , 4.7072e-04 , - 3.2216e-01 , 1.7788e-01 ], [ - 4.5284e-01 , 1.2361e-01 , - 3.5962e-01 , 2.6651e-01 , 1.2951e+00 ]], device = 'cuda:0' , dtype = oneflow . float32 ) Terminal 1 x . to_local () tensor ([[ - 0.4363 , 0.9985 , - 2.5387 , 0.3003 , 0.3803 ], [ 0.0556 , - 0.8077 , 1.1191 , - 2.1278 , 0.1468 ]], device = 'cuda:1' , dtype = oneflow . float32 )","title":"\u7531 global tensor \u5f97\u5230 local tensor"},{"location":"parallelism/03_consistent_tensor.html#local-tensor-global-tensor","text":"\u53ef\u4ee5\u5148\u521b\u5efa local tensor\uff0c\u518d\u5229\u7528 Tensor.to_global \u65b9\u6cd5\uff0c\u5c06 local tensor \u8f6c\u4e3a global tensor\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u57282\u53f0\u8bbe\u5907\u4e0a\u5206\u522b\u521b\u5efa\u4e86 shape=(2,5) \u76842\u4e2a local tensor\u3002 \u6ce8\u610f\u7ecf\u8fc7 to_global \u65b9\u6cd5\u540e\uff0c\u5f97\u5230\u7684 global tensor \u7684 shape \u4e3a (4,5) \u3002 \u8fd9\u662f\u56e0\u4e3a\u9009\u62e9\u7684 sbp=flow.sbp.split(0) \uff0c2\u4e2a\u5f62\u72b6\u4e3a (2,5) \u7684 local tensor\uff0c\u9700\u8981\u5728\u7b2c0\u7ef4\u62fc\u63a5\uff0c\u5f97\u5230 (4,5) \u7684 global tensor\u3002 Terminal 0 import oneflow as flow x = flow . randn ( 2 , 5 ) placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x_global = x . to_global ( placement = placement , sbp = sbp ) x_global . shape Terminal 1 import oneflow as flow x = flow . randn ( 2 , 5 ) placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x_global = x . to_global ( placement = placement , sbp = sbp ) x_global . shape","title":"\u7531 local tensor \u8f6c\u6362\u5f97\u5230 global tensor"},{"location":"parallelism/03_consistent_tensor.html#sbp-signature","text":"","title":"\u5b9e\u8df5 SBP Signature \u7684\u4f5c\u7528"},{"location":"parallelism/03_consistent_tensor.html#_2","text":"\u4ee5\u4e0b\u7684\u4ee3\u7801\u5bf9\u5e94\u4e86 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u7b56\u7565 \u7684\u6570\u636e\u5e76\u884c\u3002 Terminal 0 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . split ( 0 )) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . broadcast ) y = flow . matmul ( x , w ) y . sbp y . shape Terminal 1 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . split ( 0 )) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . broadcast ) y = flow . matmul ( x , w ) y . sbp y . shape \u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c flow.matmul \u6839\u636e\u8f93\u5165 x \u4e0e w \u7684 SBP \u5206\u522b\u4e3a split(0) \u3001 broadcast \u3002OneFlow \u81ea\u52a8\u63a8\u5bfc\u51fa\u8f93\u51fa y \u7684 SBP \u5e94\u8be5\u4e3a split(0) \uff0c\u5b8c\u6210\u8ba1\u7b97\uff0c\u5f97\u5230 shape=(4,8) \u7684\u77e9\u9635\u3002\u8f93\u51fa\uff1a Terminal 0 (oneflow.sbp.split(axis=0),) oneflow.Size([4, 8]) Terminal 1 (oneflow.sbp.split(axis=0),) oneflow.Size([4, 8])","title":"\u6570\u636e\u5e76\u884c"},{"location":"parallelism/03_consistent_tensor.html#_3","text":"\u4ee5\u4e0b\u7684\u4ee3\u7801\u5bf9\u5e94\u4e86 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u7b56\u7565 \u7684\u6a21\u578b\u5e76\u884c\u3002 Terminal 0 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . broadcast ) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . split ( 1 )) y = flow . matmul ( x , w ) y . sbp y . shape Terminal 1 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . broadcast ) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . split ( 1 )) y = flow . matmul ( x , w ) y . sbp y . shape \u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c flow.matmul \u6839\u636e\u8f93\u5165 x \u4e0e w \u7684 SBP \u5206\u522b\u4e3a broadcast \u3001 split(1) \u3002OneFlow \u81ea\u52a8\u63a8\u5bfc\u51fa\u8f93\u51fa y \u7684 SBP \u5e94\u8be5\u4e3a split(1) \uff0c\u5b8c\u6210\u8ba1\u7b97\uff0c\u5f97\u5230 shape=(4,8) \u7684\u77e9\u9635\u3002\u8f93\u51fa\uff1a Terminal 0 (oneflow.sbp.split(axis=1),) oneflow.Size([4, 8]) Terminal 1 (oneflow.sbp.split(axis=1),) oneflow.Size([4, 8])","title":"\u6a21\u578b\u5e76\u884c"},{"location":"parallelism/03_consistent_tensor.html#_4","text":"","title":"\u6269\u5c55\u9605\u8bfb"},{"location":"parallelism/03_consistent_tensor.html#_5","text":"\u672c\u6587\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5728\u4ea4\u4e92\u5f0f Python \u73af\u5883\u4e0b\u65b9\u4fbf\u67e5\u770b\u5b9e\u9a8c\u6548\u679c\u3002 \u5982\u679c\u4e0d\u662f\u5b66\u4e60\u3001\u8bd5\u9a8c\u76ee\u7684\uff0c\u800c\u662f\u751f\u4ea7\u9700\u6c42\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 oneflow.distributed.launch \u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u8be5\u6a21\u5757\u5185\u90e8\u6839\u636e\u547d\u4ee4\u884c\u53c2\u6570\u81ea\u52a8\u8bbe\u7f6e\u4e86\u5fc5\u8981\u7684\u73af\u5883\u53d8\u91cf\u3002 MASTER_ADDR \uff1a\u591a\u673a\u8bad\u7ec3\u7684\u7b2c0\u53f7\u673a\u5668\u7684 IP MASTER_PORT \uff1a\u591a\u673a\u8bad\u7ec3\u7684\u7b2c0\u53f7\u673a\u5668\u7684\u76d1\u542c\u7aef\u53e3\uff0c\u4e0d\u4e0e\u5df2\u7ecf\u5360\u7528\u7684\u7aef\u53e3\u51b2\u7a81\u5373\u53ef WORLD_SIZE \uff1a\u6574\u4e2a\u96c6\u7fa4\u4e2d\u8ba1\u7b97\u8bbe\u5907\u7684\u6570\u76ee\uff0c\u56e0\u4e3a\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u5404\u4e2a\u673a\u5668\u4e0a\u663e\u5361\u6570\u76ee\u4e0d\u4e00\u81f4\uff0c\u56e0\u6b64 WORLD_SIZE \u7684\u6570\u76ee\u5b9e\u9645\u4e0a\u662f \\(\u673a\u5668\u6570\u76ee \\times \u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u663e\u5361\u6570\u76ee\\) \u3002\u5982\u6211\u4eec\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u662f\u5355\u673a2\u5361\u7684\u60c5\u51b5\uff0c\u56e0\u6b64 WORLD_SIZE=2 RANK \u548c LOCAL_RANK \u90fd\u662f\u5bf9\u8ba1\u7b97\u8bbe\u5907\u7684\u7f16\u53f7\uff0c\u4e0d\u540c\u7684\u662f RANK \u662f\u201c\u5168\u5c40\u89c6\u89d2\u201d\u7684\u7f16\u53f7\uff0c LOCAL_RANK \u67d0\u4e2a\u7279\u5b9a\u673a\u5668\u4e0a\u7684\u201c\u5c40\u90e8\u89c6\u89d2\u201d\u7684\u7f16\u53f7\u3002\u5f53\u662f\u5355\u673a\u8bad\u7ec3\uff08\u5355\u673a\u5355\u5361\u6216\u5355\u673a\u591a\u5361\uff09\u65f6\uff0c\u4e24\u8005\u662f\u6ca1\u6709\u533a\u522b\u7684\u3002\u4ee5\u4e0a\u7684\u4f8b\u5b50\u4e2d\uff0c\u6709\u4e24\u4e2a\u663e\u5361\uff0c\u5206\u522b\u662f0\u53f7\u548c1\u53f7\u3002 \u5f53\u662f\u591a\u673a\u8bad\u7ec3\u65f6\uff0c\u6bcf\u53f0\u673a\u5668\u4e0a\u7684 LOCAL_RANK \u7684\u4e0a\u9650\uff0c\u5c31\u662f\u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u8ba1\u7b97\u8bbe\u5907\u7684\u6570\u76ee\uff1b RANK \u7684\u4e0a\u9650\uff0c\u5c31\u662f\u6240\u6709\u673a\u5668\u4e0a\u6240\u6709\u8ba1\u7b97\u8bbe\u5907\u7684\u603b\u548c\uff0c\u5b83\u4eec\u7684\u7f16\u53f7\u5747\u4ece0\u5f00\u59cb\u3002\uff08\u56e0\u4e3a\u7f16\u53f7\u4ece0\u5f00\u59cb\uff0c\u6240\u4ee5\u4e0d\u5305\u542b\u4e0a\u9650\uff09 \u4ee5\u4e24\u53f0\u673a\u5668\u3001\u6bcf\u53f0\u673a\u5668\u4e0a\u6709\u4e24\u5f20\u663e\u5361\u4e3a\u4f8b\uff0c\u53ef\u4ee5\u6574\u7406\u51fa\u6bcf\u5f20\u663e\u5361\u7684 LOCAL_RANK \u4e0e RANK \u5bf9\u5e94\u60c5\u51b5\uff1a RANK LOCAL_RANK \u673a\u56680\u7684\u7b2c0\u5f20\u663e\u5361 0 0 \u673a\u56680\u7684\u7b2c1\u5f20\u663e\u5361 1 1 \u673a\u56681\u7684\u7b2c0\u5f20\u663e\u5361 2 0 \u673a\u56681\u7684\u7b2c1\u5f20\u663e\u5361 3 1","title":"\u591a\u673a\u8bad\u7ec3\u65f6\u7684\u73af\u5883\u53d8\u91cf"},{"location":"parallelism/03_consistent_tensor.html#boxing-sbp","text":"\u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u4ee5\u4e0a\u4ee3\u7801\u7684\u4f8b\u5b50\uff0c\u77e5\u9053\u4e00\u4e2a\u7b97\u5b50\u4f1a\u6839\u636e\u8f93\u5165 tensor \u7684 SBP \u5c5e\u6027\u4ee5\u53ca\u7b97\u5b50\u5185\u7f6e\u7684 SBP Signature\uff0c\u81ea\u52a8\u8bbe\u7f6e\u8f93\u51fa tensor \u7684 SBP\u3002 \u4f46\u662f\uff0c\u7ec6\u5fc3\u7684\u7528\u6237\u53ef\u80fd\u4f1a\u8fdb\u4e00\u6b65\u601d\u8003\uff0c\u5982\u679c\u4e0a\u6e38\u7b97\u5b50\u8f93\u51fa tensor \u7684 SBP\uff0c\u4e0e\u4e0b\u6e38\u7b97\u5b50\u8f93\u5165\u7684\u9700\u8981\u4e0d\u4e00\u81f4\u65f6\uff0c\u600e\u4e48\u529e\u5462\uff1f \u6bd4\u5982\uff0c\u5047\u8bbe\u5728\u6a21\u578b\u5e76\u884c\u4e2d\uff0c\u67092\u5c42\u77e9\u9635\u4e58\u6cd5\uff0c\u5728\u7b2c\u4e00\u5c42\u548c\u548c\u7b2c\u4e8c\u5c42\u90fd\u505a\u6a21\u578b\u5e76\u884c\u3002 \u56e0\u4e3a\u7b2c\u4e00\u5c42\u7684\u8f93\u51fa\u7684 SBP\uff08 split(1) \uff09\uff0c\u5e76\u4e0d\u662f\u7b2c\u4e8c\u5c42\u8f93\u5165\u6240\u671f\u5f85\u7684\uff08 broadcast \uff09\uff0c\u8fd9\u65f6\u5019\uff0cOneFlow \u4f1a\u81ea\u52a8\u5728\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\u548c\u4e0b\u4e00\u5c42\u7684\u8f93\u51fa\u4e4b\u95f4\uff0c\u63d2\u5165 Boxing \u64cd\u4f5c\uff0c\u5229\u7528\u96c6\u5408\u901a\u4fe1\u8fdb\u884c\u5fc5\u8981\u7684\u6570\u636e\u8f6c\u6362\u3002 \u4ece split(1) \u8f6c\u6362\u4e3a broadcast \uff0c\u76f8\u5f53\u4e8e\u505a\u4e86\u4e00\u6b21 AllGather \u64cd\u4f5c\u3002\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u56e0\u4e3a\u6709 Boxing \u673a\u5236\u7684\u5b58\u5728\uff0c\u4f7f\u5f97\u7528\u6237\u53ea\u7528\u5173\u5fc3\u5c11\u6570\u5173\u952e\u5730\u65b9\uff08\u5982 source \u7b97\u5b50\uff09\u7684 SBP \u8bbe\u7f6e\uff0c\u5269\u4e0b\u7684\u5168\u90e8\u90fd\u53ef\u4ee5\u4ea4\u7ed9 OneFlow \u6846\u67b6\u3002","title":"Boxing\uff08\u81ea\u52a8\u8f6c\u6362 SBP\uff09"},{"location":"parallelism/04_launch.html","text":"\u7528 launch \u6a21\u5757\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3 \u00b6 OneFlow \u63d0\u4f9b\u4e86 oneflow.distributed.launch \u6a21\u5757\u5e2e\u52a9\u7528\u6237\u66f4\u65b9\u4fbf\u5730\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 \u7528\u6237\u53ef\u4ee5\u501f\u52a9\u4ee5\u4e0b\u7684\u5f62\u5f0f\uff0c\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1a python3 -m oneflow.distributed.launch [ \u542f\u52a8\u9009\u9879 ] \u8bad\u7ec3\u811a\u672c.py \u6bd4\u5982\uff0c\u542f\u52a8\u5355\u673a\u4e24\u5361\u7684\u8bad\u7ec3\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 ./script.py \u518d\u6bd4\u5982\uff0c\u542f\u52a8\u4e24\u53f0\u673a\u5668\uff0c\u6bcf\u53f0\u673a\u5668\u6709\u4e24\u5f20\u663e\u5361\u7684\u8bad\u7ec3\u3002 \u57280\u53f7\u673a\u5668\u4e0a\u8fd0\u884c\uff1a python3 -m oneflow.distributed.launch \\ --nnodes = 2 \\ --node_rank = 0 \\ --nproc_per_node = 2 \\ --master_addr = \"192.168.1.1\" \\ --master_port = 7788 \\ script.py \u57281\u53f7\u673a\u5668\u4e0a\u8fd0\u884c\uff1a python3 -m oneflow.distributed.launch \\ --nnodes = 2 \\ --node_rank = 1 \\ --nproc_per_node = 2 \\ --master_addr = \"192.168.1.1\" \\ --master_port = 7788 \\ script.py \u5e38\u89c1\u9009\u9879\u8bf4\u660e \u00b6 \u901a\u8fc7 python3 -m oneflow.distributed.launch -h \u53ef\u4ee5\u67e5\u770b launch \u6a21\u5757\u7684\u9009\u9879\u8bf4\u660e\uff0c\u4ee5\u4e0b\u662f\u90e8\u5206\u5e38\u89c1\u9009\u9879\u3002 --nnodes \uff1a\u673a\u5668\u7684\u6570\u76ee(number of nodes) --node_rank \uff1a \u673a\u5668\u7684\u7f16\u53f7\uff0c\u4ece0\u5f00\u59cb --nproc_per_node \uff1a\u6bcf\u53f0\u673a\u5668\u4e0a\u8981\u542f\u52a8\u7684\u8fdb\u7a0b\u6570\u76ee(number of processes per node)\uff0c\u63a8\u8350\u4e0e GPU \u6570\u76ee\u4e00\u81f4 --logdir \uff1a\u5b50\u8fdb\u7a0b\u65e5\u5fd7\u7684\u76f8\u5bf9\u5b58\u50a8\u8def\u5f84 launch \u6a21\u5757\u4e0e\u5e76\u884c\u7b56\u7565\u7684\u5173\u7cfb \u00b6 \u6ce8\u610f oneflow.distributed.launch \u7684\u4e3b\u8981\u4f5c\u7528\uff0c\u662f\u5f85\u7528\u6237\u5b8c\u6210\u5206\u5e03\u5f0f\u7a0b\u5e8f\u540e\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u5b83\u7701\u53bb\u4e86\u914d\u7f6e\u96c6\u7fa4\u4e2d \u73af\u5883\u53d8\u91cf \u7684\u7e41\u7410\u3002 \u4f46\u662f oneflow.distributed.launch \u5e76\u4e0d\u51b3\u5b9a \u5e76\u884c\u7b56\u7565 \uff0c\u5e76\u884c\u7b56\u7565\u662f\u7531\u8bbe\u7f6e\u6570\u636e\u3001\u6a21\u578b\u7684\u5206\u53d1\u65b9\u5f0f\u3001\u5728\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u653e\u7f6e\u4f4d\u7f6e\u51b3\u5b9a\u7684\u3002 OneFlow \u63d0\u4f9b\u7684 \u5168\u5c40\u89c6\u89d2 \u548c Global Tensor \u53ef\u4ee5\u7075\u6d3b\u5730\u914d\u7f6e\u5e76\u884c\u7b56\u7565\u3002\u5e76\u4e14\u9488\u5bf9\u6570\u636e\u5e76\u884c\uff0cOneFlow \u63d0\u4f9b\u4e86 DistributedDataParallel \u6a21\u5757\uff0c\u53ef\u4ee5\u5728\u6781\u5c11\u4fee\u6539\u4ee3\u7801\u7684\u524d\u63d0\u4e0b\uff0c\u5c06\u5355\u673a\u5355\u5361\u7684\u811a\u672c\u6539\u4e3a\u6570\u636e\u5e76\u884c\u7684\u811a\u672c\u3002","title":"\u7528 launch \u6a21\u5757\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3"},{"location":"parallelism/04_launch.html#launch","text":"OneFlow \u63d0\u4f9b\u4e86 oneflow.distributed.launch \u6a21\u5757\u5e2e\u52a9\u7528\u6237\u66f4\u65b9\u4fbf\u5730\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 \u7528\u6237\u53ef\u4ee5\u501f\u52a9\u4ee5\u4e0b\u7684\u5f62\u5f0f\uff0c\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1a python3 -m oneflow.distributed.launch [ \u542f\u52a8\u9009\u9879 ] \u8bad\u7ec3\u811a\u672c.py \u6bd4\u5982\uff0c\u542f\u52a8\u5355\u673a\u4e24\u5361\u7684\u8bad\u7ec3\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 ./script.py \u518d\u6bd4\u5982\uff0c\u542f\u52a8\u4e24\u53f0\u673a\u5668\uff0c\u6bcf\u53f0\u673a\u5668\u6709\u4e24\u5f20\u663e\u5361\u7684\u8bad\u7ec3\u3002 \u57280\u53f7\u673a\u5668\u4e0a\u8fd0\u884c\uff1a python3 -m oneflow.distributed.launch \\ --nnodes = 2 \\ --node_rank = 0 \\ --nproc_per_node = 2 \\ --master_addr = \"192.168.1.1\" \\ --master_port = 7788 \\ script.py \u57281\u53f7\u673a\u5668\u4e0a\u8fd0\u884c\uff1a python3 -m oneflow.distributed.launch \\ --nnodes = 2 \\ --node_rank = 1 \\ --nproc_per_node = 2 \\ --master_addr = \"192.168.1.1\" \\ --master_port = 7788 \\ script.py","title":"\u7528 launch \u6a21\u5757\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3"},{"location":"parallelism/04_launch.html#_1","text":"\u901a\u8fc7 python3 -m oneflow.distributed.launch -h \u53ef\u4ee5\u67e5\u770b launch \u6a21\u5757\u7684\u9009\u9879\u8bf4\u660e\uff0c\u4ee5\u4e0b\u662f\u90e8\u5206\u5e38\u89c1\u9009\u9879\u3002 --nnodes \uff1a\u673a\u5668\u7684\u6570\u76ee(number of nodes) --node_rank \uff1a \u673a\u5668\u7684\u7f16\u53f7\uff0c\u4ece0\u5f00\u59cb --nproc_per_node \uff1a\u6bcf\u53f0\u673a\u5668\u4e0a\u8981\u542f\u52a8\u7684\u8fdb\u7a0b\u6570\u76ee(number of processes per node)\uff0c\u63a8\u8350\u4e0e GPU \u6570\u76ee\u4e00\u81f4 --logdir \uff1a\u5b50\u8fdb\u7a0b\u65e5\u5fd7\u7684\u76f8\u5bf9\u5b58\u50a8\u8def\u5f84","title":"\u5e38\u89c1\u9009\u9879\u8bf4\u660e"},{"location":"parallelism/04_launch.html#launch_1","text":"\u6ce8\u610f oneflow.distributed.launch \u7684\u4e3b\u8981\u4f5c\u7528\uff0c\u662f\u5f85\u7528\u6237\u5b8c\u6210\u5206\u5e03\u5f0f\u7a0b\u5e8f\u540e\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u5b83\u7701\u53bb\u4e86\u914d\u7f6e\u96c6\u7fa4\u4e2d \u73af\u5883\u53d8\u91cf \u7684\u7e41\u7410\u3002 \u4f46\u662f oneflow.distributed.launch \u5e76\u4e0d\u51b3\u5b9a \u5e76\u884c\u7b56\u7565 \uff0c\u5e76\u884c\u7b56\u7565\u662f\u7531\u8bbe\u7f6e\u6570\u636e\u3001\u6a21\u578b\u7684\u5206\u53d1\u65b9\u5f0f\u3001\u5728\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u653e\u7f6e\u4f4d\u7f6e\u51b3\u5b9a\u7684\u3002 OneFlow \u63d0\u4f9b\u7684 \u5168\u5c40\u89c6\u89d2 \u548c Global Tensor \u53ef\u4ee5\u7075\u6d3b\u5730\u914d\u7f6e\u5e76\u884c\u7b56\u7565\u3002\u5e76\u4e14\u9488\u5bf9\u6570\u636e\u5e76\u884c\uff0cOneFlow \u63d0\u4f9b\u4e86 DistributedDataParallel \u6a21\u5757\uff0c\u53ef\u4ee5\u5728\u6781\u5c11\u4fee\u6539\u4ee3\u7801\u7684\u524d\u63d0\u4e0b\uff0c\u5c06\u5355\u673a\u5355\u5361\u7684\u811a\u672c\u6539\u4e3a\u6570\u636e\u5e76\u884c\u7684\u811a\u672c\u3002","title":"launch \u6a21\u5757\u4e0e\u5e76\u884c\u7b56\u7565\u7684\u5173\u7cfb"},{"location":"parallelism/05_ddp.html","text":"\u6570\u636e\u5e76\u884c\u8bad\u7ec3 \u00b6 \u5728 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u4e00\u6587\u4e2d\u4ecb\u7ecd\u4e86\u6570\u636e\u5e76\u884c\u7684\u7279\u70b9\u3002 \u5728 OneFlow \u4e2d\uff0c\u63d0\u4f9b\u4e86\u4e24\u79cd\u505a\u6570\u636e\u5e76\u884c\u7684\u65b9\u5f0f\u3002 \u4e00\u79cd\u662f\u4f7f\u7528 OneFlow \u7684\u539f\u751f\u7684 SBP \u6982\u5ff5\uff0c\u901a\u8fc7\u8bbe\u7f6e global \u5f20\u91cf\uff0c\u8fdb\u884c\u6570\u636e\u5e76\u884c\u8bad\u7ec3\uff0c\u8fd9\u4e5f\u662f\u7528 OneFlow \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u7684 \u63a8\u8350\u65b9\u5f0f \u3002 \u6b64\u5916\uff0c\u4e3a\u4e86\u65b9\u4fbf\u4ece PyTorch \u8fc1\u79fb\u5230 OneFlow \u7684\u7528\u6237\uff0cOneFlow \u63d0\u4f9b\u4e86\u4e0e torch.nn.parallel.DistributedDataParallel \u5bf9\u9f50\u4e00\u81f4\u7684\u63a5\u53e3 oneflow.nn.parallel.DistributedDataParallel \uff0c\u5b83\u4e5f\u80fd\u8ba9\u7528\u6237\u65b9\u4fbf\u5730\u4ece\u5355\u673a\u8bad\u7ec3\u811a\u672c\uff0c\u6269\u5c55\u4e3a\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u3002 \u901a\u8fc7\u8bbe\u7f6e SBP \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3 \u00b6 \u4ee5\u4e0b\u4ee3\u7801\uff0c\u662f\u901a\u8fc7\u914d\u7f6e\u8bbe\u7f6e global \u5f20\u91cf\uff0c\u5b8c\u6210\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u3002\u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u67e5\u770b\u8be6\u7ec6\u4ee3\u7801\u3002 Code import oneflow as flow import oneflow.nn as nn import flowvision import flowvision.transforms as transforms BATCH_SIZE = 64 EPOCH_NUM = 1 PLACEMENT = flow . placement ( \"cuda\" , [ 0 , 1 ]) S0 = flow . sbp . split ( 0 ) B = flow . sbp . broadcast DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) training_data = flowvision . datasets . CIFAR10 ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , ) train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) model = model . to_global ( placement = PLACEMENT , sbp = B ) loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) for t in range ( EPOCH_NUM ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) size = len ( train_dataloader . dataset ) for batch , ( x , y ) in enumerate ( train_dataloader ): x = x . to_global ( placement = PLACEMENT , sbp = S0 ) y = y . to_global ( placement = PLACEMENT , sbp = S0 ) # Compute prediction error pred = model ( x ) loss = loss_fn ( pred , y ) # Backpropagation optimizer . zero_grad () loss . backward () optimizer . step () current = batch * BATCH_SIZE if batch % 5 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u811a\u672c\u7684\u4e0e\u5355\u673a\u5355\u5361\u7684\u8bad\u7ec3\u811a\u672c\u51e0\u4e4e\u662f\u4e00\u6837\u7684\u3002\u5c11\u6570\u7684\u533a\u522b\u5728\u4e8e\u51e0\u884c\u4e0e global tensor \u6709\u5173\u7684\u914d\u7f6e\u4ee3\u7801\u5916\uff0c\u5b83\u4eec\u662f\uff1a \u8bbe\u7f6e placement\uff0c\u8ba9\u8bad\u7ec3\u653e\u7f6e\u5728\u96c6\u7fa4\u7b2c 0\u53f7\u30011\u53f7 GPU \u4e0a\uff1a PLACEMENT = flow . placement ( \"cuda\" , [ 0 , 1 ]) \u6a21\u578b\u5728\u96c6\u7fa4\u4e0a\u505a\u5e7f\u64ad model = model . to_global ( placement = PLACEMENT , sbp = B ) \u6570\u636e\u5728\u96c6\u7fa4\u4e0a\u6309 split(0) \u505a\u5207\u5206\uff1a x = x . to_global ( placement = PLACEMENT , sbp = S0 ) y = y . to_global ( placement = PLACEMENT , sbp = S0 ) \u8fd9\u6837\uff0c\u6309\u7167 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u4e2d\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5c31\u901a\u8fc7\u5bf9\u6570\u636e\u8fdb\u884c split(0) \u5207\u5206\uff0c\u5bf9\u6a21\u578b\u8fdb\u884c\u5e7f\u64ad\uff0c\u8fdb\u884c\u4e86\u5206\u5e03\u5f0f\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u3002 \u4f7f\u7528 DistributedDataParallel \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3 \u00b6 \u53ef\u4ee5\u7528\u4ee5\u4e0b\u547d\u4ee4\u5feb\u901f\u4f53\u9a8c oneflow.nn.parallel.DistributedDataParallel \u505a\u6570\u636e\u5e76\u884c\uff1a wget https://docs.oneflow.org/master/code/parallelism/ddp_train.py #\u4e0b\u8f7d\u811a\u672c python3 -m oneflow.distributed.launch --nproc_per_node 2 ./ddp_train.py #\u6570\u636e\u5e76\u884c\u8bad\u7ec3 \u8f93\u51fa\uff1a 50/500 loss:0.004111831542104483 50/500 loss:0.00025336415274068713 ... 500/500 loss:6.184563972055912e-11 500/500 loss:4.547473508864641e-12 w:tensor([[2.0000], [3.0000]], device='cuda:1', dtype=oneflow.float32, grad_fn=<accumulate_grad>) w:tensor([[2.0000], [3.0000]], device='cuda:0', dtype=oneflow.float32, grad_fn=<accumulate_grad>) \u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u53ef\u4ee5\u5c55\u5f00\u4ee5\u4e0a\u8fd0\u884c\u811a\u672c\u7684\u4ee3\u7801\u3002 Code import oneflow as flow from oneflow.nn.parallel import DistributedDataParallel as ddp train_x = [ flow . tensor ([[ 1 , 2 ], [ 2 , 3 ]], dtype = flow . float32 ), flow . tensor ([[ 4 , 6 ], [ 3 , 1 ]], dtype = flow . float32 ), ] train_y = [ flow . tensor ([[ 8 ], [ 13 ]], dtype = flow . float32 ), flow . tensor ([[ 26 ], [ 9 ]], dtype = flow . float32 ), ] class Model ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . lr = 0.01 self . iter_count = 500 self . w = flow . nn . Parameter ( flow . tensor ([[ 0 ], [ 0 ]], dtype = flow . float32 )) def forward ( self , x ): x = flow . matmul ( x , self . w ) return x m = Model () . to ( \"cuda\" ) m = ddp ( m ) loss = flow . nn . MSELoss ( reduction = \"sum\" ) optimizer = flow . optim . SGD ( m . parameters (), m . lr ) for i in range ( 0 , m . iter_count ): rank = flow . env . get_rank () x = train_x [ rank ] . to ( \"cuda\" ) y = train_y [ rank ] . to ( \"cuda\" ) y_pred = m ( x ) l = loss ( y_pred , y ) if ( i + 1 ) % 50 == 0 : print ( f \" { i + 1 } / { m . iter_count } loss: { l } \" ) optimizer . zero_grad () l . backward () optimizer . step () print ( f \" \\n w: { m . w } \" ) \u53ef\u4ee5\u53d1\u73b0\uff0c\u5b83\u4e0e\u5355\u673a\u5355\u5361\u811a\u672c\u7684\u4e0d\u540c\u53ea\u67092\u4e2a\uff1a \u4f7f\u7528 DistributedDataParallel \u5904\u7406\u4e00\u4e0b module \u5bf9\u8c61\uff08 m = ddp(m) ) \u4f7f\u7528 get_rank \u83b7\u53d6\u5f53\u524d\u8bbe\u5907\u7f16\u53f7\uff0c\u5e76\u9488\u5bf9\u8bbe\u5907\u5206\u53d1\u6570\u636e \u7136\u540e\u4f7f\u7528 launcher \u542f\u52a8\u811a\u672c\uff0c\u628a\u5269\u4e0b\u7684\u4e00\u5207\u90fd\u4ea4\u7ed9 OneFlow\uff0c\u8ba9\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u50cf\u5355\u673a\u5355\u5361\u8bad\u7ec3\u4e00\u6837\u7b80\u5355\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 ./ddp_train.py DistributedSampler \u00b6 \u672c\u6587\u4e3a\u4e86\u7b80\u5316\u95ee\u9898\uff0c\u7a81\u51fa DistributedDataParallel \uff0c\u56e0\u6b64\u4f7f\u7528\u7684\u6570\u636e\u662f\u624b\u5de5\u5206\u53d1\u7684\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 DistributedSampler \u914d\u5408\u6570\u636e\u5e76\u884c\u4f7f\u7528\u3002 DistributedSampler \u4f1a\u5728\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u5b9e\u4f8b\u5316 Dataloader\uff0c\u6bcf\u4e2a Dataloader \u5b9e\u4f8b\u4f1a\u52a0\u8f7d\u5b8c\u6574\u6570\u636e\u7684\u4e00\u90e8\u5206\uff0c\u81ea\u52a8\u5b8c\u6210\u6570\u636e\u7684\u5206\u53d1\u3002","title":"\u6570\u636e\u5e76\u884c\u8bad\u7ec3"},{"location":"parallelism/05_ddp.html#_1","text":"\u5728 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u4e00\u6587\u4e2d\u4ecb\u7ecd\u4e86\u6570\u636e\u5e76\u884c\u7684\u7279\u70b9\u3002 \u5728 OneFlow \u4e2d\uff0c\u63d0\u4f9b\u4e86\u4e24\u79cd\u505a\u6570\u636e\u5e76\u884c\u7684\u65b9\u5f0f\u3002 \u4e00\u79cd\u662f\u4f7f\u7528 OneFlow \u7684\u539f\u751f\u7684 SBP \u6982\u5ff5\uff0c\u901a\u8fc7\u8bbe\u7f6e global \u5f20\u91cf\uff0c\u8fdb\u884c\u6570\u636e\u5e76\u884c\u8bad\u7ec3\uff0c\u8fd9\u4e5f\u662f\u7528 OneFlow \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u7684 \u63a8\u8350\u65b9\u5f0f \u3002 \u6b64\u5916\uff0c\u4e3a\u4e86\u65b9\u4fbf\u4ece PyTorch \u8fc1\u79fb\u5230 OneFlow \u7684\u7528\u6237\uff0cOneFlow \u63d0\u4f9b\u4e86\u4e0e torch.nn.parallel.DistributedDataParallel \u5bf9\u9f50\u4e00\u81f4\u7684\u63a5\u53e3 oneflow.nn.parallel.DistributedDataParallel \uff0c\u5b83\u4e5f\u80fd\u8ba9\u7528\u6237\u65b9\u4fbf\u5730\u4ece\u5355\u673a\u8bad\u7ec3\u811a\u672c\uff0c\u6269\u5c55\u4e3a\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u3002","title":"\u6570\u636e\u5e76\u884c\u8bad\u7ec3"},{"location":"parallelism/05_ddp.html#sbp","text":"\u4ee5\u4e0b\u4ee3\u7801\uff0c\u662f\u901a\u8fc7\u914d\u7f6e\u8bbe\u7f6e global \u5f20\u91cf\uff0c\u5b8c\u6210\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u3002\u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u67e5\u770b\u8be6\u7ec6\u4ee3\u7801\u3002 Code import oneflow as flow import oneflow.nn as nn import flowvision import flowvision.transforms as transforms BATCH_SIZE = 64 EPOCH_NUM = 1 PLACEMENT = flow . placement ( \"cuda\" , [ 0 , 1 ]) S0 = flow . sbp . split ( 0 ) B = flow . sbp . broadcast DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) training_data = flowvision . datasets . CIFAR10 ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , ) train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) model = model . to_global ( placement = PLACEMENT , sbp = B ) loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) for t in range ( EPOCH_NUM ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) size = len ( train_dataloader . dataset ) for batch , ( x , y ) in enumerate ( train_dataloader ): x = x . to_global ( placement = PLACEMENT , sbp = S0 ) y = y . to_global ( placement = PLACEMENT , sbp = S0 ) # Compute prediction error pred = model ( x ) loss = loss_fn ( pred , y ) # Backpropagation optimizer . zero_grad () loss . backward () optimizer . step () current = batch * BATCH_SIZE if batch % 5 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u811a\u672c\u7684\u4e0e\u5355\u673a\u5355\u5361\u7684\u8bad\u7ec3\u811a\u672c\u51e0\u4e4e\u662f\u4e00\u6837\u7684\u3002\u5c11\u6570\u7684\u533a\u522b\u5728\u4e8e\u51e0\u884c\u4e0e global tensor \u6709\u5173\u7684\u914d\u7f6e\u4ee3\u7801\u5916\uff0c\u5b83\u4eec\u662f\uff1a \u8bbe\u7f6e placement\uff0c\u8ba9\u8bad\u7ec3\u653e\u7f6e\u5728\u96c6\u7fa4\u7b2c 0\u53f7\u30011\u53f7 GPU \u4e0a\uff1a PLACEMENT = flow . placement ( \"cuda\" , [ 0 , 1 ]) \u6a21\u578b\u5728\u96c6\u7fa4\u4e0a\u505a\u5e7f\u64ad model = model . to_global ( placement = PLACEMENT , sbp = B ) \u6570\u636e\u5728\u96c6\u7fa4\u4e0a\u6309 split(0) \u505a\u5207\u5206\uff1a x = x . to_global ( placement = PLACEMENT , sbp = S0 ) y = y . to_global ( placement = PLACEMENT , sbp = S0 ) \u8fd9\u6837\uff0c\u6309\u7167 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u4e2d\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5c31\u901a\u8fc7\u5bf9\u6570\u636e\u8fdb\u884c split(0) \u5207\u5206\uff0c\u5bf9\u6a21\u578b\u8fdb\u884c\u5e7f\u64ad\uff0c\u8fdb\u884c\u4e86\u5206\u5e03\u5f0f\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u3002","title":"\u901a\u8fc7\u8bbe\u7f6e SBP \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3"},{"location":"parallelism/05_ddp.html#distributeddataparallel","text":"\u53ef\u4ee5\u7528\u4ee5\u4e0b\u547d\u4ee4\u5feb\u901f\u4f53\u9a8c oneflow.nn.parallel.DistributedDataParallel \u505a\u6570\u636e\u5e76\u884c\uff1a wget https://docs.oneflow.org/master/code/parallelism/ddp_train.py #\u4e0b\u8f7d\u811a\u672c python3 -m oneflow.distributed.launch --nproc_per_node 2 ./ddp_train.py #\u6570\u636e\u5e76\u884c\u8bad\u7ec3 \u8f93\u51fa\uff1a 50/500 loss:0.004111831542104483 50/500 loss:0.00025336415274068713 ... 500/500 loss:6.184563972055912e-11 500/500 loss:4.547473508864641e-12 w:tensor([[2.0000], [3.0000]], device='cuda:1', dtype=oneflow.float32, grad_fn=<accumulate_grad>) w:tensor([[2.0000], [3.0000]], device='cuda:0', dtype=oneflow.float32, grad_fn=<accumulate_grad>) \u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u53ef\u4ee5\u5c55\u5f00\u4ee5\u4e0a\u8fd0\u884c\u811a\u672c\u7684\u4ee3\u7801\u3002 Code import oneflow as flow from oneflow.nn.parallel import DistributedDataParallel as ddp train_x = [ flow . tensor ([[ 1 , 2 ], [ 2 , 3 ]], dtype = flow . float32 ), flow . tensor ([[ 4 , 6 ], [ 3 , 1 ]], dtype = flow . float32 ), ] train_y = [ flow . tensor ([[ 8 ], [ 13 ]], dtype = flow . float32 ), flow . tensor ([[ 26 ], [ 9 ]], dtype = flow . float32 ), ] class Model ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . lr = 0.01 self . iter_count = 500 self . w = flow . nn . Parameter ( flow . tensor ([[ 0 ], [ 0 ]], dtype = flow . float32 )) def forward ( self , x ): x = flow . matmul ( x , self . w ) return x m = Model () . to ( \"cuda\" ) m = ddp ( m ) loss = flow . nn . MSELoss ( reduction = \"sum\" ) optimizer = flow . optim . SGD ( m . parameters (), m . lr ) for i in range ( 0 , m . iter_count ): rank = flow . env . get_rank () x = train_x [ rank ] . to ( \"cuda\" ) y = train_y [ rank ] . to ( \"cuda\" ) y_pred = m ( x ) l = loss ( y_pred , y ) if ( i + 1 ) % 50 == 0 : print ( f \" { i + 1 } / { m . iter_count } loss: { l } \" ) optimizer . zero_grad () l . backward () optimizer . step () print ( f \" \\n w: { m . w } \" ) \u53ef\u4ee5\u53d1\u73b0\uff0c\u5b83\u4e0e\u5355\u673a\u5355\u5361\u811a\u672c\u7684\u4e0d\u540c\u53ea\u67092\u4e2a\uff1a \u4f7f\u7528 DistributedDataParallel \u5904\u7406\u4e00\u4e0b module \u5bf9\u8c61\uff08 m = ddp(m) ) \u4f7f\u7528 get_rank \u83b7\u53d6\u5f53\u524d\u8bbe\u5907\u7f16\u53f7\uff0c\u5e76\u9488\u5bf9\u8bbe\u5907\u5206\u53d1\u6570\u636e \u7136\u540e\u4f7f\u7528 launcher \u542f\u52a8\u811a\u672c\uff0c\u628a\u5269\u4e0b\u7684\u4e00\u5207\u90fd\u4ea4\u7ed9 OneFlow\uff0c\u8ba9\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u50cf\u5355\u673a\u5355\u5361\u8bad\u7ec3\u4e00\u6837\u7b80\u5355\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 ./ddp_train.py","title":"\u4f7f\u7528 DistributedDataParallel \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3"},{"location":"parallelism/05_ddp.html#distributedsampler","text":"\u672c\u6587\u4e3a\u4e86\u7b80\u5316\u95ee\u9898\uff0c\u7a81\u51fa DistributedDataParallel \uff0c\u56e0\u6b64\u4f7f\u7528\u7684\u6570\u636e\u662f\u624b\u5de5\u5206\u53d1\u7684\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 DistributedSampler \u914d\u5408\u6570\u636e\u5e76\u884c\u4f7f\u7528\u3002 DistributedSampler \u4f1a\u5728\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u5b9e\u4f8b\u5316 Dataloader\uff0c\u6bcf\u4e2a Dataloader \u5b9e\u4f8b\u4f1a\u52a0\u8f7d\u5b8c\u6574\u6570\u636e\u7684\u4e00\u90e8\u5206\uff0c\u81ea\u52a8\u5b8c\u6210\u6570\u636e\u7684\u5206\u53d1\u3002","title":"DistributedSampler"},{"location":"parallelism/06_pipeline.html","text":"\u6d41\u6c34\u5e76\u884c\u8bad\u7ec3 \u00b6 \u5728 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u4e00\u6587\u4e2d\u4ecb\u7ecd\u4e86\u6d41\u6c34\u5e76\u884c\u7684\u7279\u70b9\u3002 \u5728 OneFlow \u7684 \u5168\u5c40\u89c6\u89d2 \u4e0b\uff0c\u901a\u8fc7\u7b80\u5355\u7684\u8bbe\u7f6e Tensor \u7684 placement \u5c5e\u6027\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6d41\u6c34\u5e76\u884c\u3002 \u4ee5\u4e0b\u4ee3\u7801\u662f\u7b80\u5355\u7684\u793a\u8303\uff0c\u5b83\u5c06 \u5feb\u901f\u4e0a\u624b \u4e2d\u7684\u7f51\u7edc\uff0c\u4ee5\u6d41\u6c34\u5e76\u884c\u7684\u65b9\u5f0f\u8fd0\u884c\u3002\u524d\u51e0\u5c42\u7684 Module nn.Flatten \u3001 nn.Linear(28*28, 512) \u3001 nn.ReLU() \u5728 GPU0 \u4e0a\u8fd0\u884c\uff1b\u5269\u4f59\u7684\u7f51\u7edc\u90e8\u5206\u5728 GPU1 \u4e0a\u8fd0\u884c\u3002 Code import oneflow as flow BATCH_SIZE = 16 BROADCAST = [ flow . sbp . broadcast ] P0 = flow . placement ( \"cuda\" , ranks = [ 0 ]) P1 = flow . placement ( \"cuda\" , ranks = [ 1 ]) class Stage0Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . flatten = flow . nn . Flatten () self . linear0 = flow . nn . Linear ( 28 * 28 , 512 ) self . relu0 = flow . nn . ReLU () def forward ( self , x ): out = self . flatten ( x ) out = self . linear0 ( out ) out = self . relu0 ( out ) return out class Stage1Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . linear1 = flow . nn . Linear ( 512 , 512 ) self . relu1 = flow . nn . ReLU () self . linear2 = flow . nn . Linear ( 512 , 10 ) self . relu2 = flow . nn . ReLU () def forward ( self , x ): out = self . linear1 ( x ) out = self . relu1 ( out ) out = self . linear2 ( out ) out = self . relu2 ( out ) return out class PipelineModule ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . m_stage0 = Stage0Module () self . m_stage1 = Stage1Module () self . m_stage0 . to_global ( placement = P0 , sbp = BROADCAST ) self . m_stage1 . to_global ( placement = P1 , sbp = BROADCAST ) def forward ( self , x ): out_stage0 = self . m_stage0 ( x ) in_stage1 = out_stage0 . to_global ( placement = P1 , sbp = BROADCAST ) out_stage1 = self . m_stage1 ( in_stage1 ) return out_stage1 module_pipeline = PipelineModule () sgd = flow . optim . SGD ( module_pipeline . parameters (), lr = 0.001 ) class PipelineGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . module_pipeline = module_pipeline self . module_pipeline . m_stage0 . config . stage_id = 0 self . module_pipeline . m_stage1 . config . stage_id = 1 self . loss_fn = flow . nn . CrossEntropyLoss () self . config . set_gradient_accumulation_steps ( 2 ) self . add_optimizer ( sgd ) def build ( self , x , y ): out = self . module_pipeline ( x ) loss = self . loss_fn ( out , y ) loss . backward () return loss graph_pipeline = PipelineGraph () x = flow . randn ( BATCH_SIZE , 1 , 28 , 28 ) x = x . to_global ( P0 , BROADCAST ) y = flow . randint ( 0 , 10 , ( BATCH_SIZE ,)) y = y . to_global ( P1 , BROADCAST ) for i in range ( 20 ): loss = graph_pipeline ( x , y ) print ( loss . to_local ()) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u4fdd\u5b58\u4e3a\u811a\u672c\uff08\u5982 pipeline.py \uff09\u540e\uff0c\u4f7f\u7528 launch \u6a21\u5757\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3 \uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 ./pipeline.py \u4ee3\u7801\u89e3\u8bfb \u00b6 \u8bbe\u7f6e placement \u4e0e sbp \u00b6 \u5c06\u9700\u8981\u4f7f\u7528\u7684 placement \u4e0e sbp \u8bbe\u7f6e\u63d0\u524d\u51c6\u5907\u597d\uff1a BROADCAST = [ flow . sbp . broadcast ] P0 = flow . placement ( \"cuda\" , ranks = [ 0 ]) P1 = flow . placement ( \"cuda\" , ranks = [ 1 ]) P0 \u3001 P1 \u5206\u522b\u4ee3\u8868\u96c6\u7fa4\u7684\u7b2c 0 \u4e2a GPU \u548c\u7b2c 1 \u4e2a GPU\u3002 \u901a\u8fc7\u8c03\u7528 nn.Module.to_global \u6216 Tensor.to_global \u5c31\u53ef\u4ee5\u5c06\u6a21\u578b\u6216\u5f20\u91cf\u5206\u914d\u5230\u6307\u5b9a\u7684\u8ba1\u7b97\u8bbe\u5907\u4e0a\u8fd0\u884c\uff0c\u5c06\u4e00\u4e2a\u7f51\u7edc\u62c6\u5206\u4e3a\u591a\u4e2a\u6d41\u6c34\u9636\u6bb5\uff08stage\uff09\u3002 \u5728\u6b64\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a PipelineModule \u4e13\u95e8\u8bbe\u7f6e\u5404\u9636\u6bb5\u7684\u6d41\u6c34\u3002 class PipelineModule ( flow . nn . Module ): def __init__ ( self ): #... self . m_stage0 . to_global ( placement = P0 , sbp = BROADCAST ) self . m_stage1 . to_global ( placement = P1 , sbp = BROADCAST ) def forward ( self , x ): out_stage0 = self . m_stage0 ( x ) in_stage1 = out_stage0 . to_global ( placement = P1 , sbp = BROADCAST ) out_stage1 = self . m_stage1 ( in_stage1 ) return out_stage1 Local Tensor \u4e0e Global Tensor \u7684\u8f6c\u6362 \u00b6 \u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u968f\u673a\u751f\u6210\u7684\u6570\u636e\u4f5c\u4e3a\u8f93\u5165\u3002 x = flow . randn ( BATCH_SIZE , 1 , 28 , 28 ) x = x . to_global ( P0 , BROADCAST ) \u5f53\u4f7f\u7528 launch \u6a21\u5757\u542f\u52a8\u8bad\u7ec3\u65f6\uff0c\u56e0\u4e3a\u547d\u4ee4\u884c\u53c2\u6570\u4e3a --nproc_per_node 2 \uff0c launch \u4f1a\u542f\u52a8 2 \u4e2a\u8fdb\u7a0b\u3002\u4e24\u4e2a\u8fdb\u7a0b\u5747\u4e3a\u6267\u884c\u811a\u672c\u4e2d\u7684\u4ee3\u7801\u3002 \u5176\u4e2d x = flow.randn(BATCH_SIZE, 1, 28, 28) \u8fd4\u56de\u7684\u662f Local Tensor\uff08\u53ea\u5728\u672c\u8fdb\u7a0b\u4e2d\u6709\u6548\u7684\u672c\u5730\u6570\u636e\uff09\uff0c\u5f53\u8fd0\u884c x = x.to_global(P0, BROADCAST) \u65f6\uff0cOneFlow \u4f1a\u81ea\u52a8\u5c06\u6240\u6709\u8fdb\u7a0b\u4e2d\u7684 Local Tensor \u6574\u5408\u4e3a Global Tensor\u3002 \u5728\u5b9e\u9645\u8bad\u7ec3\u4e2d\uff0c\u5404\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e5f\u53ef\u4ee5\u52a0\u8f7d\u5c5e\u4e8e\u5404\u81ea\u7684\u672c\u5730\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7 to_global \u5b9e\u73b0 Local Tensor \u5230 Global Tensor \u7684\u8f6c\u5316\u3002 Stage ID \u53ca \u68af\u5ea6\u7d2f\u79ef\u8bbe\u7f6e \u00b6 \u901a\u8fc7\u8bbe\u7f6e Module \u7684 config.stage_id \u5c5e\u6027\uff0c\u8bbe\u7f6e Stage ID\uff0cStage ID \u4ece 0 \u5f00\u59cb\u7f16\u53f7\uff0c\u4f9d\u6b21\u52a01\u3002 \u8c03\u7528 self.config.set_gradient_accumulation_steps \u65b9\u6cd5\uff0c\u8bbe\u7f6e\u68af\u5ea6\u7d2f\u79ef\u7684\u6b65\u957f\u3002 OneFlow \u901a\u8fc7\u8fd9\u4e24\u9879\u914d\u7f6e\uff0c\u83b7\u53d6\u5b9e\u73b0\u6d41\u6c34\u5e76\u884c\u4e2d\u7684 micro batch \u6280\u672f\u6240\u9700\u7684\u4fe1\u606f\u3002 self . module_pipeline . m_stage0 . config . stage_id = 0 self . module_pipeline . m_stage1 . config . stage_id = 1 self . config . set_gradient_accumulation_steps ( 2 )","title":"\u6d41\u6c34\u5e76\u884c\u8bad\u7ec3"},{"location":"parallelism/06_pipeline.html#_1","text":"\u5728 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u4e00\u6587\u4e2d\u4ecb\u7ecd\u4e86\u6d41\u6c34\u5e76\u884c\u7684\u7279\u70b9\u3002 \u5728 OneFlow \u7684 \u5168\u5c40\u89c6\u89d2 \u4e0b\uff0c\u901a\u8fc7\u7b80\u5355\u7684\u8bbe\u7f6e Tensor \u7684 placement \u5c5e\u6027\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6d41\u6c34\u5e76\u884c\u3002 \u4ee5\u4e0b\u4ee3\u7801\u662f\u7b80\u5355\u7684\u793a\u8303\uff0c\u5b83\u5c06 \u5feb\u901f\u4e0a\u624b \u4e2d\u7684\u7f51\u7edc\uff0c\u4ee5\u6d41\u6c34\u5e76\u884c\u7684\u65b9\u5f0f\u8fd0\u884c\u3002\u524d\u51e0\u5c42\u7684 Module nn.Flatten \u3001 nn.Linear(28*28, 512) \u3001 nn.ReLU() \u5728 GPU0 \u4e0a\u8fd0\u884c\uff1b\u5269\u4f59\u7684\u7f51\u7edc\u90e8\u5206\u5728 GPU1 \u4e0a\u8fd0\u884c\u3002 Code import oneflow as flow BATCH_SIZE = 16 BROADCAST = [ flow . sbp . broadcast ] P0 = flow . placement ( \"cuda\" , ranks = [ 0 ]) P1 = flow . placement ( \"cuda\" , ranks = [ 1 ]) class Stage0Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . flatten = flow . nn . Flatten () self . linear0 = flow . nn . Linear ( 28 * 28 , 512 ) self . relu0 = flow . nn . ReLU () def forward ( self , x ): out = self . flatten ( x ) out = self . linear0 ( out ) out = self . relu0 ( out ) return out class Stage1Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . linear1 = flow . nn . Linear ( 512 , 512 ) self . relu1 = flow . nn . ReLU () self . linear2 = flow . nn . Linear ( 512 , 10 ) self . relu2 = flow . nn . ReLU () def forward ( self , x ): out = self . linear1 ( x ) out = self . relu1 ( out ) out = self . linear2 ( out ) out = self . relu2 ( out ) return out class PipelineModule ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . m_stage0 = Stage0Module () self . m_stage1 = Stage1Module () self . m_stage0 . to_global ( placement = P0 , sbp = BROADCAST ) self . m_stage1 . to_global ( placement = P1 , sbp = BROADCAST ) def forward ( self , x ): out_stage0 = self . m_stage0 ( x ) in_stage1 = out_stage0 . to_global ( placement = P1 , sbp = BROADCAST ) out_stage1 = self . m_stage1 ( in_stage1 ) return out_stage1 module_pipeline = PipelineModule () sgd = flow . optim . SGD ( module_pipeline . parameters (), lr = 0.001 ) class PipelineGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . module_pipeline = module_pipeline self . module_pipeline . m_stage0 . config . stage_id = 0 self . module_pipeline . m_stage1 . config . stage_id = 1 self . loss_fn = flow . nn . CrossEntropyLoss () self . config . set_gradient_accumulation_steps ( 2 ) self . add_optimizer ( sgd ) def build ( self , x , y ): out = self . module_pipeline ( x ) loss = self . loss_fn ( out , y ) loss . backward () return loss graph_pipeline = PipelineGraph () x = flow . randn ( BATCH_SIZE , 1 , 28 , 28 ) x = x . to_global ( P0 , BROADCAST ) y = flow . randint ( 0 , 10 , ( BATCH_SIZE ,)) y = y . to_global ( P1 , BROADCAST ) for i in range ( 20 ): loss = graph_pipeline ( x , y ) print ( loss . to_local ()) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u4fdd\u5b58\u4e3a\u811a\u672c\uff08\u5982 pipeline.py \uff09\u540e\uff0c\u4f7f\u7528 launch \u6a21\u5757\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3 \uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 ./pipeline.py","title":"\u6d41\u6c34\u5e76\u884c\u8bad\u7ec3"},{"location":"parallelism/06_pipeline.html#_2","text":"","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"parallelism/06_pipeline.html#placement-sbp","text":"\u5c06\u9700\u8981\u4f7f\u7528\u7684 placement \u4e0e sbp \u8bbe\u7f6e\u63d0\u524d\u51c6\u5907\u597d\uff1a BROADCAST = [ flow . sbp . broadcast ] P0 = flow . placement ( \"cuda\" , ranks = [ 0 ]) P1 = flow . placement ( \"cuda\" , ranks = [ 1 ]) P0 \u3001 P1 \u5206\u522b\u4ee3\u8868\u96c6\u7fa4\u7684\u7b2c 0 \u4e2a GPU \u548c\u7b2c 1 \u4e2a GPU\u3002 \u901a\u8fc7\u8c03\u7528 nn.Module.to_global \u6216 Tensor.to_global \u5c31\u53ef\u4ee5\u5c06\u6a21\u578b\u6216\u5f20\u91cf\u5206\u914d\u5230\u6307\u5b9a\u7684\u8ba1\u7b97\u8bbe\u5907\u4e0a\u8fd0\u884c\uff0c\u5c06\u4e00\u4e2a\u7f51\u7edc\u62c6\u5206\u4e3a\u591a\u4e2a\u6d41\u6c34\u9636\u6bb5\uff08stage\uff09\u3002 \u5728\u6b64\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a PipelineModule \u4e13\u95e8\u8bbe\u7f6e\u5404\u9636\u6bb5\u7684\u6d41\u6c34\u3002 class PipelineModule ( flow . nn . Module ): def __init__ ( self ): #... self . m_stage0 . to_global ( placement = P0 , sbp = BROADCAST ) self . m_stage1 . to_global ( placement = P1 , sbp = BROADCAST ) def forward ( self , x ): out_stage0 = self . m_stage0 ( x ) in_stage1 = out_stage0 . to_global ( placement = P1 , sbp = BROADCAST ) out_stage1 = self . m_stage1 ( in_stage1 ) return out_stage1","title":"\u8bbe\u7f6e placement \u4e0e sbp"},{"location":"parallelism/06_pipeline.html#local-tensor-global-tensor","text":"\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u968f\u673a\u751f\u6210\u7684\u6570\u636e\u4f5c\u4e3a\u8f93\u5165\u3002 x = flow . randn ( BATCH_SIZE , 1 , 28 , 28 ) x = x . to_global ( P0 , BROADCAST ) \u5f53\u4f7f\u7528 launch \u6a21\u5757\u542f\u52a8\u8bad\u7ec3\u65f6\uff0c\u56e0\u4e3a\u547d\u4ee4\u884c\u53c2\u6570\u4e3a --nproc_per_node 2 \uff0c launch \u4f1a\u542f\u52a8 2 \u4e2a\u8fdb\u7a0b\u3002\u4e24\u4e2a\u8fdb\u7a0b\u5747\u4e3a\u6267\u884c\u811a\u672c\u4e2d\u7684\u4ee3\u7801\u3002 \u5176\u4e2d x = flow.randn(BATCH_SIZE, 1, 28, 28) \u8fd4\u56de\u7684\u662f Local Tensor\uff08\u53ea\u5728\u672c\u8fdb\u7a0b\u4e2d\u6709\u6548\u7684\u672c\u5730\u6570\u636e\uff09\uff0c\u5f53\u8fd0\u884c x = x.to_global(P0, BROADCAST) \u65f6\uff0cOneFlow \u4f1a\u81ea\u52a8\u5c06\u6240\u6709\u8fdb\u7a0b\u4e2d\u7684 Local Tensor \u6574\u5408\u4e3a Global Tensor\u3002 \u5728\u5b9e\u9645\u8bad\u7ec3\u4e2d\uff0c\u5404\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e5f\u53ef\u4ee5\u52a0\u8f7d\u5c5e\u4e8e\u5404\u81ea\u7684\u672c\u5730\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7 to_global \u5b9e\u73b0 Local Tensor \u5230 Global Tensor \u7684\u8f6c\u5316\u3002","title":"Local Tensor \u4e0e Global Tensor \u7684\u8f6c\u6362"},{"location":"parallelism/06_pipeline.html#stage-id","text":"\u901a\u8fc7\u8bbe\u7f6e Module \u7684 config.stage_id \u5c5e\u6027\uff0c\u8bbe\u7f6e Stage ID\uff0cStage ID \u4ece 0 \u5f00\u59cb\u7f16\u53f7\uff0c\u4f9d\u6b21\u52a01\u3002 \u8c03\u7528 self.config.set_gradient_accumulation_steps \u65b9\u6cd5\uff0c\u8bbe\u7f6e\u68af\u5ea6\u7d2f\u79ef\u7684\u6b65\u957f\u3002 OneFlow \u901a\u8fc7\u8fd9\u4e24\u9879\u914d\u7f6e\uff0c\u83b7\u53d6\u5b9e\u73b0\u6d41\u6c34\u5e76\u884c\u4e2d\u7684 micro batch \u6280\u672f\u6240\u9700\u7684\u4fe1\u606f\u3002 self . module_pipeline . m_stage0 . config . stage_id = 0 self . module_pipeline . m_stage1 . config . stage_id = 1 self . config . set_gradient_accumulation_steps ( 2 )","title":"Stage ID \u53ca \u68af\u5ea6\u7d2f\u79ef\u8bbe\u7f6e"},{"location":"single_client/basics_topics/async_get.html","text":"\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u00b6 \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 OneFlow \u4e2d\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u4e3b\u8981\u5305\u62ec\uff1a \u5982\u4f55\u540c\u6b65\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u5982\u4f55\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u5728 OneFlow \u4e2d\uff0c\u88ab @flow.global_function \u88c5\u9970\u5668\u4fee\u9970\u7684\u51fd\u6570\u79f0\u4e3a\u4f5c\u4e1a\u51fd\u6570\uff0c\u4f5c\u4e1a\u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u8bad\u7ec3\u6216\u9884\u6d4b\u3002\u901a\u8fc7\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u540c\u6b65\u6216\u8005\u5f02\u6b65\u7684\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd0\u7b97\u7ed3\u679c\u3002 \u540c\u6b65/\u5f02\u6b65\u5bf9\u6bd4 \u00b6 \u540c\u6b65 \u5728\u540c\u6b65\u8bad\u7ec3\u4e2d\uff0c\u53ea\u6709\u4e0a\u4e00\u4e2a step \u7684\u5de5\u4f5c\u5b8c\u6210\u540e\uff0c\u624d\u80fd\u5f00\u59cb\u4e0b\u4e00\u4e2a step \u7684\u8bad\u7ec3\u3002 \u5f02\u6b65 \u5728\u5f02\u6b65\u8bad\u7ec3\u4e2d\uff0c\u4f5c\u4e1a\u51fd\u6570\u7684\u6267\u884c\u662f\u5e76\u53d1\u7684\uff0c\u67d0\u4e2a step \u4e0d\u5fc5\u7b49\u4e0a\u4e00\u4e2a step \u7684\u4f5c\u4e1a\u7ed3\u675f\uff0c\u800c\u662f\u53ef\u4ee5\u63d0\u524d\u8fdb\u884c\u6570\u636e\u52a0\u8f7d\u548c\u9884\u5904\u7406\u3002 \u901a\u8fc7\u4ee5\u4e0a\u5bf9\u6bd4\u53ef\u77e5\uff0c\u5728 OneFlow \u4e2d\u4f7f\u7528\u5f02\u6b65\u6267\u884c\u4f5c\u4e1a\u51fd\u6570\uff0c\u6709\u6548\u5229\u7528\u4e86\u8ba1\u7b97\u673a\u8d44\u6e90\uff0c\u5c24\u5176\u662f\u5728\u6570\u636e\u96c6\u89c4\u6a21\u5de8\u5927\u7684\u60c5\u51b5\u4e0b\uff0c \u5f00\u542f\u5f02\u6b65\u6267\u884c\u80fd\u6709\u6548\u7f29\u77ed\u6570\u636e\u7684\u52a0\u8f7d\u548c\u51c6\u5907\u65f6\u95f4\uff0c\u52a0\u5feb\u6a21\u578b\u8bad\u7ec3 \u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5206\u522b\u8bb2\u89e3\u5982\u4f55\u7528\u540c\u6b65\u3001\u5f02\u6b65\u7684\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u5e76\u5728\u6587\u7ae0\u7684\u6700\u540e\u63d0\u4f9b\u5b8c\u6574\u4ee3\u7801\u7684\u94fe\u63a5\u3002 \u5b83\u4eec\u7684\u8981\u70b9\u5728\u4e8e\uff1a \u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u901a\u8fc7\u6ce8\u89e3\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u544a\u77e5 OneFlow \u662f\u540c\u6b65\u8fd8\u662f\u5f02\u6b65\u6a21\u5f0f \u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5728 flow.typing \u6a21\u5757\u4e2d\u9009\u62e9 \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u540c\u6b65/\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u7684\u5f62\u5f0f\u7565\u6709\u4e0d\u540c \u540c\u6b65\u83b7\u53d6\u7ed3\u679c \u00b6 \u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u901a\u8fc7\u6ce8\u89e3\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\u4e3a flow.typing.Numpy \u65f6\uff0c\u4f5c\u4e1a\u51fd\u6570\u4e3a\u4e00\u4e2a\u540c\u6b65\u4f5c\u4e1a\u51fd\u6570\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u6211\u4eec\u5b9a\u4e49\u4e86\u5982\u4e0b\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u4ee5\u4e0a\u4ee3\u7801\uff0c\u901a\u8fc7 python \u6ce8\u89e3\u7684\u65b9\u5f0f\u544a\u77e5 OneFlow \uff0c\u8fd4\u56de\u7684\u662f tp.Numpy \uff08 tp \u662f \u811a\u672c\u4e2d oneflow.typing \u7684\u522b\u540d\uff09\u7c7b\u578b\uff0c\u5b83\u5bf9\u5e94\u4e86 NumPy \u4e2d\u7684 ndarray \u3002 \u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u4f5c\u4e1a\u51fd\u6570\u4f1a\u76f4\u63a5\u8fd4\u56de ndarray \u5bf9\u8c61\uff1a loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u4ece\u4ee5\u4e0a\u793a\u4f8b\u4e2d\uff0c\u5e94\u8be5\u6ce8\u610f\u5230\uff1a \u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u7684\u5bf9\u8c61(\u4e0a\u6587\u4e2d\u7684 loss ) \u53ea\u662f\u6570\u636e\u5360\u4f4d\u7b26\uff0c\u7528\u4e8e\u6784\u5efa\u8ba1\u7b97\u56fe\uff0c\u5e76\u6ca1\u6709\u771f\u5b9e\u6570\u636e\u3002 \u901a\u8fc7\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a flow.typing.Numpy \uff0c\u53ef\u4ee5\u544a\u77e5 OneFlow \u8c03\u7528\u6b64\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u8fd4\u56de\u7684\u771f\u5b9e\u6570\u636e\u7c7b\u578b\u4e3a NumPy ndarray \u5bf9\u8c61 \u901a\u8fc7\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 train_job(images, labels) \u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd0\u884c\u8ba1\u7b97\u7ed3\u679c\uff0c\u7c7b\u578b\u4e3a flow.typing.Numpy \u5bf9\u5e94\u7684 ndarray \u5bf9\u8c61\u3002 flow.typing \u4e2d\u7684\u6570\u636e\u7c7b\u578b \u00b6 flow.typing \u4e2d\u5305\u542b\u4e86\u4f5c\u4e1a\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4e0a\u6587\u4e2d\u51fa\u73b0\u7684 flow.typing.Numpy \u53ea\u662f\u5176\u4e2d\u4e00\u79cd\uff0c\u73b0\u5c06\u5176\u4e2d\u5e38\u7528\u7684\u51e0\u79cd\u7c7b\u578b\u53ca\u5bf9\u5e94\u610f\u4e49\u7f57\u5217\u5982\u4e0b\uff1a flow.typing.Numpy \uff1a\u5bf9\u5e94\u4e86 numpy.ndarray \uff0c\u672c\u6587\u4e3b\u8981\u4ee5 flow.typing.Numpy \u4e3e\u4f8b flow.typing.ListNumpy \uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2a list \u5bb9\u5668\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a numpy.ndarray \u5bf9\u8c61\u3002\u4e0e OneFlow \u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u89c6\u89d2\u6709\u5173\uff0c\u5c06\u5728 \u5206\u5e03\u5f0f\u8bad\u7ec3\u7684 consistent \u4e0e mirrored \u89c6\u89d2 \u4e2d\u770b\u5230\u5176\u4f5c\u7528 flow.typing.ListListNumpy \uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2a list \u5bb9\u5668\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a TensorList \u5bf9\u8c61\uff0cOneFlow \u7684\u67d0\u4e9b\u63a5\u53e3\u9700\u8981\u5904\u7406\u6216\u8005\u8fd4\u56de\u591a\u4e2a TensorList \u5bf9\u8c61\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u9605 \u6982\u5ff5\u6e05\u5355 \u53ca\u76f8\u5173 API \u6587\u6863 flow.typing.Callback \uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u7528\u4e8e\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u4e0b\u6587\u4f1a\u4ecb\u7ecd \u6b64\u5916\uff0cOneFlow \u8fd8\u5141\u8bb8\u4f5c\u4e1a\u51fd\u6570\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u4f20\u51fa\u6570\u636e\uff0c\u6709\u5173 ListNumpy \u3001 ListNumpy \u3001 ListListNumpy \u4ee5\u53ca\u5982\u4f55\u7528\u5b57\u5178\u65b9\u5f0f\u4f20\u51fa\u6570\u636e\u7684\u793a\u4f8b\uff0c\u53ef\u4ee5\u53c2\u8003 OneFlow \u7684\u6d4b\u8bd5\u6848\u4f8b \u3002 \u5f02\u6b65\u83b7\u53d6\u7ed3\u679c \u00b6 \u4e00\u822c\u800c\u8a00\uff0c\u91c7\u7528\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u8bad\u7ec3\u7ed3\u679c\u7684\u6548\u7387\u9ad8\u4e8e\u540c\u6b65\u65b9\u5f0f\u3002 \u4ee5\u4e0b\u4ecb\u7ecd\u5982\u4f55\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u5e76\u5904\u7406\u8bad\u7ec3\u7ed3\u679c\u3002 \u5176\u57fa\u672c\u6b65\u9aa4\u5305\u62ec\uff1a \u51c6\u5907\u56de\u8c03\u51fd\u6570\uff1a\u9700\u8981\u901a\u8fc7\u6ce8\u89e3\u7684\u65b9\u5f0f\u6307\u5b9a\u56de\u8c03\u51fd\u6570\u6240\u63a5\u53d7\u7684\u53c2\u6570\uff0c\u5728\u56de\u8c03\u51fd\u6570\u7684\u5185\u90e8\uff0c\u5b9e\u73b0\u5904\u7406\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u503c\u7ed3\u679c\u7684\u903b\u8f91 \u5b9e\u73b0\u4f5c\u4e1a\u51fd\u6570\uff1a\u901a\u8fc7\u6ce8\u89e3\u7684\u65b9\u5f0f\uff0c\u6307\u5b9a flow.typing.Callback \u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u6587\u4f8b\u5b50\u4e2d\u770b\u5230\uff0c\u6211\u4eec\u901a\u8fc7 Callback \u53ef\u4ee5\u6307\u5b9a\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff1a\u5e76\u6ce8\u518c\u4ee5\u4e0a\u7b2c\u4e00\u6b65\u51c6\u5907\u7684\u56de\u8c03\u51fd\u6570 \u4ee5\u4e0a\u4e09\u4e2a\u6b65\u9aa4\u7531 OneFlow \u7684\u7528\u6237\u5b8c\u6210\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u6ce8\u518c\u7684\u56de\u8c03\u51fd\u6570\u4f1a\u88ab OneFlow \u8c03\u7528\uff0c\u5e76\u5c06\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u56de\u8c03\u51fd\u6570\u3002 \u7f16\u5199\u56de\u8c03\u51fd\u6570 \u00b6 \u56de\u8c03\u51fd\u6570\u7684\u539f\u578b\u5982\u4e0b\uff1a def cb_func ( result : T ): #... \u5176\u4e2d\u7684 result \uff0c\u9700\u8981\u901a\u8fc7\u6ce8\u89e3\uff0c\u6307\u5b9a\u5176\u7c7b\u578b T \uff0c\u5373\u4e0a\u6587\u4e2d\u63d0\u5230\u7684 Numpy \u3001 ListNumpy \u7b49\uff0c\u4e5f\u53ef\u4ee5\u662f\u5b83\u4eec\u7684\u590d\u5408\u7c7b\u578b\uff0c\u4e0b\u6587\u6211\u4eec\u5c06\u6709\u5bf9\u5e94\u7684\u5b9e\u4f8b\u3002 \u53c2\u6570 result \u5bf9\u5e94\u4e86\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u56e0\u6b64\u5fc5\u987b\u4e0e\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u503c\u6240\u6ce8\u89e3\u7684\u4e00\u81f4\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Callback [ tp . Numpy ]: # mlp initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"hidden\" , ) logits = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"output\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u6ce8\u89e3 -> tp.Callback[tp.Numpy] \u8868\u793a\u6b64\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a tp.Numpy \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u9700\u8981\u5f02\u6b65\u8c03\u7528\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570\uff0c\u5c31\u5e94\u8be5\u63a5\u53d7\u4e00\u4e2a Numpy \u7c7b\u578b\u7684\u53c2\u6570\uff1a def cb_print_loss ( result : tp . Numpy ): global g_i if g_i % 20 == 0 : print ( result . mean ()) g_i += 1 \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e3a\uff1a @flow . global_function ( type = \"predict\" ) def eval_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Callback [ Tuple [ tp . Numpy , tp . Numpy ]]: with flow . scope . placement ( \"cpu\" , \"0:0\" ): logits = mlp ( images ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) return ( labels , logits ) \u5176\u4e2d -> tp.Callback[Tuple[tp.Numpy, tp.Numpy]] \u8868\u793a\u6b64\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542b2\u4e2a\u5143\u7d20\u7684 tuple \uff0c\u4e14\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f tp.Numpy \u7c7b\u578b\uff0c\u5e76\u4e14\u4f5c\u4e1a\u51fd\u6570\u9700\u8981\u5f02\u6b65\u8c03\u7528\u3002 \u90a3\u4e48\uff0c\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u6ce8\u89e3\u5e94\u8be5\u4e3a\uff1a g_total = 0 g_correct = 0 def acc ( arguments : Tuple [ tp . Numpy , tp . Numpy ]): global g_total global g_correct labels = arguments [ 0 ] logits = arguments [ 1 ] predictions = np . argmax ( logits , 1 ) right_count = np . sum ( predictions == labels ) g_total += labels . shape [ 0 ] g_correct += right_count arguments \u5bf9\u5e94\u4e86\u4ee5\u4e0a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002 \u6ce8\u518c\u56de\u8c03\u51fd\u6570 \u00b6 \u5f53\u6211\u4eec\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a Callback \u5bf9\u8c61\uff0c\u6211\u4eec\u5c06\u51c6\u5907\u597d\u7684\u56de\u8c03\u51fd\u6570\u4f20\u9012\u7ed9\u5b83\uff0c\u5c31\u5b8c\u6210\u4e86\u6ce8\u518c\u3002 OneFlow \u4f1a\u5728\u83b7\u53d6\u5230\u8bad\u7ec3\u7ed3\u679c\u65f6\uff0c\u81ea\u52a8\u8c03\u7528\u6ce8\u518c\u7684\u56de\u8c03\u3002 callbacker = train_job ( images , labels ) callbacker ( cb_print_loss ) \u4e0d\u8fc7\u4ee5\u4e0a\u7684\u5199\u6cd5\u6bd4\u8f83\u5197\u4f59\uff0c\u63a8\u8350\u4f7f\u7528\uff1a train_job ( images , labels )( cb_print_loss ) \u5b8c\u6574\u4ee3\u7801 \u00b6 \u540c\u6b65\u83b7\u53d6\u4e00\u4e2a\u7ed3\u679c \u00b6 \u5728\u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528\u4e00\u4e2a LeNet \u7f51\u7edc\uff0c\u901a\u8fc7\u540c\u6b65\u65b9\u5f0f\u83b7\u53d6\u552f\u4e00\u7684\u8fd4\u56de\u7ed3\u679c loss \uff0c\u5e76\u6bcf\u969420\u8f6e\u6253\u5370\u4e00\u6b21 loss.mean() \u3002 \u4ee3\u7801\u94fe\u63a5\uff1a synchronize_single_job.py \u8fd0\u884c\uff1a wget https://docs.oneflow.org/master/code/basics_topics/synchronize_single_job.py python3 synchronize_single_job.py \u4f1a\u6709\u7c7b\u4f3c\u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz 7.3258467 2.1435719 1.1712438 0.7531896 ... ... model saved \u540c\u6b65\u83b7\u53d6\u591a\u4e2a\u8fd4\u56de\u7ed3\u679c \u00b6 \u5728\u672c\u4f8b\u4e2d\uff0c\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a tuple \uff0c\u6211\u4eec\u901a\u8fc7\u540c\u6b65\u65b9\u5f0f\u83b7\u53d6 tuple \u4e2d labels \u4e0e logits \uff0c\u5e76\u5bf9\u4e0a\u4f8b\u4e2d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u8bc4\u4f30\uff0c\u8f93\u51fa\u51c6\u786e\u7387\u3002 \u4ee3\u7801\u94fe\u63a5\uff1a synchronize_batch_job.py \u5176\u4e2d\uff0c\u9884\u8bad\u7ec3\u6a21\u578b\u6587\u4ef6\u53ef\u4ee5\u70b9\u6b64\u5904\u4e0b\u8f7d\uff1a lenet_models_1.zip \u8fd0\u884c\uff1a wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/quick_start/lenet_models_1.zip unzip lenet_models_1.zip wget https://docs.oneflow.org/master/code/basics_topics/synchronize_batch_job.py python3 synchronize_batch_job.py \u4f1a\u6709\u8f93\u51fa\uff1a accuracy: 99.3% \u5f02\u6b65\u83b7\u53d6\u4e00\u4e2a\u8fd4\u56de\u7ed3\u679c \u00b6 \u5728\u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528 mlp \u8bad\u7ec3\uff0c\u901a\u8fc7\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u552f\u4e00\u7684\u8fd4\u56de\u7ed3\u679c loss \uff0c\u5e76\u6bcf\u969420\u8f6e\u6253\u5370\u4e00\u6b21 loss.mean() \u3002 \u4ee3\u7801\u4e0b\u8f7d\uff1a async_single_job.py \u8fd0\u884c\uff1a wget https://docs.oneflow.org/master/code/basics_topics/async_single_job.py python3 async_single_job.py \u4f1a\u6709\u7c7b\u4f3c\u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz 3.0865736 0.8949808 0.47858357 0.3486296 ... \u5f02\u6b65\u83b7\u53d6\u591a\u4e2a\u8fd4\u56de\u7ed3\u679c \u00b6 \u5728\u4ee5\u4e0b\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u591a\u4e2a\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u5bf9\u4e0a\u4f8b\u4e2d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u8bc4\u4f30\uff0c\u8f93\u51fa\u51c6\u786e\u7387\u3002 \u4ee3\u7801\u4e0b\u8f7d\uff1a async_batch_job.py \u5176\u4e2d\uff0c\u9884\u8bad\u7ec3\u6a21\u578b\u6587\u4ef6\u53ef\u4ee5\u70b9\u6b64\u5904\u4e0b\u8f7d\uff1a mlp_models_1.zip wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/basics_topics/mlp_models_1.zip unzip mlp_models_1.zip wget https://docs.oneflow.org/master/code/basics_topics/async_batch_job.py python3 async_batch_job.py \u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz accuracy: 97.6%","title":"\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c"},{"location":"single_client/basics_topics/async_get.html#_1","text":"\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 OneFlow \u4e2d\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u4e3b\u8981\u5305\u62ec\uff1a \u5982\u4f55\u540c\u6b65\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u5982\u4f55\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u5728 OneFlow \u4e2d\uff0c\u88ab @flow.global_function \u88c5\u9970\u5668\u4fee\u9970\u7684\u51fd\u6570\u79f0\u4e3a\u4f5c\u4e1a\u51fd\u6570\uff0c\u4f5c\u4e1a\u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u8bad\u7ec3\u6216\u9884\u6d4b\u3002\u901a\u8fc7\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u540c\u6b65\u6216\u8005\u5f02\u6b65\u7684\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd0\u7b97\u7ed3\u679c\u3002","title":"\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c"},{"location":"single_client/basics_topics/async_get.html#_2","text":"\u540c\u6b65 \u5728\u540c\u6b65\u8bad\u7ec3\u4e2d\uff0c\u53ea\u6709\u4e0a\u4e00\u4e2a step \u7684\u5de5\u4f5c\u5b8c\u6210\u540e\uff0c\u624d\u80fd\u5f00\u59cb\u4e0b\u4e00\u4e2a step \u7684\u8bad\u7ec3\u3002 \u5f02\u6b65 \u5728\u5f02\u6b65\u8bad\u7ec3\u4e2d\uff0c\u4f5c\u4e1a\u51fd\u6570\u7684\u6267\u884c\u662f\u5e76\u53d1\u7684\uff0c\u67d0\u4e2a step \u4e0d\u5fc5\u7b49\u4e0a\u4e00\u4e2a step \u7684\u4f5c\u4e1a\u7ed3\u675f\uff0c\u800c\u662f\u53ef\u4ee5\u63d0\u524d\u8fdb\u884c\u6570\u636e\u52a0\u8f7d\u548c\u9884\u5904\u7406\u3002 \u901a\u8fc7\u4ee5\u4e0a\u5bf9\u6bd4\u53ef\u77e5\uff0c\u5728 OneFlow \u4e2d\u4f7f\u7528\u5f02\u6b65\u6267\u884c\u4f5c\u4e1a\u51fd\u6570\uff0c\u6709\u6548\u5229\u7528\u4e86\u8ba1\u7b97\u673a\u8d44\u6e90\uff0c\u5c24\u5176\u662f\u5728\u6570\u636e\u96c6\u89c4\u6a21\u5de8\u5927\u7684\u60c5\u51b5\u4e0b\uff0c \u5f00\u542f\u5f02\u6b65\u6267\u884c\u80fd\u6709\u6548\u7f29\u77ed\u6570\u636e\u7684\u52a0\u8f7d\u548c\u51c6\u5907\u65f6\u95f4\uff0c\u52a0\u5feb\u6a21\u578b\u8bad\u7ec3 \u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5206\u522b\u8bb2\u89e3\u5982\u4f55\u7528\u540c\u6b65\u3001\u5f02\u6b65\u7684\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u5e76\u5728\u6587\u7ae0\u7684\u6700\u540e\u63d0\u4f9b\u5b8c\u6574\u4ee3\u7801\u7684\u94fe\u63a5\u3002 \u5b83\u4eec\u7684\u8981\u70b9\u5728\u4e8e\uff1a \u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u901a\u8fc7\u6ce8\u89e3\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u544a\u77e5 OneFlow \u662f\u540c\u6b65\u8fd8\u662f\u5f02\u6b65\u6a21\u5f0f \u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5728 flow.typing \u6a21\u5757\u4e2d\u9009\u62e9 \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u540c\u6b65/\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u7684\u5f62\u5f0f\u7565\u6709\u4e0d\u540c","title":"\u540c\u6b65/\u5f02\u6b65\u5bf9\u6bd4"},{"location":"single_client/basics_topics/async_get.html#_3","text":"\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u901a\u8fc7\u6ce8\u89e3\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\u4e3a flow.typing.Numpy \u65f6\uff0c\u4f5c\u4e1a\u51fd\u6570\u4e3a\u4e00\u4e2a\u540c\u6b65\u4f5c\u4e1a\u51fd\u6570\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u6211\u4eec\u5b9a\u4e49\u4e86\u5982\u4e0b\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u4ee5\u4e0a\u4ee3\u7801\uff0c\u901a\u8fc7 python \u6ce8\u89e3\u7684\u65b9\u5f0f\u544a\u77e5 OneFlow \uff0c\u8fd4\u56de\u7684\u662f tp.Numpy \uff08 tp \u662f \u811a\u672c\u4e2d oneflow.typing \u7684\u522b\u540d\uff09\u7c7b\u578b\uff0c\u5b83\u5bf9\u5e94\u4e86 NumPy \u4e2d\u7684 ndarray \u3002 \u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u4f5c\u4e1a\u51fd\u6570\u4f1a\u76f4\u63a5\u8fd4\u56de ndarray \u5bf9\u8c61\uff1a loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u4ece\u4ee5\u4e0a\u793a\u4f8b\u4e2d\uff0c\u5e94\u8be5\u6ce8\u610f\u5230\uff1a \u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u7684\u5bf9\u8c61(\u4e0a\u6587\u4e2d\u7684 loss ) \u53ea\u662f\u6570\u636e\u5360\u4f4d\u7b26\uff0c\u7528\u4e8e\u6784\u5efa\u8ba1\u7b97\u56fe\uff0c\u5e76\u6ca1\u6709\u771f\u5b9e\u6570\u636e\u3002 \u901a\u8fc7\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a flow.typing.Numpy \uff0c\u53ef\u4ee5\u544a\u77e5 OneFlow \u8c03\u7528\u6b64\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u8fd4\u56de\u7684\u771f\u5b9e\u6570\u636e\u7c7b\u578b\u4e3a NumPy ndarray \u5bf9\u8c61 \u901a\u8fc7\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 train_job(images, labels) \u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd0\u884c\u8ba1\u7b97\u7ed3\u679c\uff0c\u7c7b\u578b\u4e3a flow.typing.Numpy \u5bf9\u5e94\u7684 ndarray \u5bf9\u8c61\u3002","title":"\u540c\u6b65\u83b7\u53d6\u7ed3\u679c"},{"location":"single_client/basics_topics/async_get.html#flowtyping","text":"flow.typing \u4e2d\u5305\u542b\u4e86\u4f5c\u4e1a\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4e0a\u6587\u4e2d\u51fa\u73b0\u7684 flow.typing.Numpy \u53ea\u662f\u5176\u4e2d\u4e00\u79cd\uff0c\u73b0\u5c06\u5176\u4e2d\u5e38\u7528\u7684\u51e0\u79cd\u7c7b\u578b\u53ca\u5bf9\u5e94\u610f\u4e49\u7f57\u5217\u5982\u4e0b\uff1a flow.typing.Numpy \uff1a\u5bf9\u5e94\u4e86 numpy.ndarray \uff0c\u672c\u6587\u4e3b\u8981\u4ee5 flow.typing.Numpy \u4e3e\u4f8b flow.typing.ListNumpy \uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2a list \u5bb9\u5668\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a numpy.ndarray \u5bf9\u8c61\u3002\u4e0e OneFlow \u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u89c6\u89d2\u6709\u5173\uff0c\u5c06\u5728 \u5206\u5e03\u5f0f\u8bad\u7ec3\u7684 consistent \u4e0e mirrored \u89c6\u89d2 \u4e2d\u770b\u5230\u5176\u4f5c\u7528 flow.typing.ListListNumpy \uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2a list \u5bb9\u5668\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a TensorList \u5bf9\u8c61\uff0cOneFlow \u7684\u67d0\u4e9b\u63a5\u53e3\u9700\u8981\u5904\u7406\u6216\u8005\u8fd4\u56de\u591a\u4e2a TensorList \u5bf9\u8c61\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u9605 \u6982\u5ff5\u6e05\u5355 \u53ca\u76f8\u5173 API \u6587\u6863 flow.typing.Callback \uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u7528\u4e8e\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u4e0b\u6587\u4f1a\u4ecb\u7ecd \u6b64\u5916\uff0cOneFlow \u8fd8\u5141\u8bb8\u4f5c\u4e1a\u51fd\u6570\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u4f20\u51fa\u6570\u636e\uff0c\u6709\u5173 ListNumpy \u3001 ListNumpy \u3001 ListListNumpy \u4ee5\u53ca\u5982\u4f55\u7528\u5b57\u5178\u65b9\u5f0f\u4f20\u51fa\u6570\u636e\u7684\u793a\u4f8b\uff0c\u53ef\u4ee5\u53c2\u8003 OneFlow \u7684\u6d4b\u8bd5\u6848\u4f8b \u3002","title":"flow.typing \u4e2d\u7684\u6570\u636e\u7c7b\u578b"},{"location":"single_client/basics_topics/async_get.html#_4","text":"\u4e00\u822c\u800c\u8a00\uff0c\u91c7\u7528\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u8bad\u7ec3\u7ed3\u679c\u7684\u6548\u7387\u9ad8\u4e8e\u540c\u6b65\u65b9\u5f0f\u3002 \u4ee5\u4e0b\u4ecb\u7ecd\u5982\u4f55\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u5e76\u5904\u7406\u8bad\u7ec3\u7ed3\u679c\u3002 \u5176\u57fa\u672c\u6b65\u9aa4\u5305\u62ec\uff1a \u51c6\u5907\u56de\u8c03\u51fd\u6570\uff1a\u9700\u8981\u901a\u8fc7\u6ce8\u89e3\u7684\u65b9\u5f0f\u6307\u5b9a\u56de\u8c03\u51fd\u6570\u6240\u63a5\u53d7\u7684\u53c2\u6570\uff0c\u5728\u56de\u8c03\u51fd\u6570\u7684\u5185\u90e8\uff0c\u5b9e\u73b0\u5904\u7406\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u503c\u7ed3\u679c\u7684\u903b\u8f91 \u5b9e\u73b0\u4f5c\u4e1a\u51fd\u6570\uff1a\u901a\u8fc7\u6ce8\u89e3\u7684\u65b9\u5f0f\uff0c\u6307\u5b9a flow.typing.Callback \u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u6587\u4f8b\u5b50\u4e2d\u770b\u5230\uff0c\u6211\u4eec\u901a\u8fc7 Callback \u53ef\u4ee5\u6307\u5b9a\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff1a\u5e76\u6ce8\u518c\u4ee5\u4e0a\u7b2c\u4e00\u6b65\u51c6\u5907\u7684\u56de\u8c03\u51fd\u6570 \u4ee5\u4e0a\u4e09\u4e2a\u6b65\u9aa4\u7531 OneFlow \u7684\u7528\u6237\u5b8c\u6210\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u6ce8\u518c\u7684\u56de\u8c03\u51fd\u6570\u4f1a\u88ab OneFlow \u8c03\u7528\uff0c\u5e76\u5c06\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u56de\u8c03\u51fd\u6570\u3002","title":"\u5f02\u6b65\u83b7\u53d6\u7ed3\u679c"},{"location":"single_client/basics_topics/async_get.html#_5","text":"\u56de\u8c03\u51fd\u6570\u7684\u539f\u578b\u5982\u4e0b\uff1a def cb_func ( result : T ): #... \u5176\u4e2d\u7684 result \uff0c\u9700\u8981\u901a\u8fc7\u6ce8\u89e3\uff0c\u6307\u5b9a\u5176\u7c7b\u578b T \uff0c\u5373\u4e0a\u6587\u4e2d\u63d0\u5230\u7684 Numpy \u3001 ListNumpy \u7b49\uff0c\u4e5f\u53ef\u4ee5\u662f\u5b83\u4eec\u7684\u590d\u5408\u7c7b\u578b\uff0c\u4e0b\u6587\u6211\u4eec\u5c06\u6709\u5bf9\u5e94\u7684\u5b9e\u4f8b\u3002 \u53c2\u6570 result \u5bf9\u5e94\u4e86\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u56e0\u6b64\u5fc5\u987b\u4e0e\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u503c\u6240\u6ce8\u89e3\u7684\u4e00\u81f4\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Callback [ tp . Numpy ]: # mlp initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"hidden\" , ) logits = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"output\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u6ce8\u89e3 -> tp.Callback[tp.Numpy] \u8868\u793a\u6b64\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a tp.Numpy \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u9700\u8981\u5f02\u6b65\u8c03\u7528\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570\uff0c\u5c31\u5e94\u8be5\u63a5\u53d7\u4e00\u4e2a Numpy \u7c7b\u578b\u7684\u53c2\u6570\uff1a def cb_print_loss ( result : tp . Numpy ): global g_i if g_i % 20 == 0 : print ( result . mean ()) g_i += 1 \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e3a\uff1a @flow . global_function ( type = \"predict\" ) def eval_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Callback [ Tuple [ tp . Numpy , tp . Numpy ]]: with flow . scope . placement ( \"cpu\" , \"0:0\" ): logits = mlp ( images ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) return ( labels , logits ) \u5176\u4e2d -> tp.Callback[Tuple[tp.Numpy, tp.Numpy]] \u8868\u793a\u6b64\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542b2\u4e2a\u5143\u7d20\u7684 tuple \uff0c\u4e14\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f tp.Numpy \u7c7b\u578b\uff0c\u5e76\u4e14\u4f5c\u4e1a\u51fd\u6570\u9700\u8981\u5f02\u6b65\u8c03\u7528\u3002 \u90a3\u4e48\uff0c\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u6ce8\u89e3\u5e94\u8be5\u4e3a\uff1a g_total = 0 g_correct = 0 def acc ( arguments : Tuple [ tp . Numpy , tp . Numpy ]): global g_total global g_correct labels = arguments [ 0 ] logits = arguments [ 1 ] predictions = np . argmax ( logits , 1 ) right_count = np . sum ( predictions == labels ) g_total += labels . shape [ 0 ] g_correct += right_count arguments \u5bf9\u5e94\u4e86\u4ee5\u4e0a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002","title":"\u7f16\u5199\u56de\u8c03\u51fd\u6570"},{"location":"single_client/basics_topics/async_get.html#_6","text":"\u5f53\u6211\u4eec\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a Callback \u5bf9\u8c61\uff0c\u6211\u4eec\u5c06\u51c6\u5907\u597d\u7684\u56de\u8c03\u51fd\u6570\u4f20\u9012\u7ed9\u5b83\uff0c\u5c31\u5b8c\u6210\u4e86\u6ce8\u518c\u3002 OneFlow \u4f1a\u5728\u83b7\u53d6\u5230\u8bad\u7ec3\u7ed3\u679c\u65f6\uff0c\u81ea\u52a8\u8c03\u7528\u6ce8\u518c\u7684\u56de\u8c03\u3002 callbacker = train_job ( images , labels ) callbacker ( cb_print_loss ) \u4e0d\u8fc7\u4ee5\u4e0a\u7684\u5199\u6cd5\u6bd4\u8f83\u5197\u4f59\uff0c\u63a8\u8350\u4f7f\u7528\uff1a train_job ( images , labels )( cb_print_loss )","title":"\u6ce8\u518c\u56de\u8c03\u51fd\u6570"},{"location":"single_client/basics_topics/async_get.html#_7","text":"","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"single_client/basics_topics/async_get.html#_8","text":"\u5728\u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528\u4e00\u4e2a LeNet \u7f51\u7edc\uff0c\u901a\u8fc7\u540c\u6b65\u65b9\u5f0f\u83b7\u53d6\u552f\u4e00\u7684\u8fd4\u56de\u7ed3\u679c loss \uff0c\u5e76\u6bcf\u969420\u8f6e\u6253\u5370\u4e00\u6b21 loss.mean() \u3002 \u4ee3\u7801\u94fe\u63a5\uff1a synchronize_single_job.py \u8fd0\u884c\uff1a wget https://docs.oneflow.org/master/code/basics_topics/synchronize_single_job.py python3 synchronize_single_job.py \u4f1a\u6709\u7c7b\u4f3c\u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz 7.3258467 2.1435719 1.1712438 0.7531896 ... ... model saved","title":"\u540c\u6b65\u83b7\u53d6\u4e00\u4e2a\u7ed3\u679c"},{"location":"single_client/basics_topics/async_get.html#_9","text":"\u5728\u672c\u4f8b\u4e2d\uff0c\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a tuple \uff0c\u6211\u4eec\u901a\u8fc7\u540c\u6b65\u65b9\u5f0f\u83b7\u53d6 tuple \u4e2d labels \u4e0e logits \uff0c\u5e76\u5bf9\u4e0a\u4f8b\u4e2d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u8bc4\u4f30\uff0c\u8f93\u51fa\u51c6\u786e\u7387\u3002 \u4ee3\u7801\u94fe\u63a5\uff1a synchronize_batch_job.py \u5176\u4e2d\uff0c\u9884\u8bad\u7ec3\u6a21\u578b\u6587\u4ef6\u53ef\u4ee5\u70b9\u6b64\u5904\u4e0b\u8f7d\uff1a lenet_models_1.zip \u8fd0\u884c\uff1a wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/quick_start/lenet_models_1.zip unzip lenet_models_1.zip wget https://docs.oneflow.org/master/code/basics_topics/synchronize_batch_job.py python3 synchronize_batch_job.py \u4f1a\u6709\u8f93\u51fa\uff1a accuracy: 99.3%","title":"\u540c\u6b65\u83b7\u53d6\u591a\u4e2a\u8fd4\u56de\u7ed3\u679c"},{"location":"single_client/basics_topics/async_get.html#_10","text":"\u5728\u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528 mlp \u8bad\u7ec3\uff0c\u901a\u8fc7\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u552f\u4e00\u7684\u8fd4\u56de\u7ed3\u679c loss \uff0c\u5e76\u6bcf\u969420\u8f6e\u6253\u5370\u4e00\u6b21 loss.mean() \u3002 \u4ee3\u7801\u4e0b\u8f7d\uff1a async_single_job.py \u8fd0\u884c\uff1a wget https://docs.oneflow.org/master/code/basics_topics/async_single_job.py python3 async_single_job.py \u4f1a\u6709\u7c7b\u4f3c\u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz 3.0865736 0.8949808 0.47858357 0.3486296 ...","title":"\u5f02\u6b65\u83b7\u53d6\u4e00\u4e2a\u8fd4\u56de\u7ed3\u679c"},{"location":"single_client/basics_topics/async_get.html#_11","text":"\u5728\u4ee5\u4e0b\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u591a\u4e2a\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u5bf9\u4e0a\u4f8b\u4e2d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u8bc4\u4f30\uff0c\u8f93\u51fa\u51c6\u786e\u7387\u3002 \u4ee3\u7801\u4e0b\u8f7d\uff1a async_batch_job.py \u5176\u4e2d\uff0c\u9884\u8bad\u7ec3\u6a21\u578b\u6587\u4ef6\u53ef\u4ee5\u70b9\u6b64\u5904\u4e0b\u8f7d\uff1a mlp_models_1.zip wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/basics_topics/mlp_models_1.zip unzip mlp_models_1.zip wget https://docs.oneflow.org/master/code/basics_topics/async_batch_job.py python3 async_batch_job.py \u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz accuracy: 97.6%","title":"\u5f02\u6b65\u83b7\u53d6\u591a\u4e2a\u8fd4\u56de\u7ed3\u679c"},{"location":"single_client/basics_topics/build_nn_with_op_and_layer.html","text":"\u4f7f\u7528OneFlow\u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u00b6 \u5728 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 flow.layers \u548c flow.nn \u63d0\u4f9b\u7684\u63a5\u53e3\u642d\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 LeNet \u7f51\u7edc\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5c06\u901a\u8fc7LeNet\u6765\u4ecb\u7ecd OneFlow \u4e2d\u7f51\u7edc\u642d\u5efa\u7684\u6838\u5fc3\u5143\u7d20\u2014\u7b97\u5b50(Op)\u548c\u5c42(Layer)\u3002 LeNet \u662f\u4e00\u4e2a\u4e3b\u8981\u7531\u5377\u79ef\u5c42\u3001\u6c60\u5316\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u7ec4\u6210\u7684\u795e\u7ecf\u7f51\u7edc\u3002 \u4e0a\u56fe\u4e2d\u6709\u4e24\u7c7b\u5143\u7d20\uff0c\u4e00\u7c7b\u662f\u65b9\u6846\u4ee3\u8868\u7684\u8fd0\u7b97\u5355\u5143\uff0c\u5305\u62ec Op \u548c Layer \u4e24\u7c7b\uff0c\u6bd4\u5982 conv2d \u3001 dense \u3001 max_pool2d \u7b49\uff1b\u4e00\u7c7b\u662f\u7bad\u5934\u4ee3\u8868\u7684\u6570\u636e\u3002\u5b83\u5bf9\u5e94\u4e86\u4ee5\u4e0b\u4ee3\u7801\uff1a def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) \u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\uff0c data \u662f\u5f62\u72b6\u4e3a 100x1\u00d728\u00d728 \u7684\u6570\u636e\uff0c data \u9996\u5148\u4f5c\u4e3a conv2d \u7684\u8f93\u5165\u53c2\u4e0e\u5377\u79ef\u8ba1\u7b97\uff0c\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c conv1 \uff0c\u7136\u540e conv1 \u4f5c\u4e3a\u8f93\u5165\u4f20\u7ed9 max_pool2d \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 Op \u548c Layer \u00b6 \u7b97\u5b50\uff08Op\uff09\u662f\u6bd4\u8f83\u5e38\u7528\u7684\u4e00\u79cd\u6982\u5ff5\uff0c\u662f OneFlow \u4e2d\u57fa\u672c\u7684\u8fd0\u7b97\u5355\u5143\uff0c\u4e0a\u6587\u4ee3\u7801\u4e2d\u7684 reshape \u548c nn.max_pool2d \u5c31\u662f\u4e24\u79cd\u7b97\u5b50\u3002 layers.conv2d \u548c layers.dense \u4e0d\u662f\u57fa\u672c\u7684\u8fd0\u7b97\u5355\u5143\uff0c\u5b83\u4eec\u662f\u7531\u7b97\u5b50\u7ec4\u5408\u6210\u7684\u7279\u5b9a\u7684\u8fd0\u7b97\u5c42\uff08Layer\uff09\u3002\u5c42\u7684\u5b58\u5728\u4f7f\u5f97\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u66f4\u65b9\u4fbf\uff0c\u76f8\u5173\u63a5\u53e3\u4f7f\u7528\u8bf7\u53c2\u8003 oneflow.layers API \u3002 \u901a\u8fc7\u9605\u8bfb oneflow.layers \u6e90\u7801 \uff0c\u53ef\u4ee5\u5b66\u4e60\u7531\u57fa\u672c\u7b97\u5b50\u6784\u5efa\u8fd0\u7b97\u5c42\u7684\u7ec6\u8282\u3002 \u7f51\u7edc\u6784\u5efa\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u5757 \u00b6 OneFlow \u9ed8\u8ba4\u6a21\u5f0f\u662f\u9759\u6001\u56fe\u673a\u5236\uff0c\u7f51\u7edc\u7684\u6784\u5efa\u548c\u8fd0\u884c\u8fc7\u7a0b\u5176\u5b9e\u662f\u5206\u5f00\u7684\u3002\u56e0\u6b64\uff0c\u5728\u5b9a\u4e49\u7f51\u7edc\u65f6\uff0c\u5404\u4e2a\u53d8\u91cf\u4e2d \u5e76\u6ca1\u6709 \u771f\u5b9e\u7684\u6570\u636e\uff0c\u5b83\u4eec\u53ea\u662f\u6570\u636e\u7684\u5360\u4f4d\u7b26\u3002\u771f\u5b9e\u6570\u636e\u7684\u8ba1\u7b97\u53d1\u751f\u5728\u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528\u8fc7\u7a0b\u4e2d\u3002 \u5728\u6784\u5efa\u7f51\u7edc\u65f6\uff0c\u6211\u4eec\u53ea\u662f\u63cf\u8ff0\u4e86\u7f51\u7edc\u4e2d\u5404\u4e2a\u8282\u70b9\u7684\u6027\u8d28\u3001\u5f62\u72b6\uff08\u5982 shape \u3001 dtype \uff09\u4e0e\u8fde\u63a5\u5173\u7cfb\u7b49\uff0c\u8fd9\u4e9b\u8282\u70b9\u4e2d\u6ca1\u6709\u5177\u4f53\u7684\u6570\u503c\uff0c\u4ec5\u4ec5\u53ea\u662f \u6570\u636e\u5360\u4f4d\u7b26 \uff0c OneFlow \u53ef\u4ee5\u6839\u636e\u8fd9\u79cd\u6570\u636e\u5360\u4f4d\u7b26\u8fdb\u884c\u7f16\u8bd1\u63a8\u7406\uff0c\u5f97\u5230\u8ba1\u7b97\u56fe\u3002 \u8fd9\u79cd\u6570\u636e\u5360\u4f4d\u7b26\u5728 OneFlow \u7684\u8bed\u5883\u4e2d\u88ab\u79f0\u4f5c Blob \uff0c\u5728 OneFlow \u4e2d\u6709\u5bf9\u5e94\u7684\u57fa\u7c7b BlobDef \u3002 \u642d\u5efa\u7f51\u7edc\u65f6\u53ef\u4ee5\u6253\u5370 Blob \u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\u6253\u5370 conv1 \u7684 shape \u548c dtype \uff1a print(conv1.shape, conv1.dtype) Blob \u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d BlobDef \u4e2d\u5b9a\u4e49\u4e86\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c BlobDef \u5bf9\u8c61\u4e4b\u95f4\u53ef\u4ee5\u8fdb\u884c\u52a0\u51cf\u4e58\u9664\u7b49\u64cd\u4f5c\u3002 \u4f8b\u5982\u4e0b\u9762\u8fd9\u53e5\u4ee3\u7801\u4e2d\u7684\u52a0\u53f7\uff1a output = output + fc2_biases \u8fd9\u53e5\u4ee3\u7801\u7b49\u4ef7\u4e8e\uff1a output = flow.broadcast_add(output, fc2_biases) \u603b\u7ed3 \u00b6 \u4f7f\u7528 OneFlow \u8fdb\u884c\u795e\u7ecf\u7f51\u7edc\u642d\u5efa\uff0c\u9700\u8981 OneFlow \u63d0\u4f9b\u7b97\u5b50\u6216\u5c42\u4f5c\u4e3a\u8ba1\u7b97\u5355\u5143\u3002\u6570\u636e\u5360\u4f4d\u7b26 Blob \u4f5c\u4e3a\u7b97\u5b50\u548c\u5c42\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u8fd0\u7b97\u7b26\u91cd\u8f7d\u5e2e\u52a9\u7b80\u5316\u4e86\u90e8\u5206\u8bed\u53e5\u3002 OneFlow \u63d0\u4f9b\u7684\u7b97\u5b50\u53ef\u4ee5\u53c2\u9605 API \u6587\u6863\u4e2d\u7684\uff1a oneflow.nn \u3001 oneflow.math \u3001 oneflow.layers \u7b49\u6a21\u5757\u3002","title":"\u642d\u5efa\u795e\u7ecf\u7f51\u7edc"},{"location":"single_client/basics_topics/build_nn_with_op_and_layer.html#oneflow","text":"\u5728 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 flow.layers \u548c flow.nn \u63d0\u4f9b\u7684\u63a5\u53e3\u642d\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 LeNet \u7f51\u7edc\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5c06\u901a\u8fc7LeNet\u6765\u4ecb\u7ecd OneFlow \u4e2d\u7f51\u7edc\u642d\u5efa\u7684\u6838\u5fc3\u5143\u7d20\u2014\u7b97\u5b50(Op)\u548c\u5c42(Layer)\u3002 LeNet \u662f\u4e00\u4e2a\u4e3b\u8981\u7531\u5377\u79ef\u5c42\u3001\u6c60\u5316\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u7ec4\u6210\u7684\u795e\u7ecf\u7f51\u7edc\u3002 \u4e0a\u56fe\u4e2d\u6709\u4e24\u7c7b\u5143\u7d20\uff0c\u4e00\u7c7b\u662f\u65b9\u6846\u4ee3\u8868\u7684\u8fd0\u7b97\u5355\u5143\uff0c\u5305\u62ec Op \u548c Layer \u4e24\u7c7b\uff0c\u6bd4\u5982 conv2d \u3001 dense \u3001 max_pool2d \u7b49\uff1b\u4e00\u7c7b\u662f\u7bad\u5934\u4ee3\u8868\u7684\u6570\u636e\u3002\u5b83\u5bf9\u5e94\u4e86\u4ee5\u4e0b\u4ee3\u7801\uff1a def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) \u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\uff0c data \u662f\u5f62\u72b6\u4e3a 100x1\u00d728\u00d728 \u7684\u6570\u636e\uff0c data \u9996\u5148\u4f5c\u4e3a conv2d \u7684\u8f93\u5165\u53c2\u4e0e\u5377\u79ef\u8ba1\u7b97\uff0c\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c conv1 \uff0c\u7136\u540e conv1 \u4f5c\u4e3a\u8f93\u5165\u4f20\u7ed9 max_pool2d \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"\u4f7f\u7528OneFlow\u642d\u5efa\u795e\u7ecf\u7f51\u7edc"},{"location":"single_client/basics_topics/build_nn_with_op_and_layer.html#op-layer","text":"\u7b97\u5b50\uff08Op\uff09\u662f\u6bd4\u8f83\u5e38\u7528\u7684\u4e00\u79cd\u6982\u5ff5\uff0c\u662f OneFlow \u4e2d\u57fa\u672c\u7684\u8fd0\u7b97\u5355\u5143\uff0c\u4e0a\u6587\u4ee3\u7801\u4e2d\u7684 reshape \u548c nn.max_pool2d \u5c31\u662f\u4e24\u79cd\u7b97\u5b50\u3002 layers.conv2d \u548c layers.dense \u4e0d\u662f\u57fa\u672c\u7684\u8fd0\u7b97\u5355\u5143\uff0c\u5b83\u4eec\u662f\u7531\u7b97\u5b50\u7ec4\u5408\u6210\u7684\u7279\u5b9a\u7684\u8fd0\u7b97\u5c42\uff08Layer\uff09\u3002\u5c42\u7684\u5b58\u5728\u4f7f\u5f97\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u66f4\u65b9\u4fbf\uff0c\u76f8\u5173\u63a5\u53e3\u4f7f\u7528\u8bf7\u53c2\u8003 oneflow.layers API \u3002 \u901a\u8fc7\u9605\u8bfb oneflow.layers \u6e90\u7801 \uff0c\u53ef\u4ee5\u5b66\u4e60\u7531\u57fa\u672c\u7b97\u5b50\u6784\u5efa\u8fd0\u7b97\u5c42\u7684\u7ec6\u8282\u3002","title":"Op \u548c Layer"},{"location":"single_client/basics_topics/build_nn_with_op_and_layer.html#_1","text":"OneFlow \u9ed8\u8ba4\u6a21\u5f0f\u662f\u9759\u6001\u56fe\u673a\u5236\uff0c\u7f51\u7edc\u7684\u6784\u5efa\u548c\u8fd0\u884c\u8fc7\u7a0b\u5176\u5b9e\u662f\u5206\u5f00\u7684\u3002\u56e0\u6b64\uff0c\u5728\u5b9a\u4e49\u7f51\u7edc\u65f6\uff0c\u5404\u4e2a\u53d8\u91cf\u4e2d \u5e76\u6ca1\u6709 \u771f\u5b9e\u7684\u6570\u636e\uff0c\u5b83\u4eec\u53ea\u662f\u6570\u636e\u7684\u5360\u4f4d\u7b26\u3002\u771f\u5b9e\u6570\u636e\u7684\u8ba1\u7b97\u53d1\u751f\u5728\u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528\u8fc7\u7a0b\u4e2d\u3002 \u5728\u6784\u5efa\u7f51\u7edc\u65f6\uff0c\u6211\u4eec\u53ea\u662f\u63cf\u8ff0\u4e86\u7f51\u7edc\u4e2d\u5404\u4e2a\u8282\u70b9\u7684\u6027\u8d28\u3001\u5f62\u72b6\uff08\u5982 shape \u3001 dtype \uff09\u4e0e\u8fde\u63a5\u5173\u7cfb\u7b49\uff0c\u8fd9\u4e9b\u8282\u70b9\u4e2d\u6ca1\u6709\u5177\u4f53\u7684\u6570\u503c\uff0c\u4ec5\u4ec5\u53ea\u662f \u6570\u636e\u5360\u4f4d\u7b26 \uff0c OneFlow \u53ef\u4ee5\u6839\u636e\u8fd9\u79cd\u6570\u636e\u5360\u4f4d\u7b26\u8fdb\u884c\u7f16\u8bd1\u63a8\u7406\uff0c\u5f97\u5230\u8ba1\u7b97\u56fe\u3002 \u8fd9\u79cd\u6570\u636e\u5360\u4f4d\u7b26\u5728 OneFlow \u7684\u8bed\u5883\u4e2d\u88ab\u79f0\u4f5c Blob \uff0c\u5728 OneFlow \u4e2d\u6709\u5bf9\u5e94\u7684\u57fa\u7c7b BlobDef \u3002 \u642d\u5efa\u7f51\u7edc\u65f6\u53ef\u4ee5\u6253\u5370 Blob \u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\u6253\u5370 conv1 \u7684 shape \u548c dtype \uff1a print(conv1.shape, conv1.dtype) Blob \u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d BlobDef \u4e2d\u5b9a\u4e49\u4e86\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c BlobDef \u5bf9\u8c61\u4e4b\u95f4\u53ef\u4ee5\u8fdb\u884c\u52a0\u51cf\u4e58\u9664\u7b49\u64cd\u4f5c\u3002 \u4f8b\u5982\u4e0b\u9762\u8fd9\u53e5\u4ee3\u7801\u4e2d\u7684\u52a0\u53f7\uff1a output = output + fc2_biases \u8fd9\u53e5\u4ee3\u7801\u7b49\u4ef7\u4e8e\uff1a output = flow.broadcast_add(output, fc2_biases)","title":"\u7f51\u7edc\u6784\u5efa\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u5757"},{"location":"single_client/basics_topics/build_nn_with_op_and_layer.html#_2","text":"\u4f7f\u7528 OneFlow \u8fdb\u884c\u795e\u7ecf\u7f51\u7edc\u642d\u5efa\uff0c\u9700\u8981 OneFlow \u63d0\u4f9b\u7b97\u5b50\u6216\u5c42\u4f5c\u4e3a\u8ba1\u7b97\u5355\u5143\u3002\u6570\u636e\u5360\u4f4d\u7b26 Blob \u4f5c\u4e3a\u7b97\u5b50\u548c\u5c42\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u8fd0\u7b97\u7b26\u91cd\u8f7d\u5e2e\u52a9\u7b80\u5316\u4e86\u90e8\u5206\u8bed\u53e5\u3002 OneFlow \u63d0\u4f9b\u7684\u7b97\u5b50\u53ef\u4ee5\u53c2\u9605 API \u6587\u6863\u4e2d\u7684\uff1a oneflow.nn \u3001 oneflow.math \u3001 oneflow.layers \u7b49\u6a21\u5757\u3002","title":"\u603b\u7ed3"},{"location":"single_client/basics_topics/concept_explanation.html","text":"OneFlow \u6982\u5ff5\u6e05\u5355 \u00b6 \u672c\u6587\u5c06\u5bf9 OneFlow \u4e2d\u6d89\u53ca\u5230\u7684\uff0c\u5e38\u7528\u7684\u4e00\u4e9b\u6982\u5ff5/\u540d\u8bcd\u505a\u4e00\u4e2a\u6982\u62ec\u6027\u7684\u89e3\u91ca\u3002\u4e3b\u8981\u5185\u5bb9\u9488\u5bf9\u7b97\u6cd5\u5de5\u7a0b\u5e08\u548c\u6846\u67b6\u5f00\u53d1\u8005\u5206\u4e3a\u4ee5\u4e0b\u4e24\u90e8\u5206\uff1a \u7b97\u6cd5\u5f00\u53d1 \u6846\u67b6\u5f00\u53d1 \u5728\u7b97\u6cd5\u5f00\u53d1\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u89e3\u91ca\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5e38\u7528\u7684\u4e00\u4e9b\u6982\u5ff5\u548c\u540d\u8bcd\uff0c\u800c\u5728\u6846\u67b6\u5f00\u53d1\u90e8\u5206\uff0c\u6211\u4eec\u5219\u4fa7\u91cd\u4e8e\u4ecb\u7ecd OneFlow \u6846\u67b6\u5185\u90e8\u8bbe\u8ba1\u6982\u5ff5\u3001\u91cd\u8981\u6570\u636e\u7ed3\u6784\u3002 \u7b97\u6cd5\u5f00\u53d1 \u00b6 1. Placeholder \u00b6 Placeholder \u5373 \u6570\u636e\u5360\u4f4d\u7b26 \uff0c\u6b64\u6982\u5ff5\u7528\u4e8e\u63cf\u8ff0\u8f93\u5165/\u8f93\u51fa\u7684\u6570\u636e\u5f62\u72b6\uff0c\u800c\u5e76\u4e0d\u662f\u5b9e\u4f53\u7684\u6570\u636e\u3002 \u4f8b\u5982\uff1a from oneflow.compatible.single_client import typing as tp def test_job ( images : tp . Numpy . Placeholder (( 32 , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( 32 ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: # do something with images or labels return ( images , labels ) \u63cf\u8ff0\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u7684 job \u51fd\u6570\u4e2d\uff0c\u8f93\u5165\u7684\u56fe\u7247 shape \u662f(32, 1, 28, 28)\uff0c\u6570\u636e\u7c7b\u578b\u662f flow.float32 \uff1b\u8f93\u5165\u7684 labels \u6807\u7b7e\u7684 shape \u662f(32,)\uff0c\u7c7b\u578b\u662f flow.int32 \u3002 2. Tensor \u548c Blob \u00b6 \u5728\u5176\u4ed6\u6846\u67b6\u4e2d\u5e38\u7528 Tensor \u8fd9\u4e2a\u6982\u5ff5\uff0c\u8b6c\u5982 pytorch \u4e2d\u7684 Tensor\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6570\u636e\u503c\u548c\u7c7b\u578b(data, dtype)\u3001\u68af\u5ea6 grad\u3001\u5b58\u653e\u7684\u8bbe\u5907\u7c7b\u578b device \u7b49\u5c5e\u6027\u3002\u5229\u7528 Tensor \u53ef\u4ee5\u7528\u6765\u6784\u9020\u548c\u63cf\u8ff0\u524d\u5411/\u53cd\u5411\u8fc7\u7a0b\u4e2d\u7684\u8ba1\u7b97\u56fe\u3002 \u800c\u5728 OneFlow \u4e2d\uff0c\u5e95\u5c42\u4e5f\u4f7f\u7528\u4e86 Tensor \u7684\u6982\u5ff5\uff0c\u4e0d\u8fc7 OneFlow \u4e2d\u7684 Tensor \u548c pytorch/tensorflow \u4e2d\u7684\u6709\u4e9b\u4e0d\u540c\uff0c\u4e3a\u4e86\u5bf9\u5206\u5e03\u5f0f\u548c\u5e76\u884c\u63d0\u4f9b\u5145\u5206\u7684\u652f\u6301\uff0cOneFlow \u4e2d\u7684 Tensor \u66f4\u4e3a\u590d\u6742\uff0c\u7c7b\u578b\u548c\u5c5e\u6027\u66f4\u591a\uff08\u8b6c\u5982\uff1a\u903b\u8f91/\u7269\u7406\u3001\u8bbe\u5907\u3001\u5206\u5e03\u5f0f\u76f8\u5173\u7684\u5c5e\u6027\uff09\uff0c\u800c\u4e14\u4e00\u4e2a\u903b\u8f91\u4e0a\u7edf\u4e00\u7684 Tensor \u53ef\u80fd\u5728\u5b9e\u9645\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u88ab\u62c6\u5206\u5230\u4e86\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\uff0c\u6240\u4ee5\u4e3a\u4e86\u7b80\u5316\u63cf\u8ff0\uff0cOneFlow \u4e2d\u5c4f\u853d\u4e86\u5404\u79cd\u5177\u4f53\u7c7b\u578b\u7684 Tensor\uff0c\u5176\u4e0a\u5c42\u7531\u4e00\u4e2a\u7edf\u4e00\u7684\u6982\u5ff5\u2014 Blob \u4f5c\u4e3a\u5b9a\u4e49\u3002 Blob \u5728 OneFlow \u4e2d\u6709\u5bf9\u5e94\u7684\u57fa\u7c7b BlobDef \uff0c\u642d\u5efa\u7f51\u7edc\u65f6\u53ef\u4ee5\u6253\u5370 Blob \u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\u6253\u5370 conv1 \u7684 shape \u548c dtype \uff1a print ( conv1 . shape , conv1 . dtype ) Blob \u53ef\u80fd\u53ea\u662f\u5360\u4f4d\u7b26 Placeholder\uff0c\u4e5f\u53ef\u80fd\u662f\u5177\u4f53\u7684\u5305\u542b\u6570\u503c\u7684\u5355\u5143\u3002 3. Job Function(\u4f5c\u4e1a\u51fd\u6570) \u00b6 \u5728 OneFlow \u4e2d\uff0c\u6211\u4eec\u5c06\u8bad\u7ec3\u3001\u9884\u6d4b\u7b49\u5177\u4f53\u4efb\u52a1\u7edf\u79f0\u4e3a\u4f5c\u4e1a\u51fd\u6570(job function)\uff0c\u4f5c\u4e1a\u51fd\u6570\u8054\u7cfb\u7528\u6237\u7684\u4e1a\u52a1\u903b\u8f91\u4e0e OneFlow \u7ba1\u7406\u7684\u8ba1\u7b97\u8d44\u6e90\u3002 \u5728 OneFlow \u4e2d\uff0c\u4efb\u4f55\u88ab\u5b9a\u4e49\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u65b9\u6cd5\u4f53\u90fd\u9700\u8981\u7528\u88c5\u9970\u5668 @oneflow.global_function \u4fee\u9970\uff0c\u901a\u8fc7\u6b64\u88c5\u9970\u5668\uff0c\u6211\u4eec\u4e0d\u4ec5\u80fd\u5b9a\u4e49\u4f5c\u4e1a\u7684\u7c7b\u578b(\u5982\uff1a type=\"train\" )\uff0c\u540c\u65f6\u5c06\u4e3a\u4f5c\u4e1a\u7ed1\u5b9a\u4e00\u4e2a FunctionConfig \u5bf9\u8c61\u7528\u4e8e\u8bbe\u7f6e\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\u6240\u9700\u7684\u914d\u7f6e\uff0c\u4f7f\u5f97 OneFlow \u80fd\u65b9\u4fbf\u5730\u4e3a\u6211\u4eec\u7ba1\u7406\u5185\u5b58\u3001GPU \u7b49\u8ba1\u7b97\u8d44\u6e90\u3002 4. Layer \u548c Operator\uff08op\uff09 \u00b6 Layer \u00b6 Layer \u5373\u8fd0\u7b97\u5c42\uff0clayer \u7684\u6982\u5ff5\u548c tensorflow\u3001pytorch \u7b49\u4e3b\u6d41\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u7c7b\u4f3c\uff0c\u7528\u6765\u63cf\u8ff0\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u4e2d\u7684\u4e00\u4e2a\u5c42\u7ea7\u5982\uff1aconv2d \u5377\u79ef\u5c42\u3001batch_normalization \u5c42\u3001dense \u5168\u8fde\u63a5\u5c42\u3001layer_norm \u6b63\u5219\u5316\u5c42\u7b49\u3002\u5c42\u7684\u5b58\u5728\u7b80\u5316\u4e86\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u642d\u5efa\u8fc7\u7a0b\uff0c\u8b6c\u5982\u4f60\u53ef\u4ee5\u7528\u7b80\u5355\u7684\u51e0\u884c\u4ee3\u7801\u642d\u5efa\u51fa LeNet\uff1a def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) layer \u5e95\u5c42\u662f\u7531\u5404\u79cd\u7b97\u5b50\u62fc\u63a5\u800c\u6210\uff0c\u8b6c\u5982\uff1a layers.conv2d \u5176\u5b9e\u662f\u7531 conv2d \u7b97\u5b50\u548c variable \u7b97\u5b50\u7ec4\u6210\u3002 Op \u00b6 Operator \u5373\u7b97\u5b50\uff08\u7b80\u79f0\u4e3aop\uff09\uff0c\u662f OneFlow \u4e2d\u7684 \u57fa\u672c\u8fd0\u7b97\u5355\u5143 \u3002\u4e0a\u9762\u4f8b\u5b50\u4e2d layer \u4e4b\u95f4\u7684\u8ba1\u7b97\u5168\u90e8\u7531\u5404\u79cd\u7b97\u5b50\u53e0\u52a0\u5b8c\u6210\u3002\u8b6c\u5982 flow.nn.max_pool2d \u5c31\u662f\u4e00\u79cd\u7b97\u5b50\uff0c flow.reshape \u662f\u53e6\u4e00\u79cd\u7b97\u5b50\u3002 5. Consistent/Mirrored View \u00b6 OneFlow \u4e2d\u91c7\u53d6\u4e86\u4e24\u79cd\u89c6\u89d2\uff1a Mirrored View \u548c Consistent View \u6765\u63cf\u8ff0\u5206\u5e03\u5f0f\u60c5\u51b5\u4e0b\u6570\u636e\u548c\u6a21\u578b\u7684\u5206\u5e03\uff0c\u4e0d\u540c\u7684 view \u5bf9\u5e94\u4e86\u4e0d\u540c\u7684\u5e76\u884c\u7b56\u7565\u3002 Mirrored View \u6765\u6e90\u4e8e MPI \u5206\u5e03\u5f0f\u8ba1\u7b97\u4e2d\u7684\u955c\u50cf\u7b56\u7565\uff0c\u7528\u4e8e\u63cf\u8ff0\u6570\u636e\u5e76\u884c\u65f6\uff0c\u6a21\u578b\u955c\u50cf\u5230\u591a\u5361\u7684\u884c\u4e3a\uff1b Consistent View \u5219\u8868\u793a\u5c06\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\u7684\u591a\u673a\u591a\u5361\u89c6\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0c\u91c7\u53d6\u6b64\u7b56\u7565\u65f6\uff0cOneFlow \u4f1a\u4e3a\u7528\u6237\u5c4f\u853d\u6389\u5177\u4f53\u7684\u6267\u884c\u65b9\u5f0f\uff0c\u5185\u90e8\u5c06\u4ee5\u6700\u4f18\u5316\u7684\u7b56\u7565\u9009\u62e9\u5e76\u884c\u65b9\u5f0f\uff08\u53ef\u80fd\u662f\u6570\u636e\u5e76\u884c/\u6a21\u578b\u5e76\u884c\u6216\u6df7\u5408\u5e76\u884c\uff09 \u7b80\u5355\u6765\u8bf4\uff1a \u5f53\u8bbe\u7f6e mirrored view \u65f6\uff08 flow.scope.mirrored_view \uff09\u8868\u793a\u53ea\u80fd\u4f7f\u7528 \u6570\u636e\u5e76\u884c \u7684\u65b9\u5f0f\u3002\u8b6c\u5982\u5728 job function \u4e2d\u8bbe\u7f6e\u4e864\u53f0\u5355\u5361\u8282\u70b9\uff0c\u5219\u6a21\u578b\u4f1a\u88ab\u5b8c\u6574\u7684\u590d\u5236/\u955c\u50cf\u52304\u53f0\u8282\u70b9\u7684GPU\u5361\u4e0a\uff0c\u6570\u636e\u5219\u4f1a\u5207\u5206\u4e3a4\u4efd\u5206\u522b\u5582\u7ed94\u53f0\u8282\u70b9\u4e0a\u7684GPU\u5361\u3002 \u5f53\u8bbe\u7f6e consistent view \u65f6( flow.scope.consistent_view )\uff0c\u5219\u8868\u793a\u6ca1\u6709\u9650\u5236\uff0cOneFlow \u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u6a21\u578b\u5e76\u884c\u3001\u6570\u636e\u5e76\u884c\u6216\u8005\u4e24\u8005\u5171\u5b58\u7684\u6df7\u5408\u5e76\u884c\u3002 \u6846\u67b6\u5f00\u53d1 \u00b6 1. Boxing \u00b6 \u8d1f\u8d23\u5728\u8fd0\u884c\u65f6\u6839\u636e\u5e76\u884c\u5c5e\u6027\u8f6c\u6362\u5f20\u91cf\u7684\u6a21\u5757\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a Boxing \u3002 \u4f8b\u5982\uff1a\u5f53\u4e0a\u4e0b\u6e38\u7684 op \u5177\u6709\u4e0d\u540c\u7684\u5e76\u884c\u7279\u6027(\u5982\u5e76\u884c\u6570\u4e0d\u540c)\uff0cOneFlow \u5c06\u5229\u7528 Boxing \u81ea\u52a8\u5904\u7406\u5404\u79cd\u6570\u636e\u8f6c\u6362\u548c\u4f20\u8f93\u8fc7\u7a0b\u3002 2. SBP \u00b6 \u672c\u8d28\u4e0a\uff0c\u795e\u7ecf\u7f51\u7edc\u524d\u5411\u540e\u5411\u8fc7\u7a0b\u4e2d\u7684\u5927\u591a\u6570\u64cd\u4f5c\uff0c\u90fd\u53ef\u4ee5\u5f52\u7eb3\u4e3a\u77e9\u9635\u8ba1\u7b97\uff0c\u5728\u77e9\u9635\u8ba1\u7b97\u4e2d\u5e38\u6709\u6839\u636e axis \u5207\u5206\u3001\u5e7f\u64ad\u7b49\u64cd\u4f5c\u3002\u540c\u6837 OneFlow \u4e2d\u4e5f\u6709\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u79f0\u4e3aSBP\uff0c\u5f53\u7136\uff0cOneFlow \u4e2d\u7684 SBP \u4e0d\u4ec5\u4ec5\u662f\u7b80\u5355\u7684\u77e9\u9635\u8fd0\u7b97\uff0c\u5176\u8fd8\u5bf9\u5e94\u4e86\u6570\u636e\u5728\u4e0d\u540c\u7269\u7406 GPU \u4e0a\u7684\u5212\u5206\u3001\u5e7f\u64ad\u7b49\u5b9e\u9645\u64cd\u4f5c\u3002 SBP \u5373 Split\u3001Broadcast\u3001Partial sum \u7684\u7f29\u5199\u3002\u5176\u4e2d Split \u8868\u793a\u5207\u5206\uff1bBroadcast \u8868\u793a\u5e7f\u64ad\uff1bPartial sum \u8868\u793a\u90e8\u5206\u6c42\u548c\u3002 Split \u00b6 \u5728\u5e76\u884c op \u8ba1\u7b97\u65f6\uff0c\u5f20\u91cf\u88ab split \u5207\u5206\u4e3a\u591a\u4e2a\u5b50\u5f20\u91cf\u3002\u4e0d\u540c\u7684 op \u8fd0\u7b97\u7b26\u5141\u8bb8\u5f20\u91cf\u5728\u4e0d\u540c\u7684 axis \u8f74\u4e0a\u8fdb\u884c\u62c6\u5206\u3002Boxing \u673a\u5236\u5c06\u81ea\u52a8\u5904\u7406\u4e00\u4e2a\u5f20\u91cf\u5728\u591a\u79cd op \u64cd\u4f5c\u4e0b\u5728\u4e0d\u540c\u8f74\u4e0a\u5207\u5206\u7684\u60c5\u51b5\u3002 Broadcast \u00b6 \u5e76\u884c op \u8ba1\u7b97\u65f6\uff0c\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684\u5f20\u91cf\u88ab\u5e7f\u64ad\u81f3\u591a\u4e2a\u8bbe\u5907\uff0c\u4f7f\u6bcf\u53f0\u8bbe\u5907\u4e0a\u6709\u76f8\u540c\u7684\u5f20\u91cf\u3002 Partial Sum \u00b6 \u5982\u679c\u4e00\u4e2a op \u5177\u6709\u5206\u914d(distributive)\u5c5e\u6027\uff0c\u5219\u5f20\u91cf\u4f1a\u6839\u636e\u5c5e\u6027\u8fdb\u884c\u90e8\u5206\u7ef4\u5ea6\u7684\u52a0\u548c\u64cd\u4f5c\u3002 3. TensorBuffer \u548c TensorList \u00b6 \u57fa\u4e8e\u9759\u6001\u56fe\u673a\u5236\uff0cOneFlow \u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u63d0\u524d\u63a8\u7406\u51fa\u5404\u4e2a\u7b97\u5b50\u7684\u5f20\u91cf\u5f62\u72b6\uff0c\u5e76\u5206\u914d\u597d\u5185\u5b58\uff0c\u505a\u5230\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5185\u5b58\u96f6\u62f7\u8d1d\u3002\u4f46\u5728\u67d0\u4e9b\u7279\u6b8a\u573a\u666f\u4e0b\uff0cOneFlow \u9700\u8981\u5904\u7406\u53d8\u957f\u7684\u6570\u636e\uff0c\u6bd4\u5982 DataLoader \u52a0\u8f7d\u7684\u56fe\u7247\u5f62\u72b6\u5728\u7f16\u8bd1\u65f6\u65e0\u6cd5\u83b7\u77e5\u3002\u4e3a\u4e86\u5904\u7406\u8fd9\u79cd\u53d8\u957f\u6570\u636e\uff0cOneFlow \u5185\u90e8\u8bbe\u8ba1\u4e86\u4e24\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5206\u522b\u662f TensorBuffer \u548c TensorList \u3002 TensorBuffer \u00b6 TensorBuffer \u662f\u4e00\u4e2a\u8f83\u4e3a\u7075\u6d3b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a\u5b9e\u4f8b\u7684\u7ef4\u5ea6\u3002OneFlow \u4f1a\u4e3a\u6bcf\u4e2a\u5b9e\u4f8b\u751f\u6210\u5bf9\u5e94\u7684 TensorBuffer \u5bf9\u8c61\uff0cTensorBuffer \u5bf9\u8c61\u95f4\u63a5\u5f15\u7528\u5185\u5b58\u6570\u636e\uff0cTensorBuffer \u6240\u5f15\u7528\u7684\u5185\u5b58\u533a\u57df\u662f \u52a8\u6001\u7684\u3001\u4e0d\u8fde\u7eed\u7684 \u3002 TensorList \u00b6 \u4e0e TensorBuffer \u7c7b\u4f3c\uff0cTensorList \u4e5f\u662f\u4e00\u79cd\u5b58\u653e\u53d8\u957f\u6570\u636e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6700\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e0e TensorList \u7684\u6570\u636e\u90e8\u5206\u5728\u5185\u5b58\u4e2d\u662f \u8fde\u7eed\u7684 \u3002","title":"OneFlow \u6982\u5ff5\u6e05\u5355"},{"location":"single_client/basics_topics/concept_explanation.html#oneflow","text":"\u672c\u6587\u5c06\u5bf9 OneFlow \u4e2d\u6d89\u53ca\u5230\u7684\uff0c\u5e38\u7528\u7684\u4e00\u4e9b\u6982\u5ff5/\u540d\u8bcd\u505a\u4e00\u4e2a\u6982\u62ec\u6027\u7684\u89e3\u91ca\u3002\u4e3b\u8981\u5185\u5bb9\u9488\u5bf9\u7b97\u6cd5\u5de5\u7a0b\u5e08\u548c\u6846\u67b6\u5f00\u53d1\u8005\u5206\u4e3a\u4ee5\u4e0b\u4e24\u90e8\u5206\uff1a \u7b97\u6cd5\u5f00\u53d1 \u6846\u67b6\u5f00\u53d1 \u5728\u7b97\u6cd5\u5f00\u53d1\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u89e3\u91ca\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5e38\u7528\u7684\u4e00\u4e9b\u6982\u5ff5\u548c\u540d\u8bcd\uff0c\u800c\u5728\u6846\u67b6\u5f00\u53d1\u90e8\u5206\uff0c\u6211\u4eec\u5219\u4fa7\u91cd\u4e8e\u4ecb\u7ecd OneFlow \u6846\u67b6\u5185\u90e8\u8bbe\u8ba1\u6982\u5ff5\u3001\u91cd\u8981\u6570\u636e\u7ed3\u6784\u3002","title":"OneFlow \u6982\u5ff5\u6e05\u5355"},{"location":"single_client/basics_topics/concept_explanation.html#_1","text":"","title":"\u7b97\u6cd5\u5f00\u53d1"},{"location":"single_client/basics_topics/concept_explanation.html#1-placeholder","text":"Placeholder \u5373 \u6570\u636e\u5360\u4f4d\u7b26 \uff0c\u6b64\u6982\u5ff5\u7528\u4e8e\u63cf\u8ff0\u8f93\u5165/\u8f93\u51fa\u7684\u6570\u636e\u5f62\u72b6\uff0c\u800c\u5e76\u4e0d\u662f\u5b9e\u4f53\u7684\u6570\u636e\u3002 \u4f8b\u5982\uff1a from oneflow.compatible.single_client import typing as tp def test_job ( images : tp . Numpy . Placeholder (( 32 , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( 32 ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: # do something with images or labels return ( images , labels ) \u63cf\u8ff0\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u7684 job \u51fd\u6570\u4e2d\uff0c\u8f93\u5165\u7684\u56fe\u7247 shape \u662f(32, 1, 28, 28)\uff0c\u6570\u636e\u7c7b\u578b\u662f flow.float32 \uff1b\u8f93\u5165\u7684 labels \u6807\u7b7e\u7684 shape \u662f(32,)\uff0c\u7c7b\u578b\u662f flow.int32 \u3002","title":"1. Placeholder"},{"location":"single_client/basics_topics/concept_explanation.html#2-tensor-blob","text":"\u5728\u5176\u4ed6\u6846\u67b6\u4e2d\u5e38\u7528 Tensor \u8fd9\u4e2a\u6982\u5ff5\uff0c\u8b6c\u5982 pytorch \u4e2d\u7684 Tensor\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6570\u636e\u503c\u548c\u7c7b\u578b(data, dtype)\u3001\u68af\u5ea6 grad\u3001\u5b58\u653e\u7684\u8bbe\u5907\u7c7b\u578b device \u7b49\u5c5e\u6027\u3002\u5229\u7528 Tensor \u53ef\u4ee5\u7528\u6765\u6784\u9020\u548c\u63cf\u8ff0\u524d\u5411/\u53cd\u5411\u8fc7\u7a0b\u4e2d\u7684\u8ba1\u7b97\u56fe\u3002 \u800c\u5728 OneFlow \u4e2d\uff0c\u5e95\u5c42\u4e5f\u4f7f\u7528\u4e86 Tensor \u7684\u6982\u5ff5\uff0c\u4e0d\u8fc7 OneFlow \u4e2d\u7684 Tensor \u548c pytorch/tensorflow \u4e2d\u7684\u6709\u4e9b\u4e0d\u540c\uff0c\u4e3a\u4e86\u5bf9\u5206\u5e03\u5f0f\u548c\u5e76\u884c\u63d0\u4f9b\u5145\u5206\u7684\u652f\u6301\uff0cOneFlow \u4e2d\u7684 Tensor \u66f4\u4e3a\u590d\u6742\uff0c\u7c7b\u578b\u548c\u5c5e\u6027\u66f4\u591a\uff08\u8b6c\u5982\uff1a\u903b\u8f91/\u7269\u7406\u3001\u8bbe\u5907\u3001\u5206\u5e03\u5f0f\u76f8\u5173\u7684\u5c5e\u6027\uff09\uff0c\u800c\u4e14\u4e00\u4e2a\u903b\u8f91\u4e0a\u7edf\u4e00\u7684 Tensor \u53ef\u80fd\u5728\u5b9e\u9645\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u88ab\u62c6\u5206\u5230\u4e86\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\uff0c\u6240\u4ee5\u4e3a\u4e86\u7b80\u5316\u63cf\u8ff0\uff0cOneFlow \u4e2d\u5c4f\u853d\u4e86\u5404\u79cd\u5177\u4f53\u7c7b\u578b\u7684 Tensor\uff0c\u5176\u4e0a\u5c42\u7531\u4e00\u4e2a\u7edf\u4e00\u7684\u6982\u5ff5\u2014 Blob \u4f5c\u4e3a\u5b9a\u4e49\u3002 Blob \u5728 OneFlow \u4e2d\u6709\u5bf9\u5e94\u7684\u57fa\u7c7b BlobDef \uff0c\u642d\u5efa\u7f51\u7edc\u65f6\u53ef\u4ee5\u6253\u5370 Blob \u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\u6253\u5370 conv1 \u7684 shape \u548c dtype \uff1a print ( conv1 . shape , conv1 . dtype ) Blob \u53ef\u80fd\u53ea\u662f\u5360\u4f4d\u7b26 Placeholder\uff0c\u4e5f\u53ef\u80fd\u662f\u5177\u4f53\u7684\u5305\u542b\u6570\u503c\u7684\u5355\u5143\u3002","title":"2. Tensor \u548c Blob"},{"location":"single_client/basics_topics/concept_explanation.html#3-job-function","text":"\u5728 OneFlow \u4e2d\uff0c\u6211\u4eec\u5c06\u8bad\u7ec3\u3001\u9884\u6d4b\u7b49\u5177\u4f53\u4efb\u52a1\u7edf\u79f0\u4e3a\u4f5c\u4e1a\u51fd\u6570(job function)\uff0c\u4f5c\u4e1a\u51fd\u6570\u8054\u7cfb\u7528\u6237\u7684\u4e1a\u52a1\u903b\u8f91\u4e0e OneFlow \u7ba1\u7406\u7684\u8ba1\u7b97\u8d44\u6e90\u3002 \u5728 OneFlow \u4e2d\uff0c\u4efb\u4f55\u88ab\u5b9a\u4e49\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u65b9\u6cd5\u4f53\u90fd\u9700\u8981\u7528\u88c5\u9970\u5668 @oneflow.global_function \u4fee\u9970\uff0c\u901a\u8fc7\u6b64\u88c5\u9970\u5668\uff0c\u6211\u4eec\u4e0d\u4ec5\u80fd\u5b9a\u4e49\u4f5c\u4e1a\u7684\u7c7b\u578b(\u5982\uff1a type=\"train\" )\uff0c\u540c\u65f6\u5c06\u4e3a\u4f5c\u4e1a\u7ed1\u5b9a\u4e00\u4e2a FunctionConfig \u5bf9\u8c61\u7528\u4e8e\u8bbe\u7f6e\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\u6240\u9700\u7684\u914d\u7f6e\uff0c\u4f7f\u5f97 OneFlow \u80fd\u65b9\u4fbf\u5730\u4e3a\u6211\u4eec\u7ba1\u7406\u5185\u5b58\u3001GPU \u7b49\u8ba1\u7b97\u8d44\u6e90\u3002","title":"3. Job Function(\u4f5c\u4e1a\u51fd\u6570)"},{"location":"single_client/basics_topics/concept_explanation.html#4-layer-operatorop","text":"","title":"4. Layer \u548c Operator\uff08op\uff09"},{"location":"single_client/basics_topics/concept_explanation.html#layer","text":"Layer \u5373\u8fd0\u7b97\u5c42\uff0clayer \u7684\u6982\u5ff5\u548c tensorflow\u3001pytorch \u7b49\u4e3b\u6d41\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u7c7b\u4f3c\uff0c\u7528\u6765\u63cf\u8ff0\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u4e2d\u7684\u4e00\u4e2a\u5c42\u7ea7\u5982\uff1aconv2d \u5377\u79ef\u5c42\u3001batch_normalization \u5c42\u3001dense \u5168\u8fde\u63a5\u5c42\u3001layer_norm \u6b63\u5219\u5316\u5c42\u7b49\u3002\u5c42\u7684\u5b58\u5728\u7b80\u5316\u4e86\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u642d\u5efa\u8fc7\u7a0b\uff0c\u8b6c\u5982\u4f60\u53ef\u4ee5\u7528\u7b80\u5355\u7684\u51e0\u884c\u4ee3\u7801\u642d\u5efa\u51fa LeNet\uff1a def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) layer \u5e95\u5c42\u662f\u7531\u5404\u79cd\u7b97\u5b50\u62fc\u63a5\u800c\u6210\uff0c\u8b6c\u5982\uff1a layers.conv2d \u5176\u5b9e\u662f\u7531 conv2d \u7b97\u5b50\u548c variable \u7b97\u5b50\u7ec4\u6210\u3002","title":"Layer"},{"location":"single_client/basics_topics/concept_explanation.html#op","text":"Operator \u5373\u7b97\u5b50\uff08\u7b80\u79f0\u4e3aop\uff09\uff0c\u662f OneFlow \u4e2d\u7684 \u57fa\u672c\u8fd0\u7b97\u5355\u5143 \u3002\u4e0a\u9762\u4f8b\u5b50\u4e2d layer \u4e4b\u95f4\u7684\u8ba1\u7b97\u5168\u90e8\u7531\u5404\u79cd\u7b97\u5b50\u53e0\u52a0\u5b8c\u6210\u3002\u8b6c\u5982 flow.nn.max_pool2d \u5c31\u662f\u4e00\u79cd\u7b97\u5b50\uff0c flow.reshape \u662f\u53e6\u4e00\u79cd\u7b97\u5b50\u3002","title":"Op"},{"location":"single_client/basics_topics/concept_explanation.html#5-consistentmirrored-view","text":"OneFlow \u4e2d\u91c7\u53d6\u4e86\u4e24\u79cd\u89c6\u89d2\uff1a Mirrored View \u548c Consistent View \u6765\u63cf\u8ff0\u5206\u5e03\u5f0f\u60c5\u51b5\u4e0b\u6570\u636e\u548c\u6a21\u578b\u7684\u5206\u5e03\uff0c\u4e0d\u540c\u7684 view \u5bf9\u5e94\u4e86\u4e0d\u540c\u7684\u5e76\u884c\u7b56\u7565\u3002 Mirrored View \u6765\u6e90\u4e8e MPI \u5206\u5e03\u5f0f\u8ba1\u7b97\u4e2d\u7684\u955c\u50cf\u7b56\u7565\uff0c\u7528\u4e8e\u63cf\u8ff0\u6570\u636e\u5e76\u884c\u65f6\uff0c\u6a21\u578b\u955c\u50cf\u5230\u591a\u5361\u7684\u884c\u4e3a\uff1b Consistent View \u5219\u8868\u793a\u5c06\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\u7684\u591a\u673a\u591a\u5361\u89c6\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0c\u91c7\u53d6\u6b64\u7b56\u7565\u65f6\uff0cOneFlow \u4f1a\u4e3a\u7528\u6237\u5c4f\u853d\u6389\u5177\u4f53\u7684\u6267\u884c\u65b9\u5f0f\uff0c\u5185\u90e8\u5c06\u4ee5\u6700\u4f18\u5316\u7684\u7b56\u7565\u9009\u62e9\u5e76\u884c\u65b9\u5f0f\uff08\u53ef\u80fd\u662f\u6570\u636e\u5e76\u884c/\u6a21\u578b\u5e76\u884c\u6216\u6df7\u5408\u5e76\u884c\uff09 \u7b80\u5355\u6765\u8bf4\uff1a \u5f53\u8bbe\u7f6e mirrored view \u65f6\uff08 flow.scope.mirrored_view \uff09\u8868\u793a\u53ea\u80fd\u4f7f\u7528 \u6570\u636e\u5e76\u884c \u7684\u65b9\u5f0f\u3002\u8b6c\u5982\u5728 job function \u4e2d\u8bbe\u7f6e\u4e864\u53f0\u5355\u5361\u8282\u70b9\uff0c\u5219\u6a21\u578b\u4f1a\u88ab\u5b8c\u6574\u7684\u590d\u5236/\u955c\u50cf\u52304\u53f0\u8282\u70b9\u7684GPU\u5361\u4e0a\uff0c\u6570\u636e\u5219\u4f1a\u5207\u5206\u4e3a4\u4efd\u5206\u522b\u5582\u7ed94\u53f0\u8282\u70b9\u4e0a\u7684GPU\u5361\u3002 \u5f53\u8bbe\u7f6e consistent view \u65f6( flow.scope.consistent_view )\uff0c\u5219\u8868\u793a\u6ca1\u6709\u9650\u5236\uff0cOneFlow \u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u6a21\u578b\u5e76\u884c\u3001\u6570\u636e\u5e76\u884c\u6216\u8005\u4e24\u8005\u5171\u5b58\u7684\u6df7\u5408\u5e76\u884c\u3002","title":"5. Consistent/Mirrored View"},{"location":"single_client/basics_topics/concept_explanation.html#_2","text":"","title":"\u6846\u67b6\u5f00\u53d1"},{"location":"single_client/basics_topics/concept_explanation.html#1-boxing","text":"\u8d1f\u8d23\u5728\u8fd0\u884c\u65f6\u6839\u636e\u5e76\u884c\u5c5e\u6027\u8f6c\u6362\u5f20\u91cf\u7684\u6a21\u5757\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a Boxing \u3002 \u4f8b\u5982\uff1a\u5f53\u4e0a\u4e0b\u6e38\u7684 op \u5177\u6709\u4e0d\u540c\u7684\u5e76\u884c\u7279\u6027(\u5982\u5e76\u884c\u6570\u4e0d\u540c)\uff0cOneFlow \u5c06\u5229\u7528 Boxing \u81ea\u52a8\u5904\u7406\u5404\u79cd\u6570\u636e\u8f6c\u6362\u548c\u4f20\u8f93\u8fc7\u7a0b\u3002","title":"1. Boxing"},{"location":"single_client/basics_topics/concept_explanation.html#2-sbp","text":"\u672c\u8d28\u4e0a\uff0c\u795e\u7ecf\u7f51\u7edc\u524d\u5411\u540e\u5411\u8fc7\u7a0b\u4e2d\u7684\u5927\u591a\u6570\u64cd\u4f5c\uff0c\u90fd\u53ef\u4ee5\u5f52\u7eb3\u4e3a\u77e9\u9635\u8ba1\u7b97\uff0c\u5728\u77e9\u9635\u8ba1\u7b97\u4e2d\u5e38\u6709\u6839\u636e axis \u5207\u5206\u3001\u5e7f\u64ad\u7b49\u64cd\u4f5c\u3002\u540c\u6837 OneFlow \u4e2d\u4e5f\u6709\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u79f0\u4e3aSBP\uff0c\u5f53\u7136\uff0cOneFlow \u4e2d\u7684 SBP \u4e0d\u4ec5\u4ec5\u662f\u7b80\u5355\u7684\u77e9\u9635\u8fd0\u7b97\uff0c\u5176\u8fd8\u5bf9\u5e94\u4e86\u6570\u636e\u5728\u4e0d\u540c\u7269\u7406 GPU \u4e0a\u7684\u5212\u5206\u3001\u5e7f\u64ad\u7b49\u5b9e\u9645\u64cd\u4f5c\u3002 SBP \u5373 Split\u3001Broadcast\u3001Partial sum \u7684\u7f29\u5199\u3002\u5176\u4e2d Split \u8868\u793a\u5207\u5206\uff1bBroadcast \u8868\u793a\u5e7f\u64ad\uff1bPartial sum \u8868\u793a\u90e8\u5206\u6c42\u548c\u3002","title":"2. SBP"},{"location":"single_client/basics_topics/concept_explanation.html#split","text":"\u5728\u5e76\u884c op \u8ba1\u7b97\u65f6\uff0c\u5f20\u91cf\u88ab split \u5207\u5206\u4e3a\u591a\u4e2a\u5b50\u5f20\u91cf\u3002\u4e0d\u540c\u7684 op \u8fd0\u7b97\u7b26\u5141\u8bb8\u5f20\u91cf\u5728\u4e0d\u540c\u7684 axis \u8f74\u4e0a\u8fdb\u884c\u62c6\u5206\u3002Boxing \u673a\u5236\u5c06\u81ea\u52a8\u5904\u7406\u4e00\u4e2a\u5f20\u91cf\u5728\u591a\u79cd op \u64cd\u4f5c\u4e0b\u5728\u4e0d\u540c\u8f74\u4e0a\u5207\u5206\u7684\u60c5\u51b5\u3002","title":"Split"},{"location":"single_client/basics_topics/concept_explanation.html#broadcast","text":"\u5e76\u884c op \u8ba1\u7b97\u65f6\uff0c\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684\u5f20\u91cf\u88ab\u5e7f\u64ad\u81f3\u591a\u4e2a\u8bbe\u5907\uff0c\u4f7f\u6bcf\u53f0\u8bbe\u5907\u4e0a\u6709\u76f8\u540c\u7684\u5f20\u91cf\u3002","title":"Broadcast"},{"location":"single_client/basics_topics/concept_explanation.html#partial-sum","text":"\u5982\u679c\u4e00\u4e2a op \u5177\u6709\u5206\u914d(distributive)\u5c5e\u6027\uff0c\u5219\u5f20\u91cf\u4f1a\u6839\u636e\u5c5e\u6027\u8fdb\u884c\u90e8\u5206\u7ef4\u5ea6\u7684\u52a0\u548c\u64cd\u4f5c\u3002","title":"Partial Sum"},{"location":"single_client/basics_topics/concept_explanation.html#3-tensorbuffer-tensorlist","text":"\u57fa\u4e8e\u9759\u6001\u56fe\u673a\u5236\uff0cOneFlow \u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u63d0\u524d\u63a8\u7406\u51fa\u5404\u4e2a\u7b97\u5b50\u7684\u5f20\u91cf\u5f62\u72b6\uff0c\u5e76\u5206\u914d\u597d\u5185\u5b58\uff0c\u505a\u5230\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5185\u5b58\u96f6\u62f7\u8d1d\u3002\u4f46\u5728\u67d0\u4e9b\u7279\u6b8a\u573a\u666f\u4e0b\uff0cOneFlow \u9700\u8981\u5904\u7406\u53d8\u957f\u7684\u6570\u636e\uff0c\u6bd4\u5982 DataLoader \u52a0\u8f7d\u7684\u56fe\u7247\u5f62\u72b6\u5728\u7f16\u8bd1\u65f6\u65e0\u6cd5\u83b7\u77e5\u3002\u4e3a\u4e86\u5904\u7406\u8fd9\u79cd\u53d8\u957f\u6570\u636e\uff0cOneFlow \u5185\u90e8\u8bbe\u8ba1\u4e86\u4e24\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5206\u522b\u662f TensorBuffer \u548c TensorList \u3002","title":"3. TensorBuffer \u548c TensorList"},{"location":"single_client/basics_topics/concept_explanation.html#tensorbuffer","text":"TensorBuffer \u662f\u4e00\u4e2a\u8f83\u4e3a\u7075\u6d3b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a\u5b9e\u4f8b\u7684\u7ef4\u5ea6\u3002OneFlow \u4f1a\u4e3a\u6bcf\u4e2a\u5b9e\u4f8b\u751f\u6210\u5bf9\u5e94\u7684 TensorBuffer \u5bf9\u8c61\uff0cTensorBuffer \u5bf9\u8c61\u95f4\u63a5\u5f15\u7528\u5185\u5b58\u6570\u636e\uff0cTensorBuffer \u6240\u5f15\u7528\u7684\u5185\u5b58\u533a\u57df\u662f \u52a8\u6001\u7684\u3001\u4e0d\u8fde\u7eed\u7684 \u3002","title":"TensorBuffer"},{"location":"single_client/basics_topics/concept_explanation.html#tensorlist","text":"\u4e0e TensorBuffer \u7c7b\u4f3c\uff0cTensorList \u4e5f\u662f\u4e00\u79cd\u5b58\u653e\u53d8\u957f\u6570\u636e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6700\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e0e TensorList \u7684\u6570\u636e\u90e8\u5206\u5728\u5185\u5b58\u4e2d\u662f \u8fde\u7eed\u7684 \u3002","title":"TensorList"},{"location":"single_client/basics_topics/data_input.html","text":"\u6570\u636e\u8f93\u5165 \u00b6 \u6df1\u5ea6\u5b66\u4e60\u662f\u4e00\u79cd\u6570\u636e\u9a71\u52a8\u7684\u6280\u672f\uff0c\u4e3a\u4e86\u517c\u987e\u6613\u7528\u6027\u4e0e\u6548\u7387\uff0c OneFlow \u63d0\u4f9b\u4e86\u4e24\u79cd\u201c\u5582\u201d\u6570\u636e\u7ed9\u795e\u7ecf\u7f51\u7edc\u7684\u65b9\u6cd5\uff1a \u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06 NumPy ndarray \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u4f5c\u4e1a\u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4 OneFlow \u80fd\u591f\u76f4\u63a5\u4f7f\u7528 NumPy \u6570\u636e\u4f5c\u4e3a\u8f93\u5165\u3002 \u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 OneFlow \u7684 DataLoader \u53ca\u5176\u76f8\u5173\u7b97\u5b50\uff0c\u4ece\u6587\u4ef6\u7cfb\u7edf\u52a0\u8f7d\u7279\u5b9a\u683c\u5f0f\u7684\u6570\u636e\u96c6\u5e76\u505a\u9884\u5904\u7406\u3002 \u76f4\u63a5\u4f7f\u7528 NumPy \u6570\u636e\u7684\u65b9\u5f0f\u7b80\u5355\u65b9\u4fbf\uff0c\u4f46\u4ec5\u9002\u5408\u5c0f\u6570\u636e\u91cf\u7684\u60c5\u51b5\u3002\u56e0\u4e3a\u5f53\u6570\u636e\u91cf\u8fc7\u5927\u65f6\uff0c\u53ef\u80fd\u5728\u51c6\u5907 NumPy \u6570\u636e\u4e0a\u906d\u9047\u6548\u7387\u74f6\u9888\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u5f0f\u6bd4\u8f83\u9002\u5408\u9879\u76ee\u7684\u521d\u59cb\u9636\u6bb5\uff0c\u5feb\u901f\u9a8c\u8bc1\u548c\u6539\u8fdb\u7b97\u6cd5\uff1b OneFlow \u7684 DataLoader \u5185\u90e8\u91c7\u7528\u4e86\u591a\u7ebf\u7a0b\u548c\u6570\u636e\u6d41\u6c34\u7ebf\u7b49\u6280\u672f\u4f7f\u5f97\u6570\u636e\u52a0\u8f7d\u3001\u6570\u636e\u9884\u5904\u7406\u7b49\u6548\u7387\u66f4\u9ad8\u3002\u4f46\u662f\uff0c\u9700\u8981\u4e3a\u5df2\u7ecf\u652f\u6301\u7684\u683c\u5f0f \u51c6\u5907\u6570\u636e\u96c6 \u3002\u56e0\u6b64\uff0c\u63a8\u8350\u5728\u6210\u719f\u7684\u9879\u76ee\u4e2d\u4f7f\u7528\u3002 \u4f7f\u7528 Numpy \u6570\u636e\u4f5c\u4e3a\u8f93\u5165 \u00b6 \u8fd0\u884c\u4f8b\u5b50 \u00b6 \u5728 Oneflow \u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 NumPy \u7c7b\u578b\u7684\u6570\u636e\u4f5c\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u8f93\u5165\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u4f8b\u5b50\uff1a # feed_numpy.py import numpy as np from oneflow.compatible import single_client as flow from oneflow.compatible.single_client import typing as tp from typing import Tuple @flow . global_function ( type = \"predict\" ) def test_job ( images : tp . Numpy . Placeholder (( 32 , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( 32 ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: # do something with images or labels return ( images , labels ) if __name__ == \"__main__\" : images_in = np . random . uniform ( - 10 , 10 , ( 32 , 1 , 28 , 28 )) . astype ( np . float32 ) labels_in = np . random . randint ( - 10 , 10 , ( 32 ,)) . astype ( np . int32 ) images , labels = test_job ( images_in , labels_in ) print ( images . shape , labels . shape ) \u4e0b\u8f7d\u5b8c\u6574\u4ee3\u7801\uff1a feed_numpy.py \uff0c\u7136\u540e\u7528 python \u6267\u884c\u5373\u53ef\uff1a python feed_numpy.py \u5c06\u5f97\u5230\u5982\u4e0b\u7ed3\u679c ( 32 , 1 , 28 , 28 ) ( 32 , ) \u4ee3\u7801\u89e3\u8bfb \u00b6 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4f5c\u4e1a\u51fd\u6570 test_job() \uff0c\u5176\u8f93\u5165\u4e3a images \u548c labels \uff0c\u5e76\u4e14\u901a\u8fc7\u6ce8\u89e3(\u6ce8\u610f\u5f62\u53c2\u540e\u9762\u662f\u201c:\u201d\uff0c\u800c\u4e0d\u662f\u201c=\u201d\u3002)\u6307\u5b9a\u4e86\u6570\u636e\u7684\u5f62\u72b6\u4e0e\u6570\u636e\u7c7b\u578b\u3002 \u56e0\u6b64\uff0c\u4f8b\u5b50\u4e2d\u6309\u7167\u4f5c\u4e1a\u51fd\u6570\u5bf9\u5f62\u72b6\u548c\u6570\u636e\u7c7b\u578b\u7684\u8981\u6c42\u968f\u673a\u751f\u6210\u4e86 NumPy\u6570\u636e\uff1a images_in \u548c labels_in \uff1a images_in = np . random . uniform ( - 10 , 10 , ( 32 , 1 , 28 , 28 )) . astype ( np . float32 ) labels_in = np . random . randint ( - 10 , 10 , ( 32 , )) . astype ( np . int32 ) \u5e76\u5728\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u76f4\u63a5\u5c06 NumPy \u6570\u636e images_in \u548c labels_in \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff1a images , labels = test_job ( images_in , labels_in ) \u4ee3\u7801\u4e2d\u7684 flow.typing.Numpy.Placeholder \u662f NumPy ndarray \u5bf9\u8c61\u7684\u5360\u4f4d\u7b26\uff0cOneFlow \u4e2d\u8fd8\u6709\u591a\u79cd\u5360\u4f4d\u7b26\uff0c\u53ef\u4ee5\u8868\u793a\u66f4\u590d\u6742\u7684 NumPy \u6570\u636e\u5f62\u5f0f\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 \u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528 \u3002 \u4f7f\u7528 DataLoader \u53ca\u76f8\u5173\u7b97\u5b50 \u00b6 \u5728 oneflow.data \u6a21\u5757\u4e0b\uff0c\u6709\u7528\u4e8e\u52a0\u8f7d\u6570\u636e\u96c6\u7684 DataLoader \u7b97\u5b50\u4ee5\u53ca\u76f8\u5173\u7684\u6570\u636e\u9884\u5904\u7406\u7b97\u5b50\u3002DataLoader \u4e00\u822c\u4ee5 data.xxx_reader \u7684\u5f62\u5f0f\u547d\u540d\uff0c\u5982\u76ee\u524d\u5df2\u6709\u7684 data.ofrecord_reader \u548c data.coco_reader \uff0c\u5206\u522b\u652f\u6301 OneFlow \u539f\u751f\u7684 OFRecord \u683c\u5f0f\u7684\u6587\u4ef6\u548c COCO \u6570\u636e\u96c6\u3002 \u6b64\u5916\uff0c\u5728\u8be5\u6a21\u5757\u4e0b\uff0c\u8fd8\u5305\u542b\u6709\u5176\u5b83\u6570\u636e\u9884\u5904\u7406\u7b97\u5b50\uff0c\u7528\u4e8e\u5904\u7406 DataLoader \u52a0\u8f7d\u540e\u7684\u6570\u636e\u3002\u5982\u4e0b\u6587\u4ee3\u7801\u4f7f\u7528\u7684 data.OFRecordImageDecoderRandomCrop \u7528\u4e8e\u56fe\u7247\u968f\u673a\u88c1\u526a\uff0c data.OFRecordRawDecoder \u7528\u4e8e\u56fe\u7247\u89e3\u7801\u3002\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u67e5\u9605 API \u6587\u6863 \u3002 \u8fd0\u884c\u4f8b\u5b50 \u00b6 \u4ee5\u4e0b\u7684\u4f8b\u5b50\uff0c\u8bfb\u53d6 OFRecord \u6570\u636e\u683c\u5f0f\u6587\u4ef6\uff0c\u5904\u7406\u7684\u662f ImageNet \u6570\u636e\u96c6\u4e2d\u7684\u56fe\u7247\u3002\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u70b9\u6b64\u4e0b\u8f7d\uff1a of_data_pipeline.py \u8fd9\u4e2a\u811a\u672c\uff0c\u9700\u8981\u4e00\u4e2a OFRecord \u6570\u636e\u96c6\uff0c\u4f60\u53ef\u4ee5\u6839\u636e \u8fd9\u7bc7\u6587\u7ae0 \u81ea\u5df1\u5236\u4f5c\u4e00\u4e2a\u3002 \u6216\u8005\u4e0b\u8f7d\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u7684 part-00000 \u6570\u636e\u6587\u4ef6\uff0c\u5b83\u5305\u542b\u4e8664\u5f20\u56fe\u7247\u3002\u5e76\u4e14\uff0c\u5c06\u811a\u672c\u4e2d\u7684 path/to/ImageNet/ofrecord \u66ff\u6362\u4e3a part-00000 \u6587\u4ef6 \u6240\u5728\u7684\u76ee\u5f55 \uff0c\u7136\u540e\u8fd0\u884c\u811a\u672c\u3002 \u4ee5\u4e0b\u662f\u4f7f\u7528\u6211\u4eec\u9884\u5148\u51c6\u5907\u7684\u6570\u636e\u96c6\u8fd0\u884c\u811a\u672c\u7684\u4f8b\u5b50: wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/basics_topics/part-00000 sed -i \"s:path/to/ImageNet/ofrecord:./:\" of_data_pipeline.py python3 of_data_pipeline.py \u5c06\u5f97\u5230\u4e0b\u9762\u7684\u8f93\u51fa\uff1a (64, 3, 224, 224) (64,) \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4f7f\u7528 OneFlow DataLoader \u4e00\u822c\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff1a \u6570\u636e\u52a0\u8f7d \u548c \u6570\u636e\u9884\u5904\u7406 \u3002 \u811a\u672c\u4e2d flow.data.ofrecord_reader \u8d1f\u8d23\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u52a0\u8f7d\u6570\u636e\u5230\u5185\u5b58\u3002 ofrecord = flow . data . ofrecord_reader ( \"path/to/ImageNet/ofrecord\" , batch_size = batch_size , data_part_num = 1 , part_name_suffix_length = 5 , random_shuffle = True , shuffle_after_epoch = True , ) \u9700\u8981\u6307\u5b9a OFRecord \u683c\u5f0f\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\uff0c\u548c\u4e00\u4e9b\u5176\u4ed6\u53c2\u6570\uff0c\u8bf7\u53c2\u8003 data.ofrecord_reader DataLoader \u7684\u8fd4\u56de\u503c\uff0c\u5982\u679c\u662f\u7b80\u5355\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a\u4e0b\u6e38\u7684\u7b97\u5b50\u7684\u8f93\u5165\uff0c\u5426\u5219\uff0c\u9700\u8981\u7ee7\u7eed\u8c03\u7528\u6570\u636e\u9884\u5904\u7406\u7b97\u5b50\uff0c\u8fdb\u884c\u9884\u5904\u7406\u3002 \u6bd4\u5982\uff0c\u5728\u4ee5\u4e0a\u811a\u672c\u4e2d\uff1a image = flow . data . OFRecordImageDecoderRandomCrop ( ofrecord , \"encoded\" , color_space = color_space ) label = flow . data . OFRecordRawDecoder ( ofrecord , \"class/label\" , shape = (), dtype = flow . int32 ) rsz = flow . image . Resize ( image , resize_x = 224 , resize_y = 224 , color_space = color_space ) rng = flow . random . CoinFlip ( batch_size = batch_size ) normal = flow . image . CropMirrorNormalize ( rsz , mirror_blob = rng , color_space = color_space , mean = [ 123.68 , 116.779 , 103.939 ], std = [ 58.393 , 57.12 , 57.375 ], output_dtype = flow . float , ) OFRecordImageDecoderRandomCrop \u8d1f\u8d23\u56fe\u7247\u89e3\u7801\u5e76\u968f\u673a\u505a\u4e86\u88c1\u526a\uff0c OFRecordRawDecoder \u8d1f\u8d23\u4ece ofrecord \u5bf9\u8c61\u4e2d\u76f4\u63a5\u89e3\u7801\u51fa\u6807\u7b7e\uff0c image.Resize \u628a\u88c1\u526a\u540e\u7684\u56fe\u7247\u8c03\u6574\u6210224x224\u7684\u5927\u5c0f\uff0c CropMirrorNormalize \u628a\u56fe\u7247\u8fdb\u884c\u4e86\u6b63\u5219\u5316\u3002 \u652f\u6301\u66f4\u591a\u683c\u5f0f\u7684 DataLoader \u00b6 OneFlow \u63d0\u4f9b\u4e86\u4e00\u4e9b DataLoader \u548c\u9884\u5904\u7406\u7684\u7b97\u5b50\uff0c\u8be6\u7ec6\u8bf7\u53c2\u8003 oneflow.data \u3002","title":"\u6570\u636e\u8f93\u5165"},{"location":"single_client/basics_topics/data_input.html#_1","text":"\u6df1\u5ea6\u5b66\u4e60\u662f\u4e00\u79cd\u6570\u636e\u9a71\u52a8\u7684\u6280\u672f\uff0c\u4e3a\u4e86\u517c\u987e\u6613\u7528\u6027\u4e0e\u6548\u7387\uff0c OneFlow \u63d0\u4f9b\u4e86\u4e24\u79cd\u201c\u5582\u201d\u6570\u636e\u7ed9\u795e\u7ecf\u7f51\u7edc\u7684\u65b9\u6cd5\uff1a \u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06 NumPy ndarray \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u4f5c\u4e1a\u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4 OneFlow \u80fd\u591f\u76f4\u63a5\u4f7f\u7528 NumPy \u6570\u636e\u4f5c\u4e3a\u8f93\u5165\u3002 \u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 OneFlow \u7684 DataLoader \u53ca\u5176\u76f8\u5173\u7b97\u5b50\uff0c\u4ece\u6587\u4ef6\u7cfb\u7edf\u52a0\u8f7d\u7279\u5b9a\u683c\u5f0f\u7684\u6570\u636e\u96c6\u5e76\u505a\u9884\u5904\u7406\u3002 \u76f4\u63a5\u4f7f\u7528 NumPy \u6570\u636e\u7684\u65b9\u5f0f\u7b80\u5355\u65b9\u4fbf\uff0c\u4f46\u4ec5\u9002\u5408\u5c0f\u6570\u636e\u91cf\u7684\u60c5\u51b5\u3002\u56e0\u4e3a\u5f53\u6570\u636e\u91cf\u8fc7\u5927\u65f6\uff0c\u53ef\u80fd\u5728\u51c6\u5907 NumPy \u6570\u636e\u4e0a\u906d\u9047\u6548\u7387\u74f6\u9888\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u5f0f\u6bd4\u8f83\u9002\u5408\u9879\u76ee\u7684\u521d\u59cb\u9636\u6bb5\uff0c\u5feb\u901f\u9a8c\u8bc1\u548c\u6539\u8fdb\u7b97\u6cd5\uff1b OneFlow \u7684 DataLoader \u5185\u90e8\u91c7\u7528\u4e86\u591a\u7ebf\u7a0b\u548c\u6570\u636e\u6d41\u6c34\u7ebf\u7b49\u6280\u672f\u4f7f\u5f97\u6570\u636e\u52a0\u8f7d\u3001\u6570\u636e\u9884\u5904\u7406\u7b49\u6548\u7387\u66f4\u9ad8\u3002\u4f46\u662f\uff0c\u9700\u8981\u4e3a\u5df2\u7ecf\u652f\u6301\u7684\u683c\u5f0f \u51c6\u5907\u6570\u636e\u96c6 \u3002\u56e0\u6b64\uff0c\u63a8\u8350\u5728\u6210\u719f\u7684\u9879\u76ee\u4e2d\u4f7f\u7528\u3002","title":"\u6570\u636e\u8f93\u5165"},{"location":"single_client/basics_topics/data_input.html#numpy","text":"","title":"\u4f7f\u7528 Numpy \u6570\u636e\u4f5c\u4e3a\u8f93\u5165"},{"location":"single_client/basics_topics/data_input.html#_2","text":"\u5728 Oneflow \u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 NumPy \u7c7b\u578b\u7684\u6570\u636e\u4f5c\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u8f93\u5165\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u4f8b\u5b50\uff1a # feed_numpy.py import numpy as np from oneflow.compatible import single_client as flow from oneflow.compatible.single_client import typing as tp from typing import Tuple @flow . global_function ( type = \"predict\" ) def test_job ( images : tp . Numpy . Placeholder (( 32 , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( 32 ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: # do something with images or labels return ( images , labels ) if __name__ == \"__main__\" : images_in = np . random . uniform ( - 10 , 10 , ( 32 , 1 , 28 , 28 )) . astype ( np . float32 ) labels_in = np . random . randint ( - 10 , 10 , ( 32 ,)) . astype ( np . int32 ) images , labels = test_job ( images_in , labels_in ) print ( images . shape , labels . shape ) \u4e0b\u8f7d\u5b8c\u6574\u4ee3\u7801\uff1a feed_numpy.py \uff0c\u7136\u540e\u7528 python \u6267\u884c\u5373\u53ef\uff1a python feed_numpy.py \u5c06\u5f97\u5230\u5982\u4e0b\u7ed3\u679c ( 32 , 1 , 28 , 28 ) ( 32 , )","title":"\u8fd0\u884c\u4f8b\u5b50"},{"location":"single_client/basics_topics/data_input.html#_3","text":"\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4f5c\u4e1a\u51fd\u6570 test_job() \uff0c\u5176\u8f93\u5165\u4e3a images \u548c labels \uff0c\u5e76\u4e14\u901a\u8fc7\u6ce8\u89e3(\u6ce8\u610f\u5f62\u53c2\u540e\u9762\u662f\u201c:\u201d\uff0c\u800c\u4e0d\u662f\u201c=\u201d\u3002)\u6307\u5b9a\u4e86\u6570\u636e\u7684\u5f62\u72b6\u4e0e\u6570\u636e\u7c7b\u578b\u3002 \u56e0\u6b64\uff0c\u4f8b\u5b50\u4e2d\u6309\u7167\u4f5c\u4e1a\u51fd\u6570\u5bf9\u5f62\u72b6\u548c\u6570\u636e\u7c7b\u578b\u7684\u8981\u6c42\u968f\u673a\u751f\u6210\u4e86 NumPy\u6570\u636e\uff1a images_in \u548c labels_in \uff1a images_in = np . random . uniform ( - 10 , 10 , ( 32 , 1 , 28 , 28 )) . astype ( np . float32 ) labels_in = np . random . randint ( - 10 , 10 , ( 32 , )) . astype ( np . int32 ) \u5e76\u5728\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u76f4\u63a5\u5c06 NumPy \u6570\u636e images_in \u548c labels_in \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff1a images , labels = test_job ( images_in , labels_in ) \u4ee3\u7801\u4e2d\u7684 flow.typing.Numpy.Placeholder \u662f NumPy ndarray \u5bf9\u8c61\u7684\u5360\u4f4d\u7b26\uff0cOneFlow \u4e2d\u8fd8\u6709\u591a\u79cd\u5360\u4f4d\u7b26\uff0c\u53ef\u4ee5\u8868\u793a\u66f4\u590d\u6742\u7684 NumPy \u6570\u636e\u5f62\u5f0f\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 \u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528 \u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"single_client/basics_topics/data_input.html#dataloader","text":"\u5728 oneflow.data \u6a21\u5757\u4e0b\uff0c\u6709\u7528\u4e8e\u52a0\u8f7d\u6570\u636e\u96c6\u7684 DataLoader \u7b97\u5b50\u4ee5\u53ca\u76f8\u5173\u7684\u6570\u636e\u9884\u5904\u7406\u7b97\u5b50\u3002DataLoader \u4e00\u822c\u4ee5 data.xxx_reader \u7684\u5f62\u5f0f\u547d\u540d\uff0c\u5982\u76ee\u524d\u5df2\u6709\u7684 data.ofrecord_reader \u548c data.coco_reader \uff0c\u5206\u522b\u652f\u6301 OneFlow \u539f\u751f\u7684 OFRecord \u683c\u5f0f\u7684\u6587\u4ef6\u548c COCO \u6570\u636e\u96c6\u3002 \u6b64\u5916\uff0c\u5728\u8be5\u6a21\u5757\u4e0b\uff0c\u8fd8\u5305\u542b\u6709\u5176\u5b83\u6570\u636e\u9884\u5904\u7406\u7b97\u5b50\uff0c\u7528\u4e8e\u5904\u7406 DataLoader \u52a0\u8f7d\u540e\u7684\u6570\u636e\u3002\u5982\u4e0b\u6587\u4ee3\u7801\u4f7f\u7528\u7684 data.OFRecordImageDecoderRandomCrop \u7528\u4e8e\u56fe\u7247\u968f\u673a\u88c1\u526a\uff0c data.OFRecordRawDecoder \u7528\u4e8e\u56fe\u7247\u89e3\u7801\u3002\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u67e5\u9605 API \u6587\u6863 \u3002","title":"\u4f7f\u7528 DataLoader \u53ca\u76f8\u5173\u7b97\u5b50"},{"location":"single_client/basics_topics/data_input.html#_4","text":"\u4ee5\u4e0b\u7684\u4f8b\u5b50\uff0c\u8bfb\u53d6 OFRecord \u6570\u636e\u683c\u5f0f\u6587\u4ef6\uff0c\u5904\u7406\u7684\u662f ImageNet \u6570\u636e\u96c6\u4e2d\u7684\u56fe\u7247\u3002\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u70b9\u6b64\u4e0b\u8f7d\uff1a of_data_pipeline.py \u8fd9\u4e2a\u811a\u672c\uff0c\u9700\u8981\u4e00\u4e2a OFRecord \u6570\u636e\u96c6\uff0c\u4f60\u53ef\u4ee5\u6839\u636e \u8fd9\u7bc7\u6587\u7ae0 \u81ea\u5df1\u5236\u4f5c\u4e00\u4e2a\u3002 \u6216\u8005\u4e0b\u8f7d\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u7684 part-00000 \u6570\u636e\u6587\u4ef6\uff0c\u5b83\u5305\u542b\u4e8664\u5f20\u56fe\u7247\u3002\u5e76\u4e14\uff0c\u5c06\u811a\u672c\u4e2d\u7684 path/to/ImageNet/ofrecord \u66ff\u6362\u4e3a part-00000 \u6587\u4ef6 \u6240\u5728\u7684\u76ee\u5f55 \uff0c\u7136\u540e\u8fd0\u884c\u811a\u672c\u3002 \u4ee5\u4e0b\u662f\u4f7f\u7528\u6211\u4eec\u9884\u5148\u51c6\u5907\u7684\u6570\u636e\u96c6\u8fd0\u884c\u811a\u672c\u7684\u4f8b\u5b50: wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/basics_topics/part-00000 sed -i \"s:path/to/ImageNet/ofrecord:./:\" of_data_pipeline.py python3 of_data_pipeline.py \u5c06\u5f97\u5230\u4e0b\u9762\u7684\u8f93\u51fa\uff1a (64, 3, 224, 224) (64,)","title":"\u8fd0\u884c\u4f8b\u5b50"},{"location":"single_client/basics_topics/data_input.html#_5","text":"\u4f7f\u7528 OneFlow DataLoader \u4e00\u822c\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff1a \u6570\u636e\u52a0\u8f7d \u548c \u6570\u636e\u9884\u5904\u7406 \u3002 \u811a\u672c\u4e2d flow.data.ofrecord_reader \u8d1f\u8d23\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u52a0\u8f7d\u6570\u636e\u5230\u5185\u5b58\u3002 ofrecord = flow . data . ofrecord_reader ( \"path/to/ImageNet/ofrecord\" , batch_size = batch_size , data_part_num = 1 , part_name_suffix_length = 5 , random_shuffle = True , shuffle_after_epoch = True , ) \u9700\u8981\u6307\u5b9a OFRecord \u683c\u5f0f\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\uff0c\u548c\u4e00\u4e9b\u5176\u4ed6\u53c2\u6570\uff0c\u8bf7\u53c2\u8003 data.ofrecord_reader DataLoader \u7684\u8fd4\u56de\u503c\uff0c\u5982\u679c\u662f\u7b80\u5355\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a\u4e0b\u6e38\u7684\u7b97\u5b50\u7684\u8f93\u5165\uff0c\u5426\u5219\uff0c\u9700\u8981\u7ee7\u7eed\u8c03\u7528\u6570\u636e\u9884\u5904\u7406\u7b97\u5b50\uff0c\u8fdb\u884c\u9884\u5904\u7406\u3002 \u6bd4\u5982\uff0c\u5728\u4ee5\u4e0a\u811a\u672c\u4e2d\uff1a image = flow . data . OFRecordImageDecoderRandomCrop ( ofrecord , \"encoded\" , color_space = color_space ) label = flow . data . OFRecordRawDecoder ( ofrecord , \"class/label\" , shape = (), dtype = flow . int32 ) rsz = flow . image . Resize ( image , resize_x = 224 , resize_y = 224 , color_space = color_space ) rng = flow . random . CoinFlip ( batch_size = batch_size ) normal = flow . image . CropMirrorNormalize ( rsz , mirror_blob = rng , color_space = color_space , mean = [ 123.68 , 116.779 , 103.939 ], std = [ 58.393 , 57.12 , 57.375 ], output_dtype = flow . float , ) OFRecordImageDecoderRandomCrop \u8d1f\u8d23\u56fe\u7247\u89e3\u7801\u5e76\u968f\u673a\u505a\u4e86\u88c1\u526a\uff0c OFRecordRawDecoder \u8d1f\u8d23\u4ece ofrecord \u5bf9\u8c61\u4e2d\u76f4\u63a5\u89e3\u7801\u51fa\u6807\u7b7e\uff0c image.Resize \u628a\u88c1\u526a\u540e\u7684\u56fe\u7247\u8c03\u6574\u6210224x224\u7684\u5927\u5c0f\uff0c CropMirrorNormalize \u628a\u56fe\u7247\u8fdb\u884c\u4e86\u6b63\u5219\u5316\u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"single_client/basics_topics/data_input.html#dataloader_1","text":"OneFlow \u63d0\u4f9b\u4e86\u4e00\u4e9b DataLoader \u548c\u9884\u5904\u7406\u7684\u7b97\u5b50\uff0c\u8be6\u7ec6\u8bf7\u53c2\u8003 oneflow.data \u3002","title":"\u652f\u6301\u66f4\u591a\u683c\u5f0f\u7684 DataLoader"},{"location":"single_client/basics_topics/distributed_train.html","text":"\u5206\u5e03\u5f0f\u8bad\u7ec3 \u00b6 \u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u573a\u666f\u9700\u8981\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u7531\u4e8e\u5206\u5e03\u5f0f\u7cfb\u7edf\u9762\u4e34\u5355\u673a\u5355\u5361\u6240\u6ca1\u6709\u7684\u5206\u5e03\u5f0f\u4efb\u52a1\u8c03\u5ea6\u3001\u590d\u6742\u7684\u8d44\u6e90\u5e76\u884c\u7b49\u95ee\u9898\uff0c\u56e0\u6b64\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u5bf9\u7528\u6237\u6709\u4e00\u5b9a\u7684\u6280\u672f\u95e8\u69db\u3002 \u5728 OneFlow \u4e2d\uff0c\u901a\u8fc7\u9876\u5c42\u8bbe\u8ba1\u4e0e\u5de5\u7a0b\u521b\u65b0\uff0c\u505a\u5230\u4e86 \u5206\u5e03\u5f0f\u6700\u6613\u7528 \uff0c\u7528\u6237\u4e0d\u9700\u8981\u7279\u522b\u6539\u52a8\u7f51\u7edc\u7ed3\u6784\u548c\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u4f7f\u7528 OneFlow \u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u8fd9\u662f OneFlow \u533a\u522b\u4e8e\u5176\u5b83\u6846\u67b6\u7684 \u6700\u91cd\u8981\u7279\u6027 \u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a \u5982\u4f55\u5c06\u5355\u673a\u7a0b\u5e8f\u4fee\u6539\u4e3a\u5206\u5e03\u5f0f\u7a0b\u5e8f OneFlow \u4e2d\u8282\u70b9\u6982\u5ff5\u53ca\u5206\u5de5 OneFlow \u5206\u5e03\u5f0f\u4f18\u52bf \u00b6 \u91c7\u7528\u53bb\u4e2d\u5fc3\u5316\u7684\u6d41\u5f0f\u67b6\u6784\uff0c\u800c\u975e master \u4e0e worker \u67b6\u6784\uff0c\u6700\u5927\u7a0b\u5ea6\u4f18\u5316\u8282\u70b9\u7f51\u7edc\u901a\u4fe1\u6548\u7387 \u63d0\u4f9b consistent view \uff0c\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u50cf\u7f16\u5199\u5355\u673a\u5355\u5361\u7a0b\u5e8f\u90a3\u6837\u7f16\u5199\u5206\u5e03\u5f0f\u7a0b\u5e8f \u63d0\u4f9b mirrored view \uff0c\u719f\u6089\u5176\u5b83\u6846\u67b6\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u7528\u6237\u53ef\u76f4\u63a5\u4e0a\u624b \u6781\u7b80\u914d\u7f6e\uff0c\u7531\u5355\u673a\u5355\u5361\u7684\u8bad\u7ec3\u7a0b\u5e8f\u8f6c\u53d8\u4e3a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\uff0c\u53ea\u9700\u8981\u51e0\u884c\u914d\u7f6e\u4ee3\u7801 \u914d\u7f6e\u5206\u5e03\u5f0f\u8bad\u7ec3\u7f51\u7edc \u00b6 \u53ea\u9700\u8981\u589e\u52a0\u51e0\u884c\u7b80\u5355\u7684\u914d\u7f6e\u4ee3\u7801\uff0c\u6307\u5b9a\u5206\u5e03\u5f0f\u8ba1\u7b97\u7684\u8282\u70b9 IP \u4ee5\u53ca\u6bcf\u4e2a\u8282\u70b9\u4f7f\u7528 GPU \u7684\u6570\u91cf\uff0c\u5373\u53ef\u5b9e\u73b0\u5206\u5e03\u5f0f\u7684\u8bad\u7ec3\u7f51\u7edc\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4f7f\u5f97\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f\u4e0e\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u4f5c\u4e3a OneFlow \u7528\u6237\uff0c\u53ea\u9700\u8981\u4e13\u6ce8\u4e8e\u7a0b\u5e8f\u7684 \u4e1a\u52a1\u903b\u8f91 \u53ca \u6a21\u578b\u7ed3\u6784\u672c\u8eab \uff0c\u800c\u4e0d\u7528\u64cd\u5fc3\u5206\u5e03\u5f0f\u6267\u884c\u95ee\u9898\u3002\u5206\u5e03\u5f0f\u7684\u4e00\u5207\u95ee\u9898\uff0c\u90fd\u7531 OneFlow \u5904\u7406\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u4f1a\u4ecb\u7ecd\u4e00\u4e2a\u4f8b\u5b50\uff1a\u5c06\u5355\u673a\u7248\u7684\u8bad\u7ec3\u7a0b\u5e8f\uff0c\u901a\u8fc7\u6dfb\u52a0\u51e0\u884c\u914d\u7f6e\u4ee3\u7801\u540e\u5c06\u5176\u6539\u9020\u4e3a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\u3002 \u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f \u00b6 \u4ee5\u4e0b\u662f\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f\u7684\u6846\u67b6\uff0c\u56e0\u4e3a\u5176\u7f51\u7edc\u7ed3\u6784\u53ca\u4e1a\u52a1\u903b\u8f91\u4e0e\u6587\u672b\u7684\u5206\u5e03\u5f0f\u7a0b\u5e8f\u5b8c\u5168\u4e00\u6837\uff0c\u56e0\u6b64\u51fd\u6570\u5b9e\u73b0\u672a\u8be6\u7ec6\u5217\u51fa\u3002 import numpy as np from oneflow.compatible import single_client as flow from oneflow.compatible.single_client import typing as tp BATCH_SIZE = 100 def mlp ( data ): #\u6784\u5efa\u7f51\u7edc... @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : #\u4f5c\u4e1a\u51fd\u6570\u5b9e\u73b0... #\u914d\u7f6e\u8bad\u7ec3\u4f18\u5316\u65b9\u6cd5\u548c\u53c2\u6570 if __name__ == '__main__' : #\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5f00\u59cb\u8bad\u7ec3... loss = train_job ( images , labels ) #... GPU\u53ca\u7aef\u53e3\u914d\u7f6e \u00b6 \u5728 oneflow.config \u6a21\u5757\u4e2d\uff0c\u63d0\u4f9b\u4e86\u5206\u5e03\u5f0f\u76f8\u5173\u7684\u8bbe\u7f6e\u63a5\u53e3\uff0c\u6211\u4eec\u4e3b\u8981\u4f7f\u7528\u5176\u4e2d\u4e24\u4e2a\uff1a oneflow.config.gpu_device_num : \u8bbe\u7f6e\u6240\u4f7f\u7528\u7684 GPU \u7684\u6570\u76ee\uff0c\u8fd9\u4e2a\u53c2\u6570\u4f1a\u5e94\u7528\u5230\u6240\u6709\u7684\u673a\u5668\u4e2d\uff1b oneflow.config.ctrl_port : \u8bbe\u7f6e\u7528\u4e8e\u901a\u4fe1\u7684\u7aef\u53e3\u53f7\uff0c\u6240\u6709\u673a\u5668\u4e0a\u90fd\u5c06\u4f7f\u7528\u76f8\u540c\u7684\u7aef\u53e3\u53f7\u8fdb\u884c\u901a\u4fe1\u3002 \u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u8bbe\u7f6e\u6bcf\u53f0\u4e3b\u673a\u4f7f\u7528\u7684 GPU \u6570\u76ee\u4e3a1\uff0c\u91c7\u75289988\u7aef\u53e3\u901a\u4fe1\u3002\u5927\u5bb6\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u73af\u5883\u7684\u5177\u4f53\u60c5\u51b5\u8fdb\u884c\u4fee\u6539\u3002 #\u6bcf\u4e2a\u8282\u70b9\u7684 gpu \u4f7f\u7528\u6570\u76ee flow . config . gpu_device_num ( 1 ) #\u901a\u4fe1\u7aef\u53e3 flow . env . ctrl_port ( 9988 ) \u6ce8\u610f\uff0c\u5373\u4f7f\u662f\u5355\u673a\u7684\u8bad\u7ec3\uff0c\u53ea\u8981\u6709\u591a\u5f20 GPU \u5361\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7 flow.config.gpu_device_num \u5c06\u5355\u673a\u7a0b\u5e8f\uff0c\u8bbe\u7f6e\u4e3a\u5355\u673a\u591a\u5361\u7684\u5206\u5e03\u5f0f\u7a0b\u5e8f\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff0c\u8bbe\u7f6e1\u53f0(\u6bcf\u53f0)\u673a\u5668\u4e0a\uff0c2\u5f20 GPU \u5361\u53c2\u4e0e\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1a flow . config . gpu_device_num ( 2 ) \u8282\u70b9\u914d\u7f6e \u00b6 \u63a5\u7740\uff0c\u6211\u4eec\u9700\u8981\u914d\u7f6e\u7f51\u7edc\u4e2d\u7684\u4e3b\u673a\u5173\u7cfb\uff0c\u9700\u8981\u63d0\u524d\u8bf4\u660e\u7684\u662f\uff0cOneFlow \u4e2d\uff0c\u5c06\u5206\u5e03\u5f0f\u4e2d\u7684\u4e3b\u673a\u79f0\u4e3a\u8282\u70b9( node )\u3002 \u6bcf\u4e2a\u8282\u70b9\u7684\u7ec4\u7f51\u4fe1\u606f\uff0c\u7531\u4e00\u4e2a dict \u7c7b\u578b\u5b58\u653e\uff0c\u5176\u4e2d\u7684 \"addr\" \u8fd9\u4e2a key \u5bf9\u5e94\u4e86\u8282\u70b9\u7684 IP \u3002 \u6240\u6709\u7684\u8282\u70b9\u653e\u7f6e\u5728\u4e00\u4e2a list \u4e2d\uff0c\u7ecf\u63a5\u53e3 flow.env.machine \u544a\u4e4b OneFlow \uff0cOneFlow \u5185\u90e8\u4f1a\u81ea\u52a8\u5efa\u7acb\u5404\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u3002 nodes = [{ \"addr\" : \"192.168.1.12\" }, { \"addr\" : \"192.168.1.11\" }] flow . env . machine ( nodes ) \u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u67092\u4e2a\u8282\u70b9\uff0cIP \u5206\u522b\u4e3a\"192.168.1.12\"\u4e0e\"192.168.1.11\"\u3002 \u6ce8\u610f\uff0c\u8282\u70b9 list \u4e2d\u7684\u7b2c0\u4e2a\u8282\u70b9(\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684\"192.168.1.12\")\uff0c\u53c8\u79f0\u4e3a master node \uff0c\u6574\u4e2a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7cfb\u7edf\u542f\u52a8\u540e\uff0c\u7531\u5b83\u5b8c\u6210\u6784\u56fe\uff0c\u5176\u5b83\u8282\u70b9\u7b49\u5f85\uff1b\u5f53\u6784\u56fe\u5b8c\u6210\u540e\uff0c\u6240\u6709\u8282\u70b9\u4f1a\u6536\u5230\u901a\u77e5\uff0c\u77e5\u6653\u5404\u81ea\u8054\u7cfb\u7684\u5176\u5b83\u8282\u70b9\uff0c\u53bb\u4e2d\u5fc3\u5316\u5730\u534f\u540c\u8fd0\u884c\u3002 \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u7531 master node \u4fdd\u7559\u6807\u51c6\u8f93\u51fa\u53ca\u4fdd\u5b58\u6a21\u578b\uff0c\u5176\u5b83\u8282\u70b9\u53ea\u8d1f\u8d23\u8ba1\u7b97\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u9488\u5bf9\u5206\u5e03\u5f0f\u7684\u914d\u7f6e\u4ee3\u7801\u5c01\u88c5\u4e3a\u51fd\u6570\uff0c\u65b9\u4fbf\u8c03\u7528\uff1a def config_distributed (): print ( \"distributed config\" ) #\u6bcf\u4e2a\u8282\u70b9\u7684gpu\u4f7f\u7528\u6570\u76ee flow . config . gpu_device_num ( 1 ) #\u901a\u4fe1\u7aef\u53e3 flow . env . ctrl_port ( 9988 ) #\u8282\u70b9\u914d\u7f6e nodes = [{ \"addr\" : \"192.168.1.12\" }, { \"addr\" : \"192.168.1.11\" }] flow . env . machine ( nodes ) \u5206\u5e03\u5f0f\u8bad\u7ec3\u53ca\u4ee3\u7801 \u00b6 \u5355\u673a\u7a0b\u5e8f\u52a0\u5165 OneFlow \u7684\u5206\u5e03\u5f0f\u914d\u7f6e\u4ee3\u7801\u540e\uff0c\u5c31\u6210\u4e3a\u4e86\u5206\u5e03\u5f0f\u7a0b\u5e8f\uff0c\u5728\u6240\u6709\u7684\u8282\u70b9\u8fd0\u884c\u4e00\u6837\u7684\u7a0b\u5e8f\u5373\u53ef\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\u4e0e\u4e0a\u6587\u7684 \u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f \u6bd4\u8f83\uff0c\u4f1a\u53d1\u73b0\u4ec5\u4ec5\u53ea\u662f\u589e\u52a0\u4e86 config_distributed \u51fd\u6570\u5e76\u8c03\u7528\uff0c\u6211\u4eec\u4e4b\u524d\u7684\u5355\u673a\u8bad\u7ec3\u811a\u672c\uff0c\u5c31\u6210\u4e3a\u4e86\u5206\u5e03\u5f0f\u8bad\u7ec3\u811a\u672c\u3002 \u5206\u5e03\u5f0f\u811a\u672c\u4ee3\u7801\uff1a distributed_train.py \u5728 192.168.1.12 \u53ca 192.168.1.11 \u4e0a \u5747\u8fd0\u884c\uff1a wget https://docs.oneflow.org/master/code/basics_topics/distributed_train.py python3 distributed_train.py 192.168.1.12 \u673a\u5668\u4e0a\u5c06\u663e\u793a\u7a0b\u5e8f\u7ed3\u679c\u3002 FAQ \u00b6 \u8fd0\u884c\u672c\u6587\u5206\u5e03\u5f0f\u4ee3\u7801\u540e\uff0c\u7a0b\u5e8f\u957f\u671f\u7b49\u5f85\uff0c\u672a\u663e\u793a\u8ba1\u7b97\u7ed3\u679c \u8bf7\u68c0\u67e5 ssh \u914d\u7f6e\uff0c\u786e\u4fdd\u4e24\u53f0\u673a\u5668\u4e4b\u95f4\u80fd\u591f\u514d\u5bc6 ssh \u4e92\u8054 \u8bf7\u786e\u4fdd\u4e24\u53f0\u673a\u5668\u4f7f\u7528\u4e86\u76f8\u540c\u7248\u672c\u7684 OneFlow\u3001\u8fd0\u884c\u7684\u811a\u672c\u7a0b\u5e8f\u5b8c\u5168\u4e00\u6837 \u8bf7\u786e\u4fdd\u8bad\u7ec3\u4f7f\u7528\u7684\u7aef\u53e3\u672a\u88ab\u5360\u7528\uff0c\u6216\u4f7f\u7528 oneflow.config.ctrl_port \u66f4\u6362\u7aef\u53e3 \u5982\u679c\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6e\u4e86\u4ee3\u7406\uff0c\u8bf7\u786e\u4fdd\u4ee3\u7406\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u6216\u8005\u53d6\u6d88\u6389\u4ee3\u7406 \u5728 docker \u4e2d\u8dd1\u8bad\u7ec3\uff0c\u7a0b\u5e8f\u957f\u671f\u7b49\u5f85\uff0c\u672a\u663e\u793a\u8ba1\u7b97\u7ed3\u679c docker \u9ed8\u8ba4\u7684\u6a21\u5f0f\u4e0b\uff0c\u7269\u7406\u673a\u4e0e\u5bb9\u5668\u4e2d\u7684\u7aef\u53e3\u662f\u9694\u79bb\u7684\uff0c\u8bf7\u4f7f\u7528 --net=host host \u6a21\u5f0f\uff0c\u6216\u8005\u542f\u52a8\u5bb9\u5668\u65f6\u4f7f\u7528 -p \u9009\u9879\u8fdb\u884c\u7aef\u53e3\u6620\u5c04\u3002\u5177\u4f53\u8bf7\u67e5\u9605 docker \u7684\u624b\u518c \u5b58\u5728\u865a\u62df\u7f51\u5361\u7684\u60c5\u51b5 \u82e5\u5b58\u5728\u865a\u62df\u7f51\u5361\uff0c\u53ef\u80fd\u56e0\u4e3a nccl \u7684\u901a\u4fe1\u8d70\u865a\u62df\u7f51\u5361\u800c\u65e0\u6cd5\u901a\u4fe1\u3002\u6b64\u65f6\u9700\u8981\u901a\u8fc7 export NCCL_SOCKET_IFNAME=device_name \u6765\u6307\u5b9a\u901a\u4fe1\u7f51\u5361\uff0c\u5177\u4f53\u53ef\u53c2\u9605 nccl \u5b98\u65b9\u6587\u6863","title":"\u5206\u5e03\u5f0f\u8bad\u7ec3"},{"location":"single_client/basics_topics/distributed_train.html#_1","text":"\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u573a\u666f\u9700\u8981\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u7531\u4e8e\u5206\u5e03\u5f0f\u7cfb\u7edf\u9762\u4e34\u5355\u673a\u5355\u5361\u6240\u6ca1\u6709\u7684\u5206\u5e03\u5f0f\u4efb\u52a1\u8c03\u5ea6\u3001\u590d\u6742\u7684\u8d44\u6e90\u5e76\u884c\u7b49\u95ee\u9898\uff0c\u56e0\u6b64\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u5bf9\u7528\u6237\u6709\u4e00\u5b9a\u7684\u6280\u672f\u95e8\u69db\u3002 \u5728 OneFlow \u4e2d\uff0c\u901a\u8fc7\u9876\u5c42\u8bbe\u8ba1\u4e0e\u5de5\u7a0b\u521b\u65b0\uff0c\u505a\u5230\u4e86 \u5206\u5e03\u5f0f\u6700\u6613\u7528 \uff0c\u7528\u6237\u4e0d\u9700\u8981\u7279\u522b\u6539\u52a8\u7f51\u7edc\u7ed3\u6784\u548c\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u4f7f\u7528 OneFlow \u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u8fd9\u662f OneFlow \u533a\u522b\u4e8e\u5176\u5b83\u6846\u67b6\u7684 \u6700\u91cd\u8981\u7279\u6027 \u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a \u5982\u4f55\u5c06\u5355\u673a\u7a0b\u5e8f\u4fee\u6539\u4e3a\u5206\u5e03\u5f0f\u7a0b\u5e8f OneFlow \u4e2d\u8282\u70b9\u6982\u5ff5\u53ca\u5206\u5de5","title":"\u5206\u5e03\u5f0f\u8bad\u7ec3"},{"location":"single_client/basics_topics/distributed_train.html#oneflow","text":"\u91c7\u7528\u53bb\u4e2d\u5fc3\u5316\u7684\u6d41\u5f0f\u67b6\u6784\uff0c\u800c\u975e master \u4e0e worker \u67b6\u6784\uff0c\u6700\u5927\u7a0b\u5ea6\u4f18\u5316\u8282\u70b9\u7f51\u7edc\u901a\u4fe1\u6548\u7387 \u63d0\u4f9b consistent view \uff0c\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u50cf\u7f16\u5199\u5355\u673a\u5355\u5361\u7a0b\u5e8f\u90a3\u6837\u7f16\u5199\u5206\u5e03\u5f0f\u7a0b\u5e8f \u63d0\u4f9b mirrored view \uff0c\u719f\u6089\u5176\u5b83\u6846\u67b6\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u7528\u6237\u53ef\u76f4\u63a5\u4e0a\u624b \u6781\u7b80\u914d\u7f6e\uff0c\u7531\u5355\u673a\u5355\u5361\u7684\u8bad\u7ec3\u7a0b\u5e8f\u8f6c\u53d8\u4e3a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\uff0c\u53ea\u9700\u8981\u51e0\u884c\u914d\u7f6e\u4ee3\u7801","title":"OneFlow \u5206\u5e03\u5f0f\u4f18\u52bf"},{"location":"single_client/basics_topics/distributed_train.html#_2","text":"\u53ea\u9700\u8981\u589e\u52a0\u51e0\u884c\u7b80\u5355\u7684\u914d\u7f6e\u4ee3\u7801\uff0c\u6307\u5b9a\u5206\u5e03\u5f0f\u8ba1\u7b97\u7684\u8282\u70b9 IP \u4ee5\u53ca\u6bcf\u4e2a\u8282\u70b9\u4f7f\u7528 GPU \u7684\u6570\u91cf\uff0c\u5373\u53ef\u5b9e\u73b0\u5206\u5e03\u5f0f\u7684\u8bad\u7ec3\u7f51\u7edc\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4f7f\u5f97\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f\u4e0e\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u4f5c\u4e3a OneFlow \u7528\u6237\uff0c\u53ea\u9700\u8981\u4e13\u6ce8\u4e8e\u7a0b\u5e8f\u7684 \u4e1a\u52a1\u903b\u8f91 \u53ca \u6a21\u578b\u7ed3\u6784\u672c\u8eab \uff0c\u800c\u4e0d\u7528\u64cd\u5fc3\u5206\u5e03\u5f0f\u6267\u884c\u95ee\u9898\u3002\u5206\u5e03\u5f0f\u7684\u4e00\u5207\u95ee\u9898\uff0c\u90fd\u7531 OneFlow \u5904\u7406\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u4f1a\u4ecb\u7ecd\u4e00\u4e2a\u4f8b\u5b50\uff1a\u5c06\u5355\u673a\u7248\u7684\u8bad\u7ec3\u7a0b\u5e8f\uff0c\u901a\u8fc7\u6dfb\u52a0\u51e0\u884c\u914d\u7f6e\u4ee3\u7801\u540e\u5c06\u5176\u6539\u9020\u4e3a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\u3002","title":"\u914d\u7f6e\u5206\u5e03\u5f0f\u8bad\u7ec3\u7f51\u7edc"},{"location":"single_client/basics_topics/distributed_train.html#_3","text":"\u4ee5\u4e0b\u662f\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f\u7684\u6846\u67b6\uff0c\u56e0\u4e3a\u5176\u7f51\u7edc\u7ed3\u6784\u53ca\u4e1a\u52a1\u903b\u8f91\u4e0e\u6587\u672b\u7684\u5206\u5e03\u5f0f\u7a0b\u5e8f\u5b8c\u5168\u4e00\u6837\uff0c\u56e0\u6b64\u51fd\u6570\u5b9e\u73b0\u672a\u8be6\u7ec6\u5217\u51fa\u3002 import numpy as np from oneflow.compatible import single_client as flow from oneflow.compatible.single_client import typing as tp BATCH_SIZE = 100 def mlp ( data ): #\u6784\u5efa\u7f51\u7edc... @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : #\u4f5c\u4e1a\u51fd\u6570\u5b9e\u73b0... #\u914d\u7f6e\u8bad\u7ec3\u4f18\u5316\u65b9\u6cd5\u548c\u53c2\u6570 if __name__ == '__main__' : #\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5f00\u59cb\u8bad\u7ec3... loss = train_job ( images , labels ) #...","title":"\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f"},{"location":"single_client/basics_topics/distributed_train.html#gpu","text":"\u5728 oneflow.config \u6a21\u5757\u4e2d\uff0c\u63d0\u4f9b\u4e86\u5206\u5e03\u5f0f\u76f8\u5173\u7684\u8bbe\u7f6e\u63a5\u53e3\uff0c\u6211\u4eec\u4e3b\u8981\u4f7f\u7528\u5176\u4e2d\u4e24\u4e2a\uff1a oneflow.config.gpu_device_num : \u8bbe\u7f6e\u6240\u4f7f\u7528\u7684 GPU \u7684\u6570\u76ee\uff0c\u8fd9\u4e2a\u53c2\u6570\u4f1a\u5e94\u7528\u5230\u6240\u6709\u7684\u673a\u5668\u4e2d\uff1b oneflow.config.ctrl_port : \u8bbe\u7f6e\u7528\u4e8e\u901a\u4fe1\u7684\u7aef\u53e3\u53f7\uff0c\u6240\u6709\u673a\u5668\u4e0a\u90fd\u5c06\u4f7f\u7528\u76f8\u540c\u7684\u7aef\u53e3\u53f7\u8fdb\u884c\u901a\u4fe1\u3002 \u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u8bbe\u7f6e\u6bcf\u53f0\u4e3b\u673a\u4f7f\u7528\u7684 GPU \u6570\u76ee\u4e3a1\uff0c\u91c7\u75289988\u7aef\u53e3\u901a\u4fe1\u3002\u5927\u5bb6\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u73af\u5883\u7684\u5177\u4f53\u60c5\u51b5\u8fdb\u884c\u4fee\u6539\u3002 #\u6bcf\u4e2a\u8282\u70b9\u7684 gpu \u4f7f\u7528\u6570\u76ee flow . config . gpu_device_num ( 1 ) #\u901a\u4fe1\u7aef\u53e3 flow . env . ctrl_port ( 9988 ) \u6ce8\u610f\uff0c\u5373\u4f7f\u662f\u5355\u673a\u7684\u8bad\u7ec3\uff0c\u53ea\u8981\u6709\u591a\u5f20 GPU \u5361\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7 flow.config.gpu_device_num \u5c06\u5355\u673a\u7a0b\u5e8f\uff0c\u8bbe\u7f6e\u4e3a\u5355\u673a\u591a\u5361\u7684\u5206\u5e03\u5f0f\u7a0b\u5e8f\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff0c\u8bbe\u7f6e1\u53f0(\u6bcf\u53f0)\u673a\u5668\u4e0a\uff0c2\u5f20 GPU \u5361\u53c2\u4e0e\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1a flow . config . gpu_device_num ( 2 )","title":"GPU\u53ca\u7aef\u53e3\u914d\u7f6e"},{"location":"single_client/basics_topics/distributed_train.html#_4","text":"\u63a5\u7740\uff0c\u6211\u4eec\u9700\u8981\u914d\u7f6e\u7f51\u7edc\u4e2d\u7684\u4e3b\u673a\u5173\u7cfb\uff0c\u9700\u8981\u63d0\u524d\u8bf4\u660e\u7684\u662f\uff0cOneFlow \u4e2d\uff0c\u5c06\u5206\u5e03\u5f0f\u4e2d\u7684\u4e3b\u673a\u79f0\u4e3a\u8282\u70b9( node )\u3002 \u6bcf\u4e2a\u8282\u70b9\u7684\u7ec4\u7f51\u4fe1\u606f\uff0c\u7531\u4e00\u4e2a dict \u7c7b\u578b\u5b58\u653e\uff0c\u5176\u4e2d\u7684 \"addr\" \u8fd9\u4e2a key \u5bf9\u5e94\u4e86\u8282\u70b9\u7684 IP \u3002 \u6240\u6709\u7684\u8282\u70b9\u653e\u7f6e\u5728\u4e00\u4e2a list \u4e2d\uff0c\u7ecf\u63a5\u53e3 flow.env.machine \u544a\u4e4b OneFlow \uff0cOneFlow \u5185\u90e8\u4f1a\u81ea\u52a8\u5efa\u7acb\u5404\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u3002 nodes = [{ \"addr\" : \"192.168.1.12\" }, { \"addr\" : \"192.168.1.11\" }] flow . env . machine ( nodes ) \u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u67092\u4e2a\u8282\u70b9\uff0cIP \u5206\u522b\u4e3a\"192.168.1.12\"\u4e0e\"192.168.1.11\"\u3002 \u6ce8\u610f\uff0c\u8282\u70b9 list \u4e2d\u7684\u7b2c0\u4e2a\u8282\u70b9(\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684\"192.168.1.12\")\uff0c\u53c8\u79f0\u4e3a master node \uff0c\u6574\u4e2a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7cfb\u7edf\u542f\u52a8\u540e\uff0c\u7531\u5b83\u5b8c\u6210\u6784\u56fe\uff0c\u5176\u5b83\u8282\u70b9\u7b49\u5f85\uff1b\u5f53\u6784\u56fe\u5b8c\u6210\u540e\uff0c\u6240\u6709\u8282\u70b9\u4f1a\u6536\u5230\u901a\u77e5\uff0c\u77e5\u6653\u5404\u81ea\u8054\u7cfb\u7684\u5176\u5b83\u8282\u70b9\uff0c\u53bb\u4e2d\u5fc3\u5316\u5730\u534f\u540c\u8fd0\u884c\u3002 \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u7531 master node \u4fdd\u7559\u6807\u51c6\u8f93\u51fa\u53ca\u4fdd\u5b58\u6a21\u578b\uff0c\u5176\u5b83\u8282\u70b9\u53ea\u8d1f\u8d23\u8ba1\u7b97\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u9488\u5bf9\u5206\u5e03\u5f0f\u7684\u914d\u7f6e\u4ee3\u7801\u5c01\u88c5\u4e3a\u51fd\u6570\uff0c\u65b9\u4fbf\u8c03\u7528\uff1a def config_distributed (): print ( \"distributed config\" ) #\u6bcf\u4e2a\u8282\u70b9\u7684gpu\u4f7f\u7528\u6570\u76ee flow . config . gpu_device_num ( 1 ) #\u901a\u4fe1\u7aef\u53e3 flow . env . ctrl_port ( 9988 ) #\u8282\u70b9\u914d\u7f6e nodes = [{ \"addr\" : \"192.168.1.12\" }, { \"addr\" : \"192.168.1.11\" }] flow . env . machine ( nodes )","title":"\u8282\u70b9\u914d\u7f6e"},{"location":"single_client/basics_topics/distributed_train.html#_5","text":"\u5355\u673a\u7a0b\u5e8f\u52a0\u5165 OneFlow \u7684\u5206\u5e03\u5f0f\u914d\u7f6e\u4ee3\u7801\u540e\uff0c\u5c31\u6210\u4e3a\u4e86\u5206\u5e03\u5f0f\u7a0b\u5e8f\uff0c\u5728\u6240\u6709\u7684\u8282\u70b9\u8fd0\u884c\u4e00\u6837\u7684\u7a0b\u5e8f\u5373\u53ef\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\u4e0e\u4e0a\u6587\u7684 \u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f \u6bd4\u8f83\uff0c\u4f1a\u53d1\u73b0\u4ec5\u4ec5\u53ea\u662f\u589e\u52a0\u4e86 config_distributed \u51fd\u6570\u5e76\u8c03\u7528\uff0c\u6211\u4eec\u4e4b\u524d\u7684\u5355\u673a\u8bad\u7ec3\u811a\u672c\uff0c\u5c31\u6210\u4e3a\u4e86\u5206\u5e03\u5f0f\u8bad\u7ec3\u811a\u672c\u3002 \u5206\u5e03\u5f0f\u811a\u672c\u4ee3\u7801\uff1a distributed_train.py \u5728 192.168.1.12 \u53ca 192.168.1.11 \u4e0a \u5747\u8fd0\u884c\uff1a wget https://docs.oneflow.org/master/code/basics_topics/distributed_train.py python3 distributed_train.py 192.168.1.12 \u673a\u5668\u4e0a\u5c06\u663e\u793a\u7a0b\u5e8f\u7ed3\u679c\u3002","title":"\u5206\u5e03\u5f0f\u8bad\u7ec3\u53ca\u4ee3\u7801"},{"location":"single_client/basics_topics/distributed_train.html#faq","text":"\u8fd0\u884c\u672c\u6587\u5206\u5e03\u5f0f\u4ee3\u7801\u540e\uff0c\u7a0b\u5e8f\u957f\u671f\u7b49\u5f85\uff0c\u672a\u663e\u793a\u8ba1\u7b97\u7ed3\u679c \u8bf7\u68c0\u67e5 ssh \u914d\u7f6e\uff0c\u786e\u4fdd\u4e24\u53f0\u673a\u5668\u4e4b\u95f4\u80fd\u591f\u514d\u5bc6 ssh \u4e92\u8054 \u8bf7\u786e\u4fdd\u4e24\u53f0\u673a\u5668\u4f7f\u7528\u4e86\u76f8\u540c\u7248\u672c\u7684 OneFlow\u3001\u8fd0\u884c\u7684\u811a\u672c\u7a0b\u5e8f\u5b8c\u5168\u4e00\u6837 \u8bf7\u786e\u4fdd\u8bad\u7ec3\u4f7f\u7528\u7684\u7aef\u53e3\u672a\u88ab\u5360\u7528\uff0c\u6216\u4f7f\u7528 oneflow.config.ctrl_port \u66f4\u6362\u7aef\u53e3 \u5982\u679c\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6e\u4e86\u4ee3\u7406\uff0c\u8bf7\u786e\u4fdd\u4ee3\u7406\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u6216\u8005\u53d6\u6d88\u6389\u4ee3\u7406 \u5728 docker \u4e2d\u8dd1\u8bad\u7ec3\uff0c\u7a0b\u5e8f\u957f\u671f\u7b49\u5f85\uff0c\u672a\u663e\u793a\u8ba1\u7b97\u7ed3\u679c docker \u9ed8\u8ba4\u7684\u6a21\u5f0f\u4e0b\uff0c\u7269\u7406\u673a\u4e0e\u5bb9\u5668\u4e2d\u7684\u7aef\u53e3\u662f\u9694\u79bb\u7684\uff0c\u8bf7\u4f7f\u7528 --net=host host \u6a21\u5f0f\uff0c\u6216\u8005\u542f\u52a8\u5bb9\u5668\u65f6\u4f7f\u7528 -p \u9009\u9879\u8fdb\u884c\u7aef\u53e3\u6620\u5c04\u3002\u5177\u4f53\u8bf7\u67e5\u9605 docker \u7684\u624b\u518c \u5b58\u5728\u865a\u62df\u7f51\u5361\u7684\u60c5\u51b5 \u82e5\u5b58\u5728\u865a\u62df\u7f51\u5361\uff0c\u53ef\u80fd\u56e0\u4e3a nccl \u7684\u901a\u4fe1\u8d70\u865a\u62df\u7f51\u5361\u800c\u65e0\u6cd5\u901a\u4fe1\u3002\u6b64\u65f6\u9700\u8981\u901a\u8fc7 export NCCL_SOCKET_IFNAME=device_name \u6765\u6307\u5b9a\u901a\u4fe1\u7f51\u5361\uff0c\u5177\u4f53\u53ef\u53c2\u9605 nccl \u5b98\u65b9\u6587\u6863","title":"FAQ"},{"location":"single_client/basics_topics/essentials_of_oneflow.html","text":"OneFlow\u7cfb\u7edf\u8bbe\u8ba1 \u00b6 \u672c\u6587\u7684\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\uff1a OneFlow \u7684\u8bbe\u8ba1\u76ee\u6807 OneFlow \u7684\u7279\u8272\u4e00\uff1aActor \u673a\u5236 OneFlow \u7684\u7279\u8272\u4e8c\uff1aSBP \u673a\u5236 \u603b\u7ed3 \u4e00\u3001OneFlow \u7684\u8bbe\u8ba1\u76ee\u6807 \u00b6 OneFlow \u7684\u8bbe\u8ba1\u76ee\u6807\u662f\u8ffd\u6c42\u6781\u81f4\u7684\u6027\u80fd\uff0c\u7279\u522b\u662f\u5206\u5e03\u5f0f\u591a\u673a\u591a\u5361\u73af\u5883\u4e0b\u7684\u6a2a\u5411\u6269\u5c55\u6027\uff0c\u5e0c\u671b\u80fd\u8ba9\u7528\u6237\u4f7f\u7528\u591a\u673a\u591a\u5361\u5c31\u50cf\u4f7f\u7528\u5355\u673a\u5355\u5361\u4e00\u6837\u5bb9\u6613\uff0c\u4e14\u4eab\u53d7\u7ebf\u6027\u52a0\u901f\u7684\u8fd0\u884c\u6548\u7387\u3002 \u4e3a\u4ec0\u4e48 OneFlow \u8981\u805a\u7126\u4e8e\u5206\u5e03\u5f0f\u573a\u666f\u7684\u6027\u80fd\u548c\u6613\u7528\u6027\u5462\uff1f\u968f\u7740\u6df1\u5ea6\u5b66\u4e60\u7684\u53d1\u5c55\uff0c\u6a21\u578b\u8d8a\u6765\u8d8a\u5927\uff0c\u8bad\u7ec3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u6240\u9700\u7684\u7b97\u529b\u4f1a\u8d8a\u6765\u8d8a\u9ad8\uff0c\u540c\u65f6\u6a21\u578b\u589e\u5927\u7684\u901f\u5ea6\u8981\u5927\u4e8e GPU \u5355\u5361\u663e\u5b58\u6269\u5bb9\u7684\u901f\u5ea6\uff1b\u8bad\u7ec3\u5bf9\u7b97\u529b\u7684\u589e\u957f\u8981\u6c42\u8981\u5927\u4e8e GPU \u5355\u5361\u7b97\u529b\u589e\u957f\u7684\u901f\u5ea6\u3002\u5355\u5361\u7684\u8ba1\u7b97\u80fd\u529b\u548c\u663e\u5b58\u8fdc\u8fdc\u4e0d\u80fd\u6ee1\u8db3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\u7684\u9700\u6c42\uff0c\u5fc5\u987b\u501f\u52a9\u591a\u673a\u591a\u5361\u5e76\u884c\u52a0\u901f\u3002 \u82e5\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u53ef\u4ee5\u8ba9\u4e92\u8054\u7684\u591a\u4e2a GPU \u534f\u540c\u5de5\u4f5c\u597d\uff0c\u5b9e\u73b0\u7ebf\u6027\u52a0\u901f\u6bd4\uff0c\u5373\u4f7f\u6bcf\u5757 GPU \u6027\u80fd\u201c\u4e00\u822c\u201d\uff0c\u4e5f\u53ef\u6ee1\u8db3\u4efb\u610f\u89c4\u6a21\u7684\u7b97\u529b\u9700\u6c42\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u6a2a\u5411\u6269\u5c55\u6027\uff0c\u6211\u4eec\u575a\u4fe1\u8fd9\u662f\u7b97\u529b\u589e\u957f\u7684\u89e3\u51b3\u4e4b\u9053\u3002 \u4f46\u662f\uff0c\u5df2\u6709\u6846\u67b6\u90fd\u662f\u9996\u5148\u805a\u7126\u4e8e\u5355\u5361\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u4ec5\u5bf9\u9002\u5408\u6570\u636e\u5e76\u884c\u7684\u591a\u673a\u591a\u5361\u573a\u666f\u5904\u7406\u7684\u8f83\u597d\uff0c\u5373\u628a\u5355\u5361\u7684\u8ba1\u7b97\u56fe\u955c\u50cf\u590d\u5236\u5230\u591a\u673a\u591a\u5361\u4e0a\uff0c\u5404\u4e2a\u5361\u548c\u673a\u5668\u4e4b\u95f4\u8f85\u52a9\u4e8e\u6a21\u578b\u540c\u6b65\u7684\u6a21\u5757\u3002 \u5bf9\u4e8e BERT/GPT-3 \u7b49\u53c2\u6570\u91cf\u5de8\u5927\u7684\u6a21\u578b\uff0c\u7528\u6237\u5728\u4f7f\u7528\u5df2\u6709\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u65f6\u5e38\u5e38\u4f1a\u9047\u5230\u591a\u673a\u591a\u5361\u4e0d\u597d\u7528\u3001\u6548\u7387\u4f4e\u4e0b\u6216\u65e0\u6cd5\u5b9e\u73b0\u7b49\u95ee\u9898\u3002\u7528\u6237\u505a\u5206\u5e03\u5f0f\u8bad\u7ec3\u5e38\u5e38\u9700\u8981\u8f83\u9ad8\u7684\u5b66\u4e60\u6210\u672c\uff0c\u8fd8\u9700\u8981\u5173\u5fc3\u591a\u673a\u591a\u5361\u4e4b\u95f4\u6a21\u578b\u7684\u540c\u6b65\u95ee\u9898\u3002\u4e1a\u754c\u4e3a\u89e3\u51b3\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u7684\u75db\u70b9\uff0c\u4e0d\u4ec5\u6539\u8fdb\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u81ea\u8eab\uff0c\u8fd8\u7814\u53d1\u4e86\u591a\u79cd\u7b2c\u4e09\u65b9\u63d2\u4ef6\uff0c\u8b6c\u5982 NCCL\uff0cHorovod\uff0cBytePS\uff0cHugeCTR\uff0cMesh-tensorflow\uff0cGpipe \u7b49\u7b49\uff0c\u4f46\u4ecd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u6781\u81f4\u7684\u6027\u80fd\u9700\u6c42\u3002 OneFlow \u7684\u6838\u5fc3\u8bbe\u8ba1\u7406\u5ff5\u662f\uff0c\u8ba9\u591a\u673a\u591a\u5361\u5206\u5e03\u5f0f\u8bad\u7ec3\u9ad8\u6548\u5730\u534f\u540c\u8fd0\u8f6c\uff0c\u540c\u65f6\u8981\u8ba9\u7528\u6237\u5728\u591a\u673a\u591a\u5361\u7684\u8bad\u7ec3\u4f53\u9a8c\u4e0a\u5c31\u50cf\u5355\u5361\u4e00\u6837\u7b80\u5355\u5bb9\u6613\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ecb\u7ecdOneFlow \u5b9e\u73b0\u6b64\u76ee\u6807\u6700\u6838\u5fc3\u7684\u4e24\u70b9\u60f3\u6cd5\uff0c\u6765\u8bf4\u660e OneFlow \u662f\u5982\u4f55\u770b\u5f85\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u7684\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u7684\u3002 \u4e8c\u3001Actor\uff1a\u4e00\u5957\u7b80\u6d01\u7684\u673a\u5236\u89e3\u51b3\u51e0\u4e4e\u6240\u6709\u6280\u672f\u96be\u9898 \u00b6 \u5173\u952e\u7279\u6027\uff1a \u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6 \u6d41\u6c34\u7ebf \u6570\u636e\u642c\u8fd0\u662f\u4e00\u7b49\u516c\u6c11 \u4f20\u8f93\u88ab\u8ba1\u7b97\u63a9\u76d6 \u63a7\u5236\u903b\u8f91\u88ab\u6267\u884c\u903b\u8f91\u63a9\u76d6 \u5728 OneFlow \u7684\u8bbe\u8ba1\u4e2d\uff0c\u5206\u4e3a Compile \u548c Runtime \u4e24\u4e2a\u65f6\u671f\uff0cCompile \u65f6\u671f\u628a\u7528\u6237\u5b9a\u4e49\u7684\u795e\u7ecf\u7f51\u7edc\u3001\u5206\u5e03\u5f0f\u73af\u5883\u4fe1\u606f\u7b49\u7f16\u8bd1\u6210\u4e00\u4e2a\u9759\u6001\u56fe\u7684\u6267\u884c\u8ba1\u5212 Plan\uff0cPlan \u7531\u6267\u884c\u5355\u5143 Actor \u7684\u63cf\u8ff0\u4fe1\u606f\u7ec4\u6210\uff1bRuntime \u65f6\u671f\uff0c\u5404\u4e2a\u673a\u5668\u6839\u636e Plan \u91cc\u7684 Actor \u63cf\u8ff0\u4fe1\u606f\u771f\u5b9e\u5730\u521b\u5efa\u5c5e\u4e8e\u81ea\u5df1\u673a\u5668\u7684\u4f17\u591a Actor \u5b9e\u4f8b\uff0c\u7136\u540e\u542f\u52a8 Actor \u8fd0\u884c\u7cfb\u7edf\u3002\u6574\u4e2a\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u671f\u95f4\uff0cOneFlow \u7684\u6267\u884c\u57fa\u672c\u5355\u5143\u5c31\u662f Actor\uff0cActor \u5bf9\u5e94\u9759\u6001\u6267\u884c\u56fe\u4e0a\u7684\u8282\u70b9\uff0cActor \u4e4b\u95f4\u751f\u4ea7\u3001\u6d88\u8d39\u7684\u6570\u636e\u5b58\u50a8\u5728 Register \u4e2d\uff0cActor \u4e4b\u95f4\u901a\u8fc7\u6d88\u606f\u4f20\u9012\u6765\u534f\u4f5c\u8fd0\u884c\u3002 1. Actor \u673a\u5236\u5b9e\u73b0\u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6 \u00b6 OneFlow \u7684\u8fd0\u884c\u65f6\u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6\u5c31\u662f\u7528 Actor \u673a\u5236\u5b9e\u73b0\u7684\u3002\u5728\u6574\u4e2a\u7531 Actor \u6784\u6210\u7684\u9759\u6001\u56fe\u4e2d\uff0c\u6ca1\u6709\u4e00\u4e2a\u4e2d\u5fc3\u7684\u8c03\u5ea6\u8282\u70b9\uff0c\u6bcf\u4e2a Actor \u90fd\u53ea\u9700\u8981\u5173\u5fc3\u81ea\u5df1\u6240\u9700\u6570\u636e\u7684\u751f\u4ea7\u8005\uff08\u4e0a\u6e38 Actor \uff09\u548c\u81ea\u5df1\u751f\u4ea7\u7684\u6570\u636e\u7684\u6d88\u8d39\u8005\uff08\u4e0b\u6e38 Actor\uff09\u5373\u53ef\u3002\u8fd9\u6837\u5728\u8d85\u5927\u89c4\u6a21\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u573a\u666f\u4e0b\uff0c \u5b8c\u5168\u7684\u53bb\u4e2d\u5fc3\u5316 \u8c03\u5ea6\u53ef\u4ee5\u907f\u514d\u4e2d\u5fc3\u8c03\u5ea6\u7684\u5355\u70b9\u6027\u80fd\u74f6\u9888\u95ee\u9898\u3002 \u6bcf\u4e2a Actor \u5185\u90e8\u90fd\u6709\u4e00\u4e2a \u72b6\u6001\u673a \uff0cActor \u6536\u53d1\u7684\u6d88\u606f\u3001\u6267\u884c\u7684\u60c5\u51b5\u90fd\u4f1a\u6539\u53d8\u81ea\u5df1\u7684\u72b6\u6001\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cRegister \u662f\u5b58\u50a8\u5757\uff0c\u5b58\u653e\u4e86 Actor \u751f\u4ea7\u51fa\u6765\u7684\u6570\u636e\uff0c\u800c\u6d88\u606f\u662f\u5305\u542b\u4e86 Register \u5b58\u50a8\u5757\u7684\u5185\u5b58\u5730\u5740\u7684\u8f7b\u91cf\u7ea7\u6570\u636e\uff0cActor \u4e4b\u95f4\u4f20\u9012\u7684\u662f\u6d88\u606f\uff0c\u800c\u4e0d\u662f Register\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 zero-copy\u3002 \u5f53 Actor \u6536\u5230\u4e86\u65b0\u6d88\u606f\uff0c\u5224\u65ad\u5b83\u6267\u884c\u6240\u9700\u8981\u6d88\u8d39\u7684 Register \u5df2\u7ecf\u5c31\u7eea\uff0c\u4e14\u5b83\u5c06\u8981\u751f\u4ea7\u7684\u6570\u636e\u6709\u7a7a\u95f2\u7684 Register \u53ef\u4ee5\u5199\u5165\u65f6\uff0c\u8fd9\u4e2a Actor \u5c31\u6267\u884c\uff08Act\uff09\u4e00\u6b21\uff0c\u751f\u4ea7\u51fa\u4e00\u4e2a Register\u3002 \u751f\u4ea7\u5b8c\u4ee5\u540e\uff0c\u8be5 Actor \u5c31\u5411\u9700\u8981\u6d88\u8d39\u8fd9\u4e2a Register \u7684\u90a3\u4e9b\u6d88\u8d39\u8005 Actor \u4eec\u53d1\u6d88\u606f\uff0c\u8868\u793a \u201c\u4f60\u4eec\u53ef\u4ee5\u6765\u8bfb\u53d6\u6211\u751f\u4ea7\u7684\u6570\u636e\u4e86\u201d \uff1b\u540c\u65f6\u8be5 Actor \u8fd8\u9700\u8981\u628a\u5b83\u6d88\u8d39\u5b8c\u7684\u90a3\u4e9b Register \u8fd8\u7ed9\u8fd9\u4e9b Regsiter \u7684\u751f\u4ea7\u8005 Actor \u4eec\uff0c\u8868\u793a \u201c\u6211\u7528\u5b8c\u4e86\u4f60\u4eec\u7684\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u56de\u6536\u4e86\u201d \u3002Actor \u5185\u90e8\u7684\u72b6\u6001\u673a\u5982\u56fe1 \u6240\u793a\u3002 \u56fe1 Actor \u5185\u90e8\u72b6\u6001\u673a \u5728 Actor \u542f\u52a8\u4e4b\u540e\uff0c\u4f1a\u6839\u636e\u4e0e\u5176\u4ed6 Actor \u4e4b\u95f4\u6536\u53d1\u6d88\u606f\u6765\u5207\u6362\u81ea\u5df1\u7684\u4e24\u4e2a\u72b6\u6001\uff1a \u7b49\u5f85\u72b6\u6001 \u548c \u6267\u884c\u72b6\u6001 \u3002 \u4e00\u4e2a Actor \u6536\u5230\u7684\u6d88\u606f\u4e00\u822c\u5206\u4e3a\u51e0\u4e2a\u7c7b\u578b\uff1a \u4e0a\u6e38\u7684\u751f\u4ea7\u8005 Actor \u53d1\u6765\u6d88\u606f\u8bf4\uff1a\u4f60\u53ef\u4ee5\u6765\u8bfb\u6211\u751f\u4ea7\u7684\u6570\u636e\u4e86\uff1b \u4e0b\u6e38\u7684\u6d88\u8d39\u8005 Actor \u53d1\u6765\u6d88\u606f\u8bf4\uff1a\u6211\u7528\u5b8c\u4f60\u751f\u4ea7\u7684\u6570\u636e\u4e86\u3002 \u5f53\u8fd9\u4e2a\u6570\u636e\u88ab\u6240\u6709\u6d88\u8d39\u8005\u90fd\u7528\u5b8c\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u56de\u6536\u6210\u4e3a\u7a7a\u95f2\u5757\u7b49\u5f85\u4e0b\u4e00\u6b21\u88ab\u8be5 Actor \u91cd\u65b0\u751f\u4ea7\u4e00\u4efd\u65b0\u7684\u6570\u636e\u3002 \u4e00\u4e2a Actor \u6536\u5230\u6d88\u606f\u4ee5\u540e\u90fd\u4f1a\u53bb\u5c1d\u8bd5\u5224\u65ad\u5f53\u524d\u662f\u5426\u6ee1\u8db3\u6267\u884c\u6761\u4ef6\uff0c\u6267\u884c\u6761\u4ef6\u4e00\u822c\u6709\u4e24\u4e2a\uff1a \u9700\u8981\u8bfb\u53d6\u7684\u6570\u636e\u662f\u5426\u90fd\u5230\u9f50\u4e86\uff1b \u662f\u5426\u6709\u7a7a\u95f2\u5757\u53ef\u4ee5\u62ff\u6765\u88ab\u751f\u4ea7\u3002\u5f53\u6ee1\u8db3\u6267\u884c\u72b6\u6001\u4ee5\u540e Actor \u5c31\u5f00\u59cb\u8c03\u7528\u81ea\u5df1\u5185\u90e8\u7684 Kernel \u771f\u5b9e\u7684\u53bb\u8bfb\u5199\u6570\u636e\u3002 \u6267\u884c\u5b8c\u6bd5\u540e Actor \u4f1a\u5411\u4e0a\u4e0b\u6e38\u53d1\u6d88\u606f\uff1a \u5411\u4e0b\u6e38\u7684\u6d88\u8d39\u8005 Actor \u53d1\u6d88\u606f\u8bf4\uff1a\u6211\u521a\u751f\u4ea7\u4e86\u4e00\u5757\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u6765\u8bfb\u4e86\uff1b \u5411\u4e0a\u6e38\u7684\u751f\u4ea7\u8005 Actor \u53d1\u6d88\u606f\u8bf4\uff1a\u6211\u521a\u7528\u5b8c\u4e86\u4f60\u4e4b\u524d\u53d1\u7ed9\u6211\u7684\u6570\u636e\u4e86\u3002 Actor \u53ea\u9700\u8981\u5173\u5fc3\u4e0a\u4e0b\u6e38\u7684\u6d88\u606f\u5c31\u80fd\u5224\u65ad\u81ea\u5df1\u80fd\u4e0d\u80fd\u6267\u884c\u3002\u6bcf\u4e2a Actor \u90fd\u901a\u8fc7\u81ea\u5df1\u5185\u90e8\u7684\u72b6\u6001\u673a\u548c\u6536\u53d1\u6d88\u606f\u673a\u5236\u5b9e\u73b0\u4e86 \u5b8c\u5168\u53bb\u4e2d\u5fc3\u5316 \u7684\u5206\u5e03\u5f0f\u534f\u540c\u5de5\u4f5c\u3002 2. Actor \u673a\u5236\u5b9e\u73b0\u6d41\u6c34\u7ebf \u00b6 \u4e0a\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86 Actor \u7684\u5185\u90e8\u72b6\u6001\u673a\uff0cActor \u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u9012\u548c\u6570\u636e\u4f20\u9012\u662f\u4f9d\u8d56 Register \u5b9e\u73b0\u7684\u3002\u4e00\u4e2a Actor \u662f\u5426\u80fd\u6267\u884c\uff0c\u53ea\u8ddf\u4e24\u4e2a\u6761\u4ef6\u76f8\u5173\uff1a \u81ea\u5df1\u6d88\u8d39\u7684\u90a3\u4e9b Register \u662f\u5426\u53ef\u8bfb\uff1b \u81ea\u5df1\u751f\u4ea7\u7684\u90a3\u4e9b Register \u662f\u5426\u6709\u7a7a\u95f2\u5757\u53ef\u5199\u3002 \u5bf9\u4e8e\u4e00\u4e2a Register\uff0c\u5982\u679c\u6211\u4eec\u8fd0\u884c\u65f6\u7ed9\u5b83\u5206\u914d\u591a\u4e2a\u7a7a\u95f2\u5757\uff0c\u90a3\u4e48\u76f8\u90bb\u7684\u4e24\u4e2a Actor \u5c31\u53ef\u4ee5\u540c\u65f6\u5de5\u4f5c\uff0c\u5de5\u4f5c\u65f6\u95f4\u91cd\u53e0\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5404\u4e2a Actor \u4e4b\u95f4\u7684\u6d41\u6c34\u7ebf\u3002\u7406\u60f3\u72b6\u6001\u4e0b\u6574\u4e2a\u9759\u6001\u6267\u884c\u56fe\u7684\u6267\u884c\u65f6\u95f4\u5c31\u662f\u6574\u4e2a\u7cfb\u7edf\u4e2d\u662f\u6027\u80fd\u74f6\u9888\u7684\u90a3\u4e2a Actor \u8fd0\u884c\u7684\u603b\u65f6\u95f4\uff0c\u5176\u4f59 Actor \u7684\u6267\u884c\u65f6\u95f4\u90fd\u88ab\u6d41\u6c34\u7ebf\u63a9\u76d6\u8d77\u6765\u4e86\u3002 \u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u6765\u89e3\u91ca Actor \u673a\u5236\u4e0b\u7684\u6d41\u6c34\u7ebf\u662f\u5982\u4f55\u8fd0\u8f6c\u8d77\u6765\u7684\u3002\u56fe2\u662f\u4e00\u4e2a\u75313\u4e2a Actor\uff08a, b, c\uff09\u7ec4\u6210\u7684\u8ba1\u7b97\u56fe\u7684\u6267\u884c\u65f6\u5e8f\u56fe\u3002\u5176\u4e2d\u6df1\u7eff\u8272\u7684 Regst\u65b9\u5757\u8868\u793a\u6b63\u5728\u88ab\u4f7f\u7528\u7684 Register \u5757\uff0c\u767d\u8272\u7684 Regst \u65b9\u5757\u8868\u793a\u540c\u4e00\u4e2a Register \u7684\u5907\u7528\u7a7a\u95f2\u5757\u3002 1\uff09\u5728 Time0 \u65f6\u523b\uff0cActor a \u4ea7\u51fa\u4e86\u4e00\u4e2a Regst_a_0\uff0cActor b \u548c Actor c \u7531\u4e8e\u6ca1\u6709\u53ef\u8bfb\u7684 Register\uff0c\u6240\u4ee5\u5904\u5728\u7b49\u5f85\u72b6\u6001\u3002\u5047\u8bbe\u6bcf\u4e2a Actor\u7684\u6267\u884c\u65f6\u95f4\u90fd\u662f\u5355\u4f4d\u65f6\u95f4\u3002 2\uff09\u5230 Time1 \u65f6\u523b\uff0cActor a \u7ed9 Actor b \u53d1\u6d88\u606f\u8bf4\u4f60\u53ef\u4ee5\u6765\u8bfb\u6211\u4ea7\u51fa\u7684 Regst_a_0 \u4e86\uff0cActor b \u6536\u5230\u4e86\u6d88\u606f\uff0c\u5e76\u68c0\u67e5\u81ea\u5df1\u751f\u4ea7\u7684 Register b \u662f\u5426\u6709\u7a7a\u95f2 Regst \u5757\u53ef\u7528\uff0c\u53d1\u73b0\u6709\u53ef\u7528\u7684 Regst_b_0\uff0c\u4e8e\u662f Time1 \u65f6\u523bActor b \u6267\u884c\uff0c\u8bfb\u53d6 Regst_a_0\uff0c\u5199 Regst_b_0\uff1b\u540c\u65f6 Actor a \u8fd8\u4f1a\u53bb\u770b\u81ea\u5df1\u662f\u5426\u6709\u7a7a\u95f2\u5757\u53ef\u5199\uff0c\u53d1\u73b0\u6709\uff0cTime1 \u65f6\u523b Actor a \u4e5f\u5728\u6267\u884c\uff0c\u5199 Regst_a_1\uff08\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cRegst_a_0 \u548c Regst_a_1 \u903b\u8f91\u4e0a\u662f\u5c5e\u4e8e\u540c\u4e00\u4e2a Register\uff0c\u53ea\u662f\u7a7a\u95f4\u4e0a\u5206\u6210\u4e86\u4e0d\u540c\u7684\u7a7a\u95f2\u5757\u5907\u4efd\u800c\u5df2\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u4efb\u52a1\u4e2d\uff0cRegst_a_0 \u548c Regst_a_1 \u91cc\u5b58\u653e\u7684\u662f\u540c\u4e00\u4e2a operator \u4ea7\u51fa\u7684\u4e0d\u540cbatch\u7684\u6570\u636e\uff09\u3002\u4e8e\u662f Actor a \u548c Actor b \u5c31\u5e76\u884c\u5de5\u4f5c\u8d77\u6765\u4e86\u3002Actor c \u7531\u4e8e\u6ca1\u6709\u6570\u636e\u53ef\u8bfb\uff0c\u4ecd\u5728\u7b49\u5f85\u3002 3\uff09\u5230 Time2 \u65f6\u523b\uff0cActor b \u751f\u4ea7\u51fa\u4e86 Regst_b_0\uff0c\u4e8e\u662f\u7ed9\u4e0b\u6e38\u7684\u6d88\u8d39\u8005Actor c \u53d1\u6d88\u606f\u8bf4\u4f60\u53ef\u4ee5\u6765\u8bfb\u6211\u751f\u4ea7\u7684 Regst_b_0\uff0c\u540c\u65f6\u7ed9\u4e0a\u6e38\u7684\u751f\u4ea7\u8005Actor a \u53d1\u6d88\u606f\u8bf4\u6211\u7528\u5b8c\u4e86\u4f60\u7684 Regst_a_0\u3002\u6b64\u65f6 Actor a \u5df2\u7ecf\u628a\u521a\u521a\u751f\u4ea7\u7684 Regst_a_1 \u53c8\u53d1\u7ed9\u4e86 Actor b\uff0cActor b \u68c0\u67e5\u81ea\u5df1\u4ecd\u6709 Regst_b_1 \u7a7a\u95f2\uff0c\u4e8e\u662f Actor b \u5f00\u59cb\u8bfb Regst_a_1\uff0c\u5199 Regst_b_1\uff1bActor c \u6536\u5230 Regst_b_0\uff0c\u53d1\u73b0\u81ea\u5df1\u6709 Regst_c_0 \u7a7a\u95f2\uff0c\u4e8e\u662f Actor c \u5f00\u59cb\u6267\u884c\uff0c\u8bfb Regst_b_0\uff0c\u5199 Regst_c_0\uff1bActor a \u6536\u5230\u4e86 Actor b \u7528\u5b8c\u8fd8\u56de\u6765\u7684 Regst_a_0\uff0c\u68c0\u67e5 Regst_a_0 \u6240\u6709\u7684\u6d88\u8d39\u8005\u90fd\u7528\u5b8c\u4e86\uff0c\u4e8e\u662f\u5c06 Regst_a_0 \u56de\u6536\uff0c\u6807\u8bb0\u4e3a\u7a7a\u95f2\u5757\uff0c\u540c\u65f6 Actor a \u8fd8\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u5199 Regst_a_2\u3002 \u56fe2 Actor \u751f\u4ea7\u6d88\u8d39\u5173\u7cfb\u548c\u6267\u884c\u65f6\u5e8f\u56fe \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5230\u4e86 Time2 \u65f6\u523b\uff0c\u5176\u5b9e Actor a\u3001b\u3001c \u90fd\u5728\u5de5\u4f5c\uff0c\u5728\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u4efb\u52a1\u4e2d\uff0cTime2 \u65f6\u523b Regst_b_0\u3001Regst_c_0 \u5b58\u653e\u7684\u662f Batch 0 \u7684\u6570\u636e\uff0cRegst_a_1\u3001Regst_b_1 \u5b58\u653e\u7684\u662f Batch 1 \u7684\u6570\u636e\uff0cRegst_a_2 \u5b58\u653e\u7684\u662f Batch 2 \u7684\u6570\u636e\u3002\u901a\u8fc7\u4e00\u4e2a Register \u6709\u591a\u4e2a\u7a7a\u95f2\u5757\u7684\u8bbe\u8ba1\uff0cActor \u673a\u5236\u5c31\u5b9e\u73b0\u4e86\u6d41\u6c34\u5e76\u884c\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u629b\u51fa\u4e00\u4e2a\u66f4\u8fdb\u4e00\u6b65\u6df1\u5165\u7684\u95ee\u9898\uff1a\u6574\u4e2a\u6570\u636e\u6d41\u7684\u6267\u884c\u50cf\u4e00\u4e2a\u7f51\u7edc\uff0c\u6570\u636e\u5728\u7f51\u7edc\u4e2d\u7684\u6d41\u52a8\u5c31\u5b8c\u6210\u4e86\u8ba1\u7b97\uff0c\u5982\u4f55\u907f\u514d\u751f\u4ea7\u8005\u751f\u4ea7\u592a\u5feb\uff0c\u6d88\u8d39\u8005\u6d88\u8d39\u4e0d\u53ca\uff0c\u4ee5\u53ca\u5982\u4f55\u907f\u514d\u751f\u4ea7\u8005\u751f\u4ea7\u592a\u6162\uff0c\u6d88\u8d39\u8005\u611f\u5230\u9965\u997f\u7684\u95ee\u9898\uff0c\u8fd9\u6d89\u53ca\u5230\u5bf9\u8ba1\u7b97\u3001\u5185\u5b58\u3001\u4f20\u8f93\u5e26\u5bbd\u7684\u89c4\u5212\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7cfb\u7edf\u7684\u74f6\u9888\u4e4b\u5904\u6700\u5bbd\uff0c\u9700\u8981\u89e3\u51b3\u6d41\u63a7\uff08flow control\uff09\u7684\u95ee\u9898\u4ee5\u53ca\u8d44\u6e90\u5206\u914d\u95ee\u9898\uff08\u5982\u6bcf\u4e2a Actor \u7684 Register \u5230\u5e95\u5206\u914d\u51e0\u4e2a\u5185\u5b58\u5757\u914d\u989d\uff09\uff0c\u8fd9\u975e\u5e38\u5173\u952e\uff0c\u4e5f\u662f OneFlow \u7cfb\u7edf\u5df2\u89e3\u51b3\u7684\u95ee\u9898\u3002 3. \u6570\u636e\u642c\u8fd0\u662f\u4e00\u7b49\u516c\u6c11 \u00b6 \u5728\u591a\u673a\u591a\u5361\u7684\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\uff0c\u5404\u4e2a\u673a\u5668\u548c\u5404\u4e2a\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u5f80\u5f80\u662f\u5f71\u54cd\u7cfb\u7edf\u7684\u6a2a\u5411\u6269\u5c55\u6027\u7684\u6700\u91cd\u8981\u56e0\u7d20\uff0c\u5982\u679c\u4f20\u8f93\u5f00\u9500\u53ef\u4ee5\u88ab\u8ba1\u7b97\u5f00\u9500\u63a9\u76d6\uff0c\u90a3\u4e48\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u5c31\u53ef\u4ee5\u8fbe\u5230\u7406\u60f3\u7684\u7ebf\u6027\u52a0\u901f\u6bd4\u3002\u76f8\u8f83\u4e8e\u5176\u4ed6\u7684\u6846\u67b6\uff0cOneFlow \u628a\u6570\u636e\u642c\u8fd0\u89c6\u4e3a\u8ddf\u6570\u636e\u8ba1\u7b97\u540c\u7b49\u5730\u4f4d\u7684\u64cd\u4f5c\uff0c\u63d0\u51fa \u6570\u636e\u642c\u8fd0\u662f\u4e00\u7b49\u516c\u6c11 \u7684\u601d\u60f3\u3002 \u5df2\u6709\u6846\u67b6\u5728\u7f16\u8bd1\u671f\u7684\u5173\u6ce8\u7126\u70b9\u662f\u6570\u636e\u8ba1\u7b97\uff0c\u8ba4\u4e3a\u6570\u636e\u642c\u8fd0\u662f\u80cc\u540e\u9690\u5f0f\u53d1\u751f\u7684\uff0c\u56e0\u6b64\u5728\u9759\u6001\u5206\u6790\u8ba1\u7b97\u56fe\u65f6\u7565\u8fc7\u8ba1\u7b97\u548c\u642c\u8fd0\u7684\u91cd\u53e0\u7f16\u6392\uff0cOneFlow \u5728\u8ba1\u7b97\u56fe\u4e2d\u663e\u5f0f\u8868\u8fbe\u4e86\u6570\u636e\u642c\u8fd0\uff0c\u800c\u4e14\u5728\u9759\u6001\u5206\u6790\u65f6\u540c\u7b49\u5bf9\u5f85\u6570\u636e\u642c\u8fd0\u548c\u6570\u636e\u8ba1\u7b97\uff0c\u4ee5\u6700\u5927\u5316\u91cd\u53e0\u642c\u8fd0\u548c\u8ba1\u7b97\u3002 \u5728\u6700\u7ec8\u7684\u6267\u884c\u56fe\u4e2d\uff0c\u6570\u636e\u642c\u8fd0\u64cd\u4f5c\u4e5f\u662f\u4e00\u4e2a\u4e2a Actor\u3002\u9664\u4e86\u5728\u8bbe\u5907\u4e0a\u505a\u6570\u636e\u8ba1\u7b97\u7528\u7684 Actor \u4ee5\u5916\uff0c\u8fd8\u6709\u8ba1\u7b97\u673a\u5185\u5b58\u5230 GPU \u663e\u5b58\u4e4b\u95f4\u7684\u6570\u636e\u62f7\u8d1d Actor\uff0c\u673a\u5668\u4e4b\u95f4\u505a\u7f51\u7edc\u901a\u4fe1\u7684\u7f51\u7edc Actor\uff0c\u8d1f\u8d23\u6570\u636e\u7684\u5207\u5206\u3001\u5408\u5e76\u3001\u590d\u5236\u7684Actor\uff0c\u8d1f\u8d23\u8bfb\u53d6\u78c1\u76d8\u6570\u636e\u7684 Actor\uff0c\u8d1f\u8d23\u52a0\u8f7d\u4fdd\u5b58\u6a21\u578b\u7684 Actor \u7b49\u7b49\u3002\u5f88\u591a\u5176\u4ed6\u6846\u67b6\u90fd\u628a\u6570\u636e\u52a0\u8f7d\u3001\u591a\u5361\u6a21\u578b\u68af\u5ea6\u7684\u540c\u6b65\u3001\u7f51\u7edc\u3001\u6a21\u578b\u52a0\u8f7d\u66f4\u65b0\u7b49\u5206\u522b\u505a\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u6a21\u5757\uff0c\u800c OneFlow \u7684\u8bbe\u8ba1\u662f\u6240\u6709\u7684\u529f\u80fd\u90fd\u5728\u4e00\u5f20\u7531Actor\u7ec4\u6210\u7684\u9759\u6001\u6267\u884c\u56fe\u91cc\u5b9e\u73b0\u4e86\u3002OneFlow \u8fd9\u6837\u7684\u8bbe\u8ba1\u4e0d\u4ec5\u7b80\u6d01\u3001\u4f18\u96c5\uff0c\u8fd8\u975e\u5e38\u9ad8\u6548\u3002 \u56fe 3 \u6570\u636e\u662f\u5982\u4f55\u4ece\u4e00\u4e2a\u8bbe\u5907\u642c\u8fd0\u5230\u53e6\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684 \u56fe3\u8868\u793a\u4e86\u6ca1\u6709 GPU-Direct \u7684\u51b5\u4e0b\uff0c\u5728 OneFlow \u7684 Runtime \u9636\u6bb5\uff0c\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684\u8ba1\u7b97\u8282\u70b9\u5982\u679c\u6d88\u8d39\u4e86\u53e6\u4e00\u4e2a\u8bbe\u5907\u7684\u8ba1\u7b97\u8282\u70b9\uff0c\u6570\u636e\u662f\u5982\u4f55\u642c\u8fd0\u8fc7\u53bb\u7684\u3002 4. \u5c3d\u53ef\u80fd\u5e76\u884c \u00b6 \u5728 OneFlow \u7684\u8bbe\u8ba1\u4e2d\uff0c\u6240\u6709\u7684\u51fa\u53d1\u70b9\u90fd\u662f\u5e0c\u671b\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5e76\u884c\uff0c\u4ece\u800c\u8fbe\u5230\u6700\u4f18\u7684\u5206\u5e03\u5f0f\u6027\u80fd\u3002\u6bd4\u5982\u8003\u8651\u5230\u5206\u5e03\u5f0f\u8bad\u7ec3\u6a21\u578b\u68af\u5ea6\u540c\u6b65\u65f6\uff0c\u663e\u5b58\u5230\u5185\u5b58\u7684\u4f20\u8f93\u5e26\u5bbd\u9ad8\u4e8e\u673a\u5668\u4e4b\u95f4\u7684\u7f51\u7edc\u4f20\u8f93\u5e26\u5bbd\uff0cOneFlow \u4f1a\u505a\u4e24\u7ea7\u7684 scatter \u548c gather \u64cd\u4f5c\uff08\u672c\u673a\u7684\u548c\u5404\u4e2a\u673a\u5668\u4e4b\u95f4\u7684\uff09\uff0c\u7528\u4e8e\u589e\u52a0 locality\uff0c\u63d0\u9ad8\u6574\u4f53\u6027\u80fd\u3002 \u53c8\u6bd4\u5982\u5728\u5f02\u6b65\u542f\u52a8\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u65f6\uff0cPython \u7aef\u7528\u6237\u7684\u63a7\u5236\u903b\u8f91\u8ddf OneFlow \u8fd0\u884c\u65f6\u7684\u6267\u884c\u56fe\u662f\u5e76\u884c\u6267\u884c\u7684\uff0c\u540c\u65f6 OneFlow \u6709\u4e00\u5957\u4e92\u65a5\u4e34\u754c\u533a\u7684\u8bbe\u8ba1\u4fdd\u8bc1\u6267\u884c\u7684\u9ad8\u6548\u6027\u548c\u6b63\u786e\u6027\u3002 \u6570\u636e\u52a0\u8f7d\u90e8\u5206\u65e0\u8bba\u662f\u4ece\u78c1\u76d8\u8bfb\u6570\u636e\u8fd8\u662f\u4ece Python \u7aef\u5582\u6570\u636e\uff0cOneFlow \u90fd\u80fd\u4fdd\u8bc1\u5c3d\u53ef\u80fd\u5e76\u884c\uff0c\u4f7f\u5f97\u8ba1\u7b97\u8bbe\u5907\u4e0d\u4f1a\u56e0\u4e3a\u8981\u7b49\u6570\u636e\u800c\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u3002 \u5df2\u6709\u6846\u67b6\u5982\u679c\u60f3\u8981\u5c3d\u53ef\u80fd\u91cd\u53e0\u6570\u636e\u642c\u8fd0\u548c\u8ba1\u7b97\uff0c\u4e00\u822c\u501f\u52a9\u591a\u5c42\u56de\u8c03\uff08Callback\uff09\u51fd\u6570\uff0c\u5f53\u5d4c\u5957\u5c42\u6b21\u8fc7\u591a\u65f6\uff0c\u4f1a\u9047\u5230\u6240\u8c13\u7684 Callback Hell \u9ebb\u70e6\uff0c\u6b63\u786e\u6027\u548c\u53ef\u8bfb\u6027\u90fd\u53ef\u80fd\u4e0b\u964d\u3002\u4f46\u5728 OneFlow \u4e2d\uff0c\u4ee5\u4e0a\u7684\u8fd9\u4e9b\u5e76\u884c\u5e76\u53d1\u7279\u6027\uff0c\u90fd\u662f\u5728\u8fd9\u4e00\u5957\u7b80\u6d01\u7684 Actor \u673a\u5236\u4e0b\u5b9e\u73b0\u7684\uff0c\u89e3\u51b3\u4e86\u4ee4\u4eba\u5934\u79c3\u7684 Callback Hell \u95ee\u9898\u3002 \u6b64\u5916\uff0c\u5728\u591a\u673a\u7684\u7f51\u7edc\u901a\u4fe1\u90e8\u5206\uff0cOneFlow \u5e95\u5c42\u7684\u7f51\u7edc\u901a\u4fe1\u5e93\u539f\u751f\u652f\u6301 RDMA \u7684\u9ad8\u6027\u80fd\u901a\u4fe1\uff0c\u4e5f\u6709\u4e00\u5957\u57fa\u4e8e epoll \u7684\u9ad8\u6548\u901a\u4fe1\u8bbe\u8ba1\u3002\u800c\u76ee\u524d\u6700\u6d41\u884c\u7684 Pytorch\uff0c\u591a\u673a\u8fd8\u9700\u8981\u901a\u8fc7 RPC \u6765\u505a\u6570\u636e\u540c\u6b65\u3002 \u4e09\u3001OneFlow \u5982\u4f55\u505a\u5230\u5206\u5e03\u5f0f\u6700\u6613\u7528 \u00b6 OneFlow \u662f\u76ee\u524d\u5206\u5e03\u5f0f\u573a\u666f\u4e2d\u652f\u6301\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u3001\u6d41\u6c34\u5e76\u884c\u7b49\u6700\u6613\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002\u7528\u6237\u53ea\u9700\u8981\u50cf\u5355\u5361\u4e00\u6837\u53bb\u642d\u5efa\u7f51\u7edc\u6a21\u578b\uff0c\u5e76\u544a\u8bc9 OneFlow \u6709\u54ea\u4e9b\u673a\u5668\u54ea\u4e9b\u5361\uff0cOneFlow \u5c31\u4f1a\u7528\u6700\u9ad8\u6548\u7684\u65b9\u5f0f\u628a\u8fd9\u4e9b\u673a\u5668\u548c\u8bbe\u5907\u4f7f\u7528\u8d77\u6765\u3002 \u8fd9\u6e90\u4e8e OneFlow \u7684\u4e00\u5957\u72ec\u7279\u7684\u8bbe\u8ba1\uff1aConsistentView\uff08\u4e00\u81f4\u6027\u89c6\u89d2\uff09\u3002\u5bf9\u4e8e\u591a\u673a\u591a\u5361\uff0cOneFlow \u4f1a \u628a\u5b83\u62bd\u8c61\u6210\u4e00\u4e2a\u8d85\u7ea7\u5927\u7684\u8bbe\u5907 \uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u903b\u8f91\u4e0a\u7684\u8bbe\u5907\uff0c\u8fd9\u4e2a\u903b\u8f91\u8bbe\u5907\u7684\u663e\u5b58\u662f\u5b9e\u9645\u591a\u4e2a\u7269\u7406\u8bbe\u5907\u7684\u663e\u5b58\u4e4b\u548c\uff0c\u8fd9\u4e2a\u903b\u8f91\u8bbe\u5907\u7684\u7b97\u529b\u4e5f\u662f\u5b9e\u9645\u591a\u4e2a\u7269\u7406\u8bbe\u5907\u7684\u7b97\u529b\u4e4b\u548c\u3002 \u7528\u6237\u53ea\u9700\u8981\u5728\u8fd9\u4e2a\u903b\u8f91\u4e0a\u7684\u8d85\u7ea7\u8bbe\u5907\u91cc\uff0c\u5b9a\u4e49\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u662f\u5982\u4f55\u6784\u5efa\u7684\uff0c\u5176\u4f59\u7684\u4fbf\u4e0d\u9700\u8981\u7528\u6237\u6765\u64cd\u4f5c\uff0c\u7531 OneFlow \u6765\u5b8c\u6210\u903b\u8f91\u4e0a\u7684\u8bbe\u5907\u5230\u7269\u7406\u4e0a\u7684\u8bbe\u5907\u7684\u6620\u5c04\u3002 \u8fd9\u91cc\u5148\u660e\u786e\u4e24\u4e2a\u6982\u5ff5\uff1a\u201c\u903b\u8f91\u4e0a\u7684\u201d\u548c\u201c\u7269\u7406\u4e0a\u7684\u201d\u3002\u201c\u903b\u8f91\u4e0a\u7684\u201d\u8868\u793a OneFlow \u628a\u5206\u5e03\u5f0f\u96c6\u7fa4\u62bd\u8c61\u6210\u4e00\u4e2a\u8d85\u7ea7\u8ba1\u7b97\u673a\u4e4b\u540e\u7684\u8ba1\u7b97\u548c\u6570\u636e\uff0c\u201c\u7269\u7406\u4e0a\u7684\u201d\u8868\u793a\u90a3\u4e9b\u771f\u5b9e\u7684\u90e8\u7f72\u5230\u5404\u4e2a\u673a\u5668\u548c\u8bbe\u5907\u4e0a\u7684\u8ba1\u7b97\u548c\u6570\u636e\u3002 \u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u662f\u7531 Op \u6784\u6210\u7684\u8ba1\u7b97\u56fe\uff0cOp \u4e4b\u95f4\u751f\u4ea7\u6d88\u8d39 Tensor \u6570\u636e\u3002\u5728\u591a\u673a\u591a\u5361\u7684\u73af\u5883\u4e0b\uff0c\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 Op \u4f1a\u5bf9\u5e94\u591a\u4e2a\u771f\u5b9e\u7684\u7269\u7406\u4e0a\u7684 Op\uff0c\u6bcf\u4e2a\u7269\u7406\u4e0a\u7684 Op \u5b9e\u9645\u6267\u884c\u7684\u8ba1\u7b97\u90fd\u662f\u8fd9\u4e2a\u903b\u8f91 Op \u8ba1\u7b97\u7684\u4e00\u90e8\u5206\uff0c\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 Tensor \u4e5f\u4f1a\u5bf9\u5e94\u591a\u4e2a\u7269\u7406\u4e0a\u7684 Tensor\uff0c\u6bcf\u4e2a\u7269\u7406\u4e0a\u7684 Tensor \u90fd\u662f\u903b\u8f91 Tensor \u7684\u4e00\u90e8\u5206\u3002 \u5bf9\u4e8e\u5176\u4ed6\u7684\u6846\u67b6\u5b9a\u4e49\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u6bcf\u5f20\u5361\u662f\u4e00\u4e2a\u201cworld\u201d\uff0c\u591a\u5361\u4e4b\u95f4\u6839\u636e\u66b4\u9732\u51fa\u6765\u7684\u63a5\u53e3\u6765\u540c\u6b65\u6a21\u578b\u68af\u5ea6\uff1b\u800c\u5bf9\u4e8e OneFlow \u800c\u8a00\uff0c\u591a\u673a\u591a\u5361\u4e5f\u90fd\u662f\u4e00\u4e2a\u201cworld\u201d\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u5957 Placement+SBP \u7684\u65b9\u5f0f\u505a\u5168\u5c40\u7684\u7edf\u7b79\u7ba1\u7406\u3002 Placement \u00b6 \u5728 OneFlow \u7684\u8ba1\u7b97\u56fe\u642d\u5efa\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u8ba1\u7b97 Op \u90fd\u6709\u4e00\u4e2a\u5c5e\u6027\u53eb\u505a Placement\uff0c\u8868\u793a\u4e86\u8be5\u903b\u8f91\u4e0a\u7684 Op\uff0c\u662f\u8981\u90e8\u7f72\u5230\u54ea\u4e9b\u673a\u5668\u54ea\u4e9b\u8bbe\u5907\u4e0a\u7684\u3002\u5bf9\u4e8e\u5e38\u89c1\u7684\u6570\u636e\u5e76\u884c\uff0c\u5c31\u662f\u6240\u6709\u7684 Op \u90fd\u90e8\u7f72\u5230\u6240\u6709\u7684\u8bbe\u5907\u4e0a\u3002\u4f46 OneFlow \u4e5f\u652f\u6301\u7528\u6237\u6307\u5b9a Op \u7684 Placement\uff0c\u6bd4\u5982\u5f53\u7f51\u7edc\u8fc7\u5927\u5355\u5361\u6839\u672c\u653e\u4e0d\u4e0b\u7684\u65f6\u5019\uff0c\u5728 OneFlow \u53ef\u4ee5\u8ba9\u7f51\u7edc\u7684\u524d\u4e00\u90e8\u5206\u5728\u4e00\u5f20\u5361\u4e0a\uff0c\u540e\u4e00\u90e8\u5206\u5728\u53e6\u4e00\u5f20\u5361\u4e0a\uff0c\u7528\u4e00\u79cd\u201c\u63a5\u529b\u201d\u7684\u65b9\u5f0f\u5de5\u4f5c\uff0c\u5b9e\u73b0\u6d41\u6c34\u5e76\u884c\u3002 \u56fe4\u5c55\u793a\u4e86\u4e00\u79cd\u53ef\u80fd\u7684 Placement \u4f8b\u5b50\u3002\u7528\u6237\u5b9a\u4e49\u4e86\u4e00\u4e2a\u75313\u4e2a Op \u7ec4\u6210\u7684\u7f51\u7edc\uff1aOp_0 -> Op_1 -> Op_2\u3002 \u5176\u4e2d Op_0 \u548c Op_1 \u7684 Placement \u662f Device 0\uff0cOp_2 \u7684 Placement \u662f Device 1\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u6d41\u6c34\u5e76\u884c\u7684\u4f8b\u5b50\uff0cOneflow \u4f1a\u81ea\u52a8\u5728 Op_1 \u548c Op_2 \u4e4b\u95f4\u63d2\u5165\u9700\u8981\u7684\u6570\u636e\u642c\u8fd0\u7684 Copy Op\u3002 \u56fe4 \u4e00\u4e2a\u6d41\u6c34\u5e76\u884c\u7684Placement\u793a\u4f8b\u56fe SBP \u00b6 SBP \u662f OneFlow \u72ec\u6709\u7684\u6982\u5ff5\uff0c\u4ed6\u662f\u4e09\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u7ec4\u5408\uff1aSplit\u3001Broadcast\u3001PartialSum\uff08\u4ee5 PartialSum \u4e3a\u4f8b\uff0c\u5b9e\u9645\u4e0a\u8fd8\u53ef\u4ee5\u662fPartialMin\u3001 PartialMax \u7b49 reduce \u64cd\u4f5c\uff09\uff0c\u5168\u79f0\u53eb SbpParallel\uff0c\u8868\u793a\u4e00\u79cd\u903b\u8f91\u4e0a\u7684 Tensor \u8ddf\u7269\u7406\u4e0a\u7684\u591a\u4e2a Tensor \u7684\u6620\u5c04\u5173\u7cfb\u3002 \u5176\u4e2d Split \u8868\u793a\u7269\u7406\u4e0a\u7684 Tensor \u662f\u903b\u8f91 Tensor \u6309\u7167\u67d0\u4e00\u7ef4\u5ea6\u5207\u5206\u540e\u5f97\u5230\u7684\uff0c Split \u6709\u4e2a\u53c2\u6570 axis\uff0c\u8868\u793a\u5207\u5206\u7684\u7ef4\u5ea6\uff0c\u5982\u679c\u628a\u591a\u4e2a\u7269\u7406\u4e0a\u7684 Tensor \u6309\u7167 Split \u7684\u7ef4\u5ea6\u8fdb\u884c\u62fc\u63a5\uff0c\u5c31\u80fd\u8fd8\u539f\u51fa\u903b\u8f91 Tensor\u3002 Broadcast \u8868\u793a\u7269\u7406\u4e0a\u7684 Tensor \u662f\u8ddf\u903b\u8f91\u4e0a\u7684 Tensor \u5b8c\u5168\u76f8\u540c\u7684\u3002 PartialSum \u8868\u793a\u7269\u7406\u4e0a\u7684 Tensor \u867d\u7136\u8ddf\u903b\u8f91\u4e0a\u7684 Tensor \u5f62\u72b6\u4e00\u81f4\uff0c\u4f46\u662f\u7269\u7406\u4e0a\u7684 Tensor \u91cc\u7684\u503c\u662f\u903b\u8f91 Tensor \u91cc\u5bf9\u5e94\u4f4d\u7f6e\u7684\u4e00\u90e8\u5206\uff0c\u5982\u679c\u628a\u7269\u7406\u4e0a\u7684\u591a\u4e2a Tensor \u6309\u7167\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u52a0\uff0c\u5373\u53ef\u8fd8\u539f\u51fa\u903b\u8f91\u4e0a\u7684 Tensor\u3002 \u56fe5\u5c55\u793a\u4e86 SBP \u7684\u7b80\u5355\u793a\u4f8b\u3002 \u56fe5 \u51e0\u79cd SbpParallel \u7684\u7b80\u5355\u60c5\u5f62 SbpSignature \u662f\u4e00\u4e2a SbpParallel \u7684\u96c6\u5408\uff0c\u5728 OneFlow \u7684\u8bbe\u8ba1\u91cc\u662f Op \u7684\u5c5e\u6027\uff0c\u5b83\u63cf\u7ed8\u4e86\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 Op \u88ab\u6620\u5c04\u6210\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u591a\u4e2a\u7269\u7406\u4e0a\u7684Op\u4ee5\u540e\uff0c\u8fd9\u4e9b\u7269\u7406\u4e0a\u7684 Op \u662f\u5982\u4f55\u770b\u5f85\u4ed6\u4eec\u8f93\u5165\u8f93\u51faTensor\u5728\u903b\u8f91\u4e0a\u548c\u7269\u7406\u4e0a\u7684\u6620\u5c04\u5173\u7cfb\u7684\u3002\u4e00\u4e2a Op \u4f1a\u6709\u591a\u4e2a\u5408\u6cd5\u7684 SbpSignature\uff0c\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u5408\u6cd5 signature \u5c31\u662f\u8f93\u5165\u8f93\u51fa\u90fd\u662f Broadcast\uff0c\u8fd9\u8868\u793a\u4e86\u8fd9\u4e2a Op \u9700\u8981\u6574\u4e2a\u903b\u8f91\u4e0a\u7684 Tensor \u6570\u636e\u3002 \u5f53\u7528\u6237\u6784\u5efa\u7684\u903b\u8f91\u4e0a\u7684\u8ba1\u7b97\u56fe\u786e\u5b9a\u4ee5\u540e\uff0cOneFlow \u5728 Compiler \u751f\u6210\u5206\u5e03\u5f0f\u7684\u7269\u7406\u4e0a\u7684\u6267\u884c\u56fe\u65f6\uff0c\u4f1a\u8003\u8651\u6bcf\u4e2a Op \u7684 Placement \u548c\u8be5 Op \u5141\u8bb8\u7684\u5408\u6cd5 SbpSignature \u5217\u8868\uff0c\u5728\u5176\u4e2d\u9009\u62e9\u4e00\u4e2a\u4f20\u8f93\u5f00\u9500\u6700\u5c0f\u7684 SbpSignature \u4f5c\u4e3a\u672c\u6b21\u8bad\u7ec3\u7684 SbpSignature\uff0c\u7528\u4e8e\u6307\u5bfc Compiler \u751f\u6210\u6700\u9ad8\u6548\u7684\u6267\u884c\u56fe\u3002 \u5173\u4e8e Op \u7684\u5408\u6cd5 SbpSignature \u7684\u5217\u8868\uff0c\u6211\u4eec\u4e3e\u4e00\u4e2a\u77e9\u9635\u4e58\u6cd5\uff08matmul\uff09\u7684Op\u7684\u4f8b\u5b50\u3002 \u5b9a\u4e49: Y = matmul(A, B) , A , B , Y \u90fd\u662f Tensor \uff0c\u8868\u793a Y = AB \u3002\u90a3\u4e48\u81f3\u5c11\u5b58\u5728\u4e24\u79cd\u5408\u6cd5\u7684 SbpSignature\uff1a 1) Y: Split(0) , A: Split(0) , B: Broadcast 2) Y: Split(1) , A: Broadcast , B: Split(1) \u4e24\u79cd\u5408\u6cd5\u7684 signature \u5728\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u793a\u610f\u56fe\u5982\u56fe6\u6240\u793a\u3002\u5047\u8bbe\u903b\u8f91\u4e0a\u7684 MatMul \u7684\u8f93\u5165\u8f93\u51fa Tensor \u7684\u5f62\u72b6\u662f\uff1a A(64, 10) \u00d7 B(10, 50) -> Y(64, 50) \u56fe6 MatMul\u7684\u4e24\u79cd\u5408\u6cd5SbpSignature \u4e14\u8be5 Op \u5206\u5e03\u5728\u4e24\u4e2a\u8bbe\u5907\u4e0a\u3002\u5728\u7b2c\u4e00\u79cd SbpSignature \u4e0b\uff0c0\u53f7\u8bbe\u5907\u4e0a\u7684A\u662f\u903b\u8f91\u4e0a A \u7684\u524d\u4e00\u534a\uff0c1\u53f7\u8bbe\u5907\u4e0a\u7684 A \u662f\u903b\u8f91 A \u7684\u540e\u4e00\u534a\uff08\u6309\u7167\u7b2c0\u7ef4\u5207\u5206\uff09\uff0c\u800c\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684 B \u8ddf\u903b\u8f91\u4e0a\u7684 B \u5b8c\u5168\u4e00\u81f4\uff0c\u4e24\u4e2a\u8bbe\u5907\u8f93\u51fa\u7684 Y \u5206\u522b\u662f\u903b\u8f91\u4e0a\u7684 Y \u7684\u524d\u4e00\u534a\u548c\u540e\u4e00\u534a\u3002\u540c\u6837\u53ef\u4ee5\u5206\u6790\u7b2c\u4e8c\u79cd SbpSignature\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5f53 A \u662f\u6570\u636e\uff0cB \u662f\u6a21\u578b\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u79cd SbpSignature \u5c31\u662f \u6570\u636e\u5e76\u884c \uff0c\u7b2c\u4e8c\u79cd SbpSignature \u5c31\u662f \u6a21\u578b\u5e76\u884c \u3002\u5982\u679c\u4e24\u4e2a\u76f8\u90bb\u7684 MatMul op\uff0c\u524d\u4e00\u4e2a\u4f7f\u7528\u7b2c\u4e00\u79cd SbpSignature\uff0c\u540e\u4e00\u4e2a\u4f7f\u7528\u7b2c\u4e8c\u79cd SbpSignature\uff0c\u6574\u4e2a\u7f51\u7edc\u5c31\u5b9e\u73b0\u4e86 \u6df7\u5408\u5e76\u884c \u3002 \u56fe7\u662f\u4e00\u4e2a\u6df7\u5408\u5e76\u884c\u7684\u793a\u4f8b\uff0c\u5b9a\u4e49\u4e86 Y0 = MatMul_0(A0, B0) , Y1 = MatMul_1(Y0, B1) \u8fd9\u6837\u4e00\u4e2a\u7531\u4e24\u4e2aop\u7ec4\u6210\u7684\u8ba1\u7b97\u56fe\uff0c\u5176\u4e2dA0, Y0, Y1\u662f\u6570\u636eTensor\uff0cB0, B1 \u662f\u6a21\u578bTensor\u3002 \u56fe7 \u6df7\u5408\u5e76\u884c\u793a\u4f8b \u5728\u56fe7\u4e2d MatMul_0 \u4ea7\u51fa\u7684 Y0 \u88ab MatMul_1 \u6d88\u8d39\uff0c\u4f46\u662f\u8fd9\u4e24\u4e2a op \u5bf9\u540c\u4e00\u4e2a Tensor \u7684 SBP \u770b\u5f85\u65b9\u5f0f\u662f\u4e0d\u4e00\u6837\u7684\uff0cMatMul_0 \u8ba4\u4e3a Y0 \u662f Split(axis=0) \u5207\u5206\uff0c\u4f46\u662f MatMul_1 \u9700\u8981\u4e00\u4e2a Broadcast \u7684 Y0 \u8f93\u5165\u3002\u8fd9\u65f6\u5019OneFlow\u4f1a\u81ea\u52a8\u63d2\u5165\u4e00\u4e2a\u201c\u4e07\u80fd\u201d\u7684 Boxing Op \u505a\u5fc5\u8981\u7684\u6570\u636e\u88c1\u526a\u3001\u62fc\u63a5\u3001\u642c\u8fd0\u548c\u6c42\u548c\u7b49\u64cd\u4f5c\uff0c\u4f7f\u5f97\u6240\u6709\u7684Op\u90fd\u53ef\u4ee5\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\u9ad8\u6548\u7684\u62ff\u5230\u81ea\u5df1\u60f3\u8981\u7684\u6570\u636e\u3002 \u53e6\u5916\u5728\u6570\u636e\u5e76\u884c\u7684\u65f6\u5019\uff0c\u8bad\u7ec3\u7684\u524d\u5411\u6a21\u578b Tensor \u7684\u662f Broadcast\uff0c\u5bf9\u5e94\u53cd\u5411\u4f20\u64ad\u7684\u68af\u5ea6\u5c31\u662fPartialSum\uff0c\u5f53 Optimizer \u9700\u8981\u5168\u90e8\u7684\u68af\u5ea6\u6765\u66f4\u65b0\u6a21\u578b\u65f6\uff0c\u5c31\u4f1a\u89e6\u53d1 OneFlow \u7684 Boxing \u673a\u5236\u8fdb\u884c\u9ad8\u6548\u7684\u68af\u5ea6\u540c\u6b65\u5de5\u4f5c\u3002 \u6700\u6613\u7528\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6846\u67b6 \u00b6 OneFlow \u7684\u8fd9\u5957 Placement + SBP + Boxing \u7684\u673a\u5236\uff0c\u53ef\u4ee5\u4f7f\u5f97\u7528\u6237\u5b9a\u4e49\u7684\u8ba1\u7b97\u56fe\u4e2d\u7684 Op\u3001Tensor \u4ee5\u4efb\u610f\u7684\u65b9\u5f0f\u5206\u5e03\u5728\u5404\u4e2a\u673a\u5668\u548c\u5404\u4e2a\u8bbe\u5907\u4e0a\uff0c\u65e0\u8bba\u662f\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u8fd8\u662f\u6d41\u6c34\u5e76\u884c\uff0c\u5bf9\u4e8e OneFlow \u800c\u8a00\uff0c\u90fd\u53ea\u662f\u4e00\u4e2a\u7279\u5b9a Placement \u4e0b\u7684\u7279\u5b9a SbpSignature \u7684\u7ec4\u5408\u800c\u5df2\uff0c\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u914d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4ea4\u7ed9 OneFlow \u6765\u505a\u81ea\u52a8\u7684\u5904\u7406\u3002 \u53e6\u5916\uff0c\u65e9\u5728\u5fae\u8f6f\u63a8\u51fa ZeRO-2 \u6846\u67b6\u4e4b\u524d\uff0cOneFlow \u5c31\u5df2\u7ecf\u652f\u6301\u4e86\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u591a\u673a\u591a\u5361\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u6a21\u578b Tensor \u90fd\u53ea\u4fdd\u5b58\u5728\u5176\u4e2d\u4e00\u4e2a\u8bbe\u5907\u4e0a\uff0c\u964d\u4f4e\u68af\u5ea6\u8ba1\u7b97\u4e2d\u7684\u5185\u5b58\u5360\u7528\u3002 \u56db\u3001\u603b\u7ed3 \u00b6 \u7efc\u4e0a\uff0c\u5728\u7f16\u8bd1\u671f\uff0cOneFlow \u901a\u8fc7\u8bbe\u8ba1\u4e00\u5957\u6570\u5b66\u4e0a\u4e25\u8c28\u7684\u5f62\u5f0f\u7cfb\u7edf\u6765\u8868\u793a\u6240\u6709\u5408\u6cd5\u7684\u5e76\u884c\u6a21\u5f0f\uff0c\u5e76\u652f\u6301\u7f16\u8bd1\u5668\u8f83\u65b9\u4fbf\u5730\u81ea\u52a8\u641c\u7d22\u6700\u4f18\u5e76\u884c\u65b9\u6848\u3002 \u5728\u8fd0\u884c\u671f\uff0cOneFlow \u901a\u8fc7 Actor \u7cfb\u7edf\u6700\u4f18\u5730\u3001\u7075\u6d3b\u5730\u652f\u6301\u5e76\u884c\u3001\u5e76\u53d1\u6267\u884c\u3002OneFlow \u7684\u5185\u6838\u5177\u6709\u7b80\u6d01\u3001\u9ad8\u6548\u548c\u9ad8\u6269\u5c55\u6027\u7684\u4f18\u70b9\u3002 \u57fa\u4e8e\u6b64\u8bbe\u8ba1\uff0cOneFlow \u4f7f\u5f97\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u6027\u80fd\u8fbe\u5230\u6781\u81f4\uff0c\u4e14\u5206\u5e03\u5f0f\u8bad\u7ec3\u8ddf\u5355\u5361\u4e00\u6837\u7b80\u5355\u6613\u7528\u3002","title":"OneFlow \u7cfb\u7edf\u8bbe\u8ba1"},{"location":"single_client/basics_topics/essentials_of_oneflow.html#oneflow","text":"\u672c\u6587\u7684\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\uff1a OneFlow \u7684\u8bbe\u8ba1\u76ee\u6807 OneFlow \u7684\u7279\u8272\u4e00\uff1aActor \u673a\u5236 OneFlow \u7684\u7279\u8272\u4e8c\uff1aSBP \u673a\u5236 \u603b\u7ed3","title":"OneFlow\u7cfb\u7edf\u8bbe\u8ba1"},{"location":"single_client/basics_topics/essentials_of_oneflow.html#oneflow_1","text":"OneFlow \u7684\u8bbe\u8ba1\u76ee\u6807\u662f\u8ffd\u6c42\u6781\u81f4\u7684\u6027\u80fd\uff0c\u7279\u522b\u662f\u5206\u5e03\u5f0f\u591a\u673a\u591a\u5361\u73af\u5883\u4e0b\u7684\u6a2a\u5411\u6269\u5c55\u6027\uff0c\u5e0c\u671b\u80fd\u8ba9\u7528\u6237\u4f7f\u7528\u591a\u673a\u591a\u5361\u5c31\u50cf\u4f7f\u7528\u5355\u673a\u5355\u5361\u4e00\u6837\u5bb9\u6613\uff0c\u4e14\u4eab\u53d7\u7ebf\u6027\u52a0\u901f\u7684\u8fd0\u884c\u6548\u7387\u3002 \u4e3a\u4ec0\u4e48 OneFlow \u8981\u805a\u7126\u4e8e\u5206\u5e03\u5f0f\u573a\u666f\u7684\u6027\u80fd\u548c\u6613\u7528\u6027\u5462\uff1f\u968f\u7740\u6df1\u5ea6\u5b66\u4e60\u7684\u53d1\u5c55\uff0c\u6a21\u578b\u8d8a\u6765\u8d8a\u5927\uff0c\u8bad\u7ec3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u6240\u9700\u7684\u7b97\u529b\u4f1a\u8d8a\u6765\u8d8a\u9ad8\uff0c\u540c\u65f6\u6a21\u578b\u589e\u5927\u7684\u901f\u5ea6\u8981\u5927\u4e8e GPU \u5355\u5361\u663e\u5b58\u6269\u5bb9\u7684\u901f\u5ea6\uff1b\u8bad\u7ec3\u5bf9\u7b97\u529b\u7684\u589e\u957f\u8981\u6c42\u8981\u5927\u4e8e GPU \u5355\u5361\u7b97\u529b\u589e\u957f\u7684\u901f\u5ea6\u3002\u5355\u5361\u7684\u8ba1\u7b97\u80fd\u529b\u548c\u663e\u5b58\u8fdc\u8fdc\u4e0d\u80fd\u6ee1\u8db3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\u7684\u9700\u6c42\uff0c\u5fc5\u987b\u501f\u52a9\u591a\u673a\u591a\u5361\u5e76\u884c\u52a0\u901f\u3002 \u82e5\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u53ef\u4ee5\u8ba9\u4e92\u8054\u7684\u591a\u4e2a GPU \u534f\u540c\u5de5\u4f5c\u597d\uff0c\u5b9e\u73b0\u7ebf\u6027\u52a0\u901f\u6bd4\uff0c\u5373\u4f7f\u6bcf\u5757 GPU \u6027\u80fd\u201c\u4e00\u822c\u201d\uff0c\u4e5f\u53ef\u6ee1\u8db3\u4efb\u610f\u89c4\u6a21\u7684\u7b97\u529b\u9700\u6c42\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u6a2a\u5411\u6269\u5c55\u6027\uff0c\u6211\u4eec\u575a\u4fe1\u8fd9\u662f\u7b97\u529b\u589e\u957f\u7684\u89e3\u51b3\u4e4b\u9053\u3002 \u4f46\u662f\uff0c\u5df2\u6709\u6846\u67b6\u90fd\u662f\u9996\u5148\u805a\u7126\u4e8e\u5355\u5361\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u4ec5\u5bf9\u9002\u5408\u6570\u636e\u5e76\u884c\u7684\u591a\u673a\u591a\u5361\u573a\u666f\u5904\u7406\u7684\u8f83\u597d\uff0c\u5373\u628a\u5355\u5361\u7684\u8ba1\u7b97\u56fe\u955c\u50cf\u590d\u5236\u5230\u591a\u673a\u591a\u5361\u4e0a\uff0c\u5404\u4e2a\u5361\u548c\u673a\u5668\u4e4b\u95f4\u8f85\u52a9\u4e8e\u6a21\u578b\u540c\u6b65\u7684\u6a21\u5757\u3002 \u5bf9\u4e8e BERT/GPT-3 \u7b49\u53c2\u6570\u91cf\u5de8\u5927\u7684\u6a21\u578b\uff0c\u7528\u6237\u5728\u4f7f\u7528\u5df2\u6709\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u65f6\u5e38\u5e38\u4f1a\u9047\u5230\u591a\u673a\u591a\u5361\u4e0d\u597d\u7528\u3001\u6548\u7387\u4f4e\u4e0b\u6216\u65e0\u6cd5\u5b9e\u73b0\u7b49\u95ee\u9898\u3002\u7528\u6237\u505a\u5206\u5e03\u5f0f\u8bad\u7ec3\u5e38\u5e38\u9700\u8981\u8f83\u9ad8\u7684\u5b66\u4e60\u6210\u672c\uff0c\u8fd8\u9700\u8981\u5173\u5fc3\u591a\u673a\u591a\u5361\u4e4b\u95f4\u6a21\u578b\u7684\u540c\u6b65\u95ee\u9898\u3002\u4e1a\u754c\u4e3a\u89e3\u51b3\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u7684\u75db\u70b9\uff0c\u4e0d\u4ec5\u6539\u8fdb\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u81ea\u8eab\uff0c\u8fd8\u7814\u53d1\u4e86\u591a\u79cd\u7b2c\u4e09\u65b9\u63d2\u4ef6\uff0c\u8b6c\u5982 NCCL\uff0cHorovod\uff0cBytePS\uff0cHugeCTR\uff0cMesh-tensorflow\uff0cGpipe \u7b49\u7b49\uff0c\u4f46\u4ecd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u6781\u81f4\u7684\u6027\u80fd\u9700\u6c42\u3002 OneFlow \u7684\u6838\u5fc3\u8bbe\u8ba1\u7406\u5ff5\u662f\uff0c\u8ba9\u591a\u673a\u591a\u5361\u5206\u5e03\u5f0f\u8bad\u7ec3\u9ad8\u6548\u5730\u534f\u540c\u8fd0\u8f6c\uff0c\u540c\u65f6\u8981\u8ba9\u7528\u6237\u5728\u591a\u673a\u591a\u5361\u7684\u8bad\u7ec3\u4f53\u9a8c\u4e0a\u5c31\u50cf\u5355\u5361\u4e00\u6837\u7b80\u5355\u5bb9\u6613\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ecb\u7ecdOneFlow \u5b9e\u73b0\u6b64\u76ee\u6807\u6700\u6838\u5fc3\u7684\u4e24\u70b9\u60f3\u6cd5\uff0c\u6765\u8bf4\u660e OneFlow \u662f\u5982\u4f55\u770b\u5f85\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u7684\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u7684\u3002","title":"\u4e00\u3001OneFlow \u7684\u8bbe\u8ba1\u76ee\u6807"},{"location":"single_client/basics_topics/essentials_of_oneflow.html#actor","text":"\u5173\u952e\u7279\u6027\uff1a \u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6 \u6d41\u6c34\u7ebf \u6570\u636e\u642c\u8fd0\u662f\u4e00\u7b49\u516c\u6c11 \u4f20\u8f93\u88ab\u8ba1\u7b97\u63a9\u76d6 \u63a7\u5236\u903b\u8f91\u88ab\u6267\u884c\u903b\u8f91\u63a9\u76d6 \u5728 OneFlow \u7684\u8bbe\u8ba1\u4e2d\uff0c\u5206\u4e3a Compile \u548c Runtime \u4e24\u4e2a\u65f6\u671f\uff0cCompile \u65f6\u671f\u628a\u7528\u6237\u5b9a\u4e49\u7684\u795e\u7ecf\u7f51\u7edc\u3001\u5206\u5e03\u5f0f\u73af\u5883\u4fe1\u606f\u7b49\u7f16\u8bd1\u6210\u4e00\u4e2a\u9759\u6001\u56fe\u7684\u6267\u884c\u8ba1\u5212 Plan\uff0cPlan \u7531\u6267\u884c\u5355\u5143 Actor \u7684\u63cf\u8ff0\u4fe1\u606f\u7ec4\u6210\uff1bRuntime \u65f6\u671f\uff0c\u5404\u4e2a\u673a\u5668\u6839\u636e Plan \u91cc\u7684 Actor \u63cf\u8ff0\u4fe1\u606f\u771f\u5b9e\u5730\u521b\u5efa\u5c5e\u4e8e\u81ea\u5df1\u673a\u5668\u7684\u4f17\u591a Actor \u5b9e\u4f8b\uff0c\u7136\u540e\u542f\u52a8 Actor \u8fd0\u884c\u7cfb\u7edf\u3002\u6574\u4e2a\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u671f\u95f4\uff0cOneFlow \u7684\u6267\u884c\u57fa\u672c\u5355\u5143\u5c31\u662f Actor\uff0cActor \u5bf9\u5e94\u9759\u6001\u6267\u884c\u56fe\u4e0a\u7684\u8282\u70b9\uff0cActor \u4e4b\u95f4\u751f\u4ea7\u3001\u6d88\u8d39\u7684\u6570\u636e\u5b58\u50a8\u5728 Register \u4e2d\uff0cActor \u4e4b\u95f4\u901a\u8fc7\u6d88\u606f\u4f20\u9012\u6765\u534f\u4f5c\u8fd0\u884c\u3002","title":"\u4e8c\u3001Actor\uff1a\u4e00\u5957\u7b80\u6d01\u7684\u673a\u5236\u89e3\u51b3\u51e0\u4e4e\u6240\u6709\u6280\u672f\u96be\u9898"},{"location":"single_client/basics_topics/essentials_of_oneflow.html#1-actor","text":"OneFlow \u7684\u8fd0\u884c\u65f6\u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6\u5c31\u662f\u7528 Actor \u673a\u5236\u5b9e\u73b0\u7684\u3002\u5728\u6574\u4e2a\u7531 Actor \u6784\u6210\u7684\u9759\u6001\u56fe\u4e2d\uff0c\u6ca1\u6709\u4e00\u4e2a\u4e2d\u5fc3\u7684\u8c03\u5ea6\u8282\u70b9\uff0c\u6bcf\u4e2a Actor \u90fd\u53ea\u9700\u8981\u5173\u5fc3\u81ea\u5df1\u6240\u9700\u6570\u636e\u7684\u751f\u4ea7\u8005\uff08\u4e0a\u6e38 Actor \uff09\u548c\u81ea\u5df1\u751f\u4ea7\u7684\u6570\u636e\u7684\u6d88\u8d39\u8005\uff08\u4e0b\u6e38 Actor\uff09\u5373\u53ef\u3002\u8fd9\u6837\u5728\u8d85\u5927\u89c4\u6a21\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u573a\u666f\u4e0b\uff0c \u5b8c\u5168\u7684\u53bb\u4e2d\u5fc3\u5316 \u8c03\u5ea6\u53ef\u4ee5\u907f\u514d\u4e2d\u5fc3\u8c03\u5ea6\u7684\u5355\u70b9\u6027\u80fd\u74f6\u9888\u95ee\u9898\u3002 \u6bcf\u4e2a Actor \u5185\u90e8\u90fd\u6709\u4e00\u4e2a \u72b6\u6001\u673a \uff0cActor \u6536\u53d1\u7684\u6d88\u606f\u3001\u6267\u884c\u7684\u60c5\u51b5\u90fd\u4f1a\u6539\u53d8\u81ea\u5df1\u7684\u72b6\u6001\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cRegister \u662f\u5b58\u50a8\u5757\uff0c\u5b58\u653e\u4e86 Actor \u751f\u4ea7\u51fa\u6765\u7684\u6570\u636e\uff0c\u800c\u6d88\u606f\u662f\u5305\u542b\u4e86 Register \u5b58\u50a8\u5757\u7684\u5185\u5b58\u5730\u5740\u7684\u8f7b\u91cf\u7ea7\u6570\u636e\uff0cActor \u4e4b\u95f4\u4f20\u9012\u7684\u662f\u6d88\u606f\uff0c\u800c\u4e0d\u662f Register\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 zero-copy\u3002 \u5f53 Actor \u6536\u5230\u4e86\u65b0\u6d88\u606f\uff0c\u5224\u65ad\u5b83\u6267\u884c\u6240\u9700\u8981\u6d88\u8d39\u7684 Register \u5df2\u7ecf\u5c31\u7eea\uff0c\u4e14\u5b83\u5c06\u8981\u751f\u4ea7\u7684\u6570\u636e\u6709\u7a7a\u95f2\u7684 Register \u53ef\u4ee5\u5199\u5165\u65f6\uff0c\u8fd9\u4e2a Actor \u5c31\u6267\u884c\uff08Act\uff09\u4e00\u6b21\uff0c\u751f\u4ea7\u51fa\u4e00\u4e2a Register\u3002 \u751f\u4ea7\u5b8c\u4ee5\u540e\uff0c\u8be5 Actor \u5c31\u5411\u9700\u8981\u6d88\u8d39\u8fd9\u4e2a Register \u7684\u90a3\u4e9b\u6d88\u8d39\u8005 Actor \u4eec\u53d1\u6d88\u606f\uff0c\u8868\u793a \u201c\u4f60\u4eec\u53ef\u4ee5\u6765\u8bfb\u53d6\u6211\u751f\u4ea7\u7684\u6570\u636e\u4e86\u201d \uff1b\u540c\u65f6\u8be5 Actor \u8fd8\u9700\u8981\u628a\u5b83\u6d88\u8d39\u5b8c\u7684\u90a3\u4e9b Register \u8fd8\u7ed9\u8fd9\u4e9b Regsiter \u7684\u751f\u4ea7\u8005 Actor \u4eec\uff0c\u8868\u793a \u201c\u6211\u7528\u5b8c\u4e86\u4f60\u4eec\u7684\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u56de\u6536\u4e86\u201d \u3002Actor \u5185\u90e8\u7684\u72b6\u6001\u673a\u5982\u56fe1 \u6240\u793a\u3002 \u56fe1 Actor \u5185\u90e8\u72b6\u6001\u673a \u5728 Actor \u542f\u52a8\u4e4b\u540e\uff0c\u4f1a\u6839\u636e\u4e0e\u5176\u4ed6 Actor \u4e4b\u95f4\u6536\u53d1\u6d88\u606f\u6765\u5207\u6362\u81ea\u5df1\u7684\u4e24\u4e2a\u72b6\u6001\uff1a \u7b49\u5f85\u72b6\u6001 \u548c \u6267\u884c\u72b6\u6001 \u3002 \u4e00\u4e2a Actor \u6536\u5230\u7684\u6d88\u606f\u4e00\u822c\u5206\u4e3a\u51e0\u4e2a\u7c7b\u578b\uff1a \u4e0a\u6e38\u7684\u751f\u4ea7\u8005 Actor \u53d1\u6765\u6d88\u606f\u8bf4\uff1a\u4f60\u53ef\u4ee5\u6765\u8bfb\u6211\u751f\u4ea7\u7684\u6570\u636e\u4e86\uff1b \u4e0b\u6e38\u7684\u6d88\u8d39\u8005 Actor \u53d1\u6765\u6d88\u606f\u8bf4\uff1a\u6211\u7528\u5b8c\u4f60\u751f\u4ea7\u7684\u6570\u636e\u4e86\u3002 \u5f53\u8fd9\u4e2a\u6570\u636e\u88ab\u6240\u6709\u6d88\u8d39\u8005\u90fd\u7528\u5b8c\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u56de\u6536\u6210\u4e3a\u7a7a\u95f2\u5757\u7b49\u5f85\u4e0b\u4e00\u6b21\u88ab\u8be5 Actor \u91cd\u65b0\u751f\u4ea7\u4e00\u4efd\u65b0\u7684\u6570\u636e\u3002 \u4e00\u4e2a Actor \u6536\u5230\u6d88\u606f\u4ee5\u540e\u90fd\u4f1a\u53bb\u5c1d\u8bd5\u5224\u65ad\u5f53\u524d\u662f\u5426\u6ee1\u8db3\u6267\u884c\u6761\u4ef6\uff0c\u6267\u884c\u6761\u4ef6\u4e00\u822c\u6709\u4e24\u4e2a\uff1a \u9700\u8981\u8bfb\u53d6\u7684\u6570\u636e\u662f\u5426\u90fd\u5230\u9f50\u4e86\uff1b \u662f\u5426\u6709\u7a7a\u95f2\u5757\u53ef\u4ee5\u62ff\u6765\u88ab\u751f\u4ea7\u3002\u5f53\u6ee1\u8db3\u6267\u884c\u72b6\u6001\u4ee5\u540e Actor \u5c31\u5f00\u59cb\u8c03\u7528\u81ea\u5df1\u5185\u90e8\u7684 Kernel \u771f\u5b9e\u7684\u53bb\u8bfb\u5199\u6570\u636e\u3002 \u6267\u884c\u5b8c\u6bd5\u540e Actor \u4f1a\u5411\u4e0a\u4e0b\u6e38\u53d1\u6d88\u606f\uff1a \u5411\u4e0b\u6e38\u7684\u6d88\u8d39\u8005 Actor \u53d1\u6d88\u606f\u8bf4\uff1a\u6211\u521a\u751f\u4ea7\u4e86\u4e00\u5757\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u6765\u8bfb\u4e86\uff1b \u5411\u4e0a\u6e38\u7684\u751f\u4ea7\u8005 Actor \u53d1\u6d88\u606f\u8bf4\uff1a\u6211\u521a\u7528\u5b8c\u4e86\u4f60\u4e4b\u524d\u53d1\u7ed9\u6211\u7684\u6570\u636e\u4e86\u3002 Actor \u53ea\u9700\u8981\u5173\u5fc3\u4e0a\u4e0b\u6e38\u7684\u6d88\u606f\u5c31\u80fd\u5224\u65ad\u81ea\u5df1\u80fd\u4e0d\u80fd\u6267\u884c\u3002\u6bcf\u4e2a Actor \u90fd\u901a\u8fc7\u81ea\u5df1\u5185\u90e8\u7684\u72b6\u6001\u673a\u548c\u6536\u53d1\u6d88\u606f\u673a\u5236\u5b9e\u73b0\u4e86 \u5b8c\u5168\u53bb\u4e2d\u5fc3\u5316 \u7684\u5206\u5e03\u5f0f\u534f\u540c\u5de5\u4f5c\u3002","title":"1. Actor \u673a\u5236\u5b9e\u73b0\u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6"},{"location":"single_client/basics_topics/essentials_of_oneflow.html#2-actor","text":"\u4e0a\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86 Actor \u7684\u5185\u90e8\u72b6\u6001\u673a\uff0cActor \u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u9012\u548c\u6570\u636e\u4f20\u9012\u662f\u4f9d\u8d56 Register \u5b9e\u73b0\u7684\u3002\u4e00\u4e2a Actor \u662f\u5426\u80fd\u6267\u884c\uff0c\u53ea\u8ddf\u4e24\u4e2a\u6761\u4ef6\u76f8\u5173\uff1a \u81ea\u5df1\u6d88\u8d39\u7684\u90a3\u4e9b Register \u662f\u5426\u53ef\u8bfb\uff1b \u81ea\u5df1\u751f\u4ea7\u7684\u90a3\u4e9b Register \u662f\u5426\u6709\u7a7a\u95f2\u5757\u53ef\u5199\u3002 \u5bf9\u4e8e\u4e00\u4e2a Register\uff0c\u5982\u679c\u6211\u4eec\u8fd0\u884c\u65f6\u7ed9\u5b83\u5206\u914d\u591a\u4e2a\u7a7a\u95f2\u5757\uff0c\u90a3\u4e48\u76f8\u90bb\u7684\u4e24\u4e2a Actor \u5c31\u53ef\u4ee5\u540c\u65f6\u5de5\u4f5c\uff0c\u5de5\u4f5c\u65f6\u95f4\u91cd\u53e0\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5404\u4e2a Actor \u4e4b\u95f4\u7684\u6d41\u6c34\u7ebf\u3002\u7406\u60f3\u72b6\u6001\u4e0b\u6574\u4e2a\u9759\u6001\u6267\u884c\u56fe\u7684\u6267\u884c\u65f6\u95f4\u5c31\u662f\u6574\u4e2a\u7cfb\u7edf\u4e2d\u662f\u6027\u80fd\u74f6\u9888\u7684\u90a3\u4e2a Actor \u8fd0\u884c\u7684\u603b\u65f6\u95f4\uff0c\u5176\u4f59 Actor \u7684\u6267\u884c\u65f6\u95f4\u90fd\u88ab\u6d41\u6c34\u7ebf\u63a9\u76d6\u8d77\u6765\u4e86\u3002 \u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u6765\u89e3\u91ca Actor \u673a\u5236\u4e0b\u7684\u6d41\u6c34\u7ebf\u662f\u5982\u4f55\u8fd0\u8f6c\u8d77\u6765\u7684\u3002\u56fe2\u662f\u4e00\u4e2a\u75313\u4e2a Actor\uff08a, b, c\uff09\u7ec4\u6210\u7684\u8ba1\u7b97\u56fe\u7684\u6267\u884c\u65f6\u5e8f\u56fe\u3002\u5176\u4e2d\u6df1\u7eff\u8272\u7684 Regst\u65b9\u5757\u8868\u793a\u6b63\u5728\u88ab\u4f7f\u7528\u7684 Register \u5757\uff0c\u767d\u8272\u7684 Regst \u65b9\u5757\u8868\u793a\u540c\u4e00\u4e2a Register \u7684\u5907\u7528\u7a7a\u95f2\u5757\u3002 1\uff09\u5728 Time0 \u65f6\u523b\uff0cActor a \u4ea7\u51fa\u4e86\u4e00\u4e2a Regst_a_0\uff0cActor b \u548c Actor c \u7531\u4e8e\u6ca1\u6709\u53ef\u8bfb\u7684 Register\uff0c\u6240\u4ee5\u5904\u5728\u7b49\u5f85\u72b6\u6001\u3002\u5047\u8bbe\u6bcf\u4e2a Actor\u7684\u6267\u884c\u65f6\u95f4\u90fd\u662f\u5355\u4f4d\u65f6\u95f4\u3002 2\uff09\u5230 Time1 \u65f6\u523b\uff0cActor a \u7ed9 Actor b \u53d1\u6d88\u606f\u8bf4\u4f60\u53ef\u4ee5\u6765\u8bfb\u6211\u4ea7\u51fa\u7684 Regst_a_0 \u4e86\uff0cActor b \u6536\u5230\u4e86\u6d88\u606f\uff0c\u5e76\u68c0\u67e5\u81ea\u5df1\u751f\u4ea7\u7684 Register b \u662f\u5426\u6709\u7a7a\u95f2 Regst \u5757\u53ef\u7528\uff0c\u53d1\u73b0\u6709\u53ef\u7528\u7684 Regst_b_0\uff0c\u4e8e\u662f Time1 \u65f6\u523bActor b \u6267\u884c\uff0c\u8bfb\u53d6 Regst_a_0\uff0c\u5199 Regst_b_0\uff1b\u540c\u65f6 Actor a \u8fd8\u4f1a\u53bb\u770b\u81ea\u5df1\u662f\u5426\u6709\u7a7a\u95f2\u5757\u53ef\u5199\uff0c\u53d1\u73b0\u6709\uff0cTime1 \u65f6\u523b Actor a \u4e5f\u5728\u6267\u884c\uff0c\u5199 Regst_a_1\uff08\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cRegst_a_0 \u548c Regst_a_1 \u903b\u8f91\u4e0a\u662f\u5c5e\u4e8e\u540c\u4e00\u4e2a Register\uff0c\u53ea\u662f\u7a7a\u95f4\u4e0a\u5206\u6210\u4e86\u4e0d\u540c\u7684\u7a7a\u95f2\u5757\u5907\u4efd\u800c\u5df2\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u4efb\u52a1\u4e2d\uff0cRegst_a_0 \u548c Regst_a_1 \u91cc\u5b58\u653e\u7684\u662f\u540c\u4e00\u4e2a operator \u4ea7\u51fa\u7684\u4e0d\u540cbatch\u7684\u6570\u636e\uff09\u3002\u4e8e\u662f Actor a \u548c Actor b \u5c31\u5e76\u884c\u5de5\u4f5c\u8d77\u6765\u4e86\u3002Actor c \u7531\u4e8e\u6ca1\u6709\u6570\u636e\u53ef\u8bfb\uff0c\u4ecd\u5728\u7b49\u5f85\u3002 3\uff09\u5230 Time2 \u65f6\u523b\uff0cActor b \u751f\u4ea7\u51fa\u4e86 Regst_b_0\uff0c\u4e8e\u662f\u7ed9\u4e0b\u6e38\u7684\u6d88\u8d39\u8005Actor c \u53d1\u6d88\u606f\u8bf4\u4f60\u53ef\u4ee5\u6765\u8bfb\u6211\u751f\u4ea7\u7684 Regst_b_0\uff0c\u540c\u65f6\u7ed9\u4e0a\u6e38\u7684\u751f\u4ea7\u8005Actor a \u53d1\u6d88\u606f\u8bf4\u6211\u7528\u5b8c\u4e86\u4f60\u7684 Regst_a_0\u3002\u6b64\u65f6 Actor a \u5df2\u7ecf\u628a\u521a\u521a\u751f\u4ea7\u7684 Regst_a_1 \u53c8\u53d1\u7ed9\u4e86 Actor b\uff0cActor b \u68c0\u67e5\u81ea\u5df1\u4ecd\u6709 Regst_b_1 \u7a7a\u95f2\uff0c\u4e8e\u662f Actor b \u5f00\u59cb\u8bfb Regst_a_1\uff0c\u5199 Regst_b_1\uff1bActor c \u6536\u5230 Regst_b_0\uff0c\u53d1\u73b0\u81ea\u5df1\u6709 Regst_c_0 \u7a7a\u95f2\uff0c\u4e8e\u662f Actor c \u5f00\u59cb\u6267\u884c\uff0c\u8bfb Regst_b_0\uff0c\u5199 Regst_c_0\uff1bActor a \u6536\u5230\u4e86 Actor b \u7528\u5b8c\u8fd8\u56de\u6765\u7684 Regst_a_0\uff0c\u68c0\u67e5 Regst_a_0 \u6240\u6709\u7684\u6d88\u8d39\u8005\u90fd\u7528\u5b8c\u4e86\uff0c\u4e8e\u662f\u5c06 Regst_a_0 \u56de\u6536\uff0c\u6807\u8bb0\u4e3a\u7a7a\u95f2\u5757\uff0c\u540c\u65f6 Actor a \u8fd8\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u5199 Regst_a_2\u3002 \u56fe2 Actor \u751f\u4ea7\u6d88\u8d39\u5173\u7cfb\u548c\u6267\u884c\u65f6\u5e8f\u56fe \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5230\u4e86 Time2 \u65f6\u523b\uff0c\u5176\u5b9e Actor a\u3001b\u3001c \u90fd\u5728\u5de5\u4f5c\uff0c\u5728\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u4efb\u52a1\u4e2d\uff0cTime2 \u65f6\u523b Regst_b_0\u3001Regst_c_0 \u5b58\u653e\u7684\u662f Batch 0 \u7684\u6570\u636e\uff0cRegst_a_1\u3001Regst_b_1 \u5b58\u653e\u7684\u662f Batch 1 \u7684\u6570\u636e\uff0cRegst_a_2 \u5b58\u653e\u7684\u662f Batch 2 \u7684\u6570\u636e\u3002\u901a\u8fc7\u4e00\u4e2a Register \u6709\u591a\u4e2a\u7a7a\u95f2\u5757\u7684\u8bbe\u8ba1\uff0cActor \u673a\u5236\u5c31\u5b9e\u73b0\u4e86\u6d41\u6c34\u5e76\u884c\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u629b\u51fa\u4e00\u4e2a\u66f4\u8fdb\u4e00\u6b65\u6df1\u5165\u7684\u95ee\u9898\uff1a\u6574\u4e2a\u6570\u636e\u6d41\u7684\u6267\u884c\u50cf\u4e00\u4e2a\u7f51\u7edc\uff0c\u6570\u636e\u5728\u7f51\u7edc\u4e2d\u7684\u6d41\u52a8\u5c31\u5b8c\u6210\u4e86\u8ba1\u7b97\uff0c\u5982\u4f55\u907f\u514d\u751f\u4ea7\u8005\u751f\u4ea7\u592a\u5feb\uff0c\u6d88\u8d39\u8005\u6d88\u8d39\u4e0d\u53ca\uff0c\u4ee5\u53ca\u5982\u4f55\u907f\u514d\u751f\u4ea7\u8005\u751f\u4ea7\u592a\u6162\uff0c\u6d88\u8d39\u8005\u611f\u5230\u9965\u997f\u7684\u95ee\u9898\uff0c\u8fd9\u6d89\u53ca\u5230\u5bf9\u8ba1\u7b97\u3001\u5185\u5b58\u3001\u4f20\u8f93\u5e26\u5bbd\u7684\u89c4\u5212\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7cfb\u7edf\u7684\u74f6\u9888\u4e4b\u5904\u6700\u5bbd\uff0c\u9700\u8981\u89e3\u51b3\u6d41\u63a7\uff08flow control\uff09\u7684\u95ee\u9898\u4ee5\u53ca\u8d44\u6e90\u5206\u914d\u95ee\u9898\uff08\u5982\u6bcf\u4e2a Actor \u7684 Register \u5230\u5e95\u5206\u914d\u51e0\u4e2a\u5185\u5b58\u5757\u914d\u989d\uff09\uff0c\u8fd9\u975e\u5e38\u5173\u952e\uff0c\u4e5f\u662f OneFlow \u7cfb\u7edf\u5df2\u89e3\u51b3\u7684\u95ee\u9898\u3002","title":"2. Actor \u673a\u5236\u5b9e\u73b0\u6d41\u6c34\u7ebf"},{"location":"single_client/basics_topics/essentials_of_oneflow.html#3","text":"\u5728\u591a\u673a\u591a\u5361\u7684\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\uff0c\u5404\u4e2a\u673a\u5668\u548c\u5404\u4e2a\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u5f80\u5f80\u662f\u5f71\u54cd\u7cfb\u7edf\u7684\u6a2a\u5411\u6269\u5c55\u6027\u7684\u6700\u91cd\u8981\u56e0\u7d20\uff0c\u5982\u679c\u4f20\u8f93\u5f00\u9500\u53ef\u4ee5\u88ab\u8ba1\u7b97\u5f00\u9500\u63a9\u76d6\uff0c\u90a3\u4e48\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u5c31\u53ef\u4ee5\u8fbe\u5230\u7406\u60f3\u7684\u7ebf\u6027\u52a0\u901f\u6bd4\u3002\u76f8\u8f83\u4e8e\u5176\u4ed6\u7684\u6846\u67b6\uff0cOneFlow \u628a\u6570\u636e\u642c\u8fd0\u89c6\u4e3a\u8ddf\u6570\u636e\u8ba1\u7b97\u540c\u7b49\u5730\u4f4d\u7684\u64cd\u4f5c\uff0c\u63d0\u51fa \u6570\u636e\u642c\u8fd0\u662f\u4e00\u7b49\u516c\u6c11 \u7684\u601d\u60f3\u3002 \u5df2\u6709\u6846\u67b6\u5728\u7f16\u8bd1\u671f\u7684\u5173\u6ce8\u7126\u70b9\u662f\u6570\u636e\u8ba1\u7b97\uff0c\u8ba4\u4e3a\u6570\u636e\u642c\u8fd0\u662f\u80cc\u540e\u9690\u5f0f\u53d1\u751f\u7684\uff0c\u56e0\u6b64\u5728\u9759\u6001\u5206\u6790\u8ba1\u7b97\u56fe\u65f6\u7565\u8fc7\u8ba1\u7b97\u548c\u642c\u8fd0\u7684\u91cd\u53e0\u7f16\u6392\uff0cOneFlow \u5728\u8ba1\u7b97\u56fe\u4e2d\u663e\u5f0f\u8868\u8fbe\u4e86\u6570\u636e\u642c\u8fd0\uff0c\u800c\u4e14\u5728\u9759\u6001\u5206\u6790\u65f6\u540c\u7b49\u5bf9\u5f85\u6570\u636e\u642c\u8fd0\u548c\u6570\u636e\u8ba1\u7b97\uff0c\u4ee5\u6700\u5927\u5316\u91cd\u53e0\u642c\u8fd0\u548c\u8ba1\u7b97\u3002 \u5728\u6700\u7ec8\u7684\u6267\u884c\u56fe\u4e2d\uff0c\u6570\u636e\u642c\u8fd0\u64cd\u4f5c\u4e5f\u662f\u4e00\u4e2a\u4e2a Actor\u3002\u9664\u4e86\u5728\u8bbe\u5907\u4e0a\u505a\u6570\u636e\u8ba1\u7b97\u7528\u7684 Actor \u4ee5\u5916\uff0c\u8fd8\u6709\u8ba1\u7b97\u673a\u5185\u5b58\u5230 GPU \u663e\u5b58\u4e4b\u95f4\u7684\u6570\u636e\u62f7\u8d1d Actor\uff0c\u673a\u5668\u4e4b\u95f4\u505a\u7f51\u7edc\u901a\u4fe1\u7684\u7f51\u7edc Actor\uff0c\u8d1f\u8d23\u6570\u636e\u7684\u5207\u5206\u3001\u5408\u5e76\u3001\u590d\u5236\u7684Actor\uff0c\u8d1f\u8d23\u8bfb\u53d6\u78c1\u76d8\u6570\u636e\u7684 Actor\uff0c\u8d1f\u8d23\u52a0\u8f7d\u4fdd\u5b58\u6a21\u578b\u7684 Actor \u7b49\u7b49\u3002\u5f88\u591a\u5176\u4ed6\u6846\u67b6\u90fd\u628a\u6570\u636e\u52a0\u8f7d\u3001\u591a\u5361\u6a21\u578b\u68af\u5ea6\u7684\u540c\u6b65\u3001\u7f51\u7edc\u3001\u6a21\u578b\u52a0\u8f7d\u66f4\u65b0\u7b49\u5206\u522b\u505a\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u6a21\u5757\uff0c\u800c OneFlow \u7684\u8bbe\u8ba1\u662f\u6240\u6709\u7684\u529f\u80fd\u90fd\u5728\u4e00\u5f20\u7531Actor\u7ec4\u6210\u7684\u9759\u6001\u6267\u884c\u56fe\u91cc\u5b9e\u73b0\u4e86\u3002OneFlow \u8fd9\u6837\u7684\u8bbe\u8ba1\u4e0d\u4ec5\u7b80\u6d01\u3001\u4f18\u96c5\uff0c\u8fd8\u975e\u5e38\u9ad8\u6548\u3002 \u56fe 3 \u6570\u636e\u662f\u5982\u4f55\u4ece\u4e00\u4e2a\u8bbe\u5907\u642c\u8fd0\u5230\u53e6\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684 \u56fe3\u8868\u793a\u4e86\u6ca1\u6709 GPU-Direct \u7684\u51b5\u4e0b\uff0c\u5728 OneFlow \u7684 Runtime \u9636\u6bb5\uff0c\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684\u8ba1\u7b97\u8282\u70b9\u5982\u679c\u6d88\u8d39\u4e86\u53e6\u4e00\u4e2a\u8bbe\u5907\u7684\u8ba1\u7b97\u8282\u70b9\uff0c\u6570\u636e\u662f\u5982\u4f55\u642c\u8fd0\u8fc7\u53bb\u7684\u3002","title":"3. \u6570\u636e\u642c\u8fd0\u662f\u4e00\u7b49\u516c\u6c11"},{"location":"single_client/basics_topics/essentials_of_oneflow.html#4","text":"\u5728 OneFlow \u7684\u8bbe\u8ba1\u4e2d\uff0c\u6240\u6709\u7684\u51fa\u53d1\u70b9\u90fd\u662f\u5e0c\u671b\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5e76\u884c\uff0c\u4ece\u800c\u8fbe\u5230\u6700\u4f18\u7684\u5206\u5e03\u5f0f\u6027\u80fd\u3002\u6bd4\u5982\u8003\u8651\u5230\u5206\u5e03\u5f0f\u8bad\u7ec3\u6a21\u578b\u68af\u5ea6\u540c\u6b65\u65f6\uff0c\u663e\u5b58\u5230\u5185\u5b58\u7684\u4f20\u8f93\u5e26\u5bbd\u9ad8\u4e8e\u673a\u5668\u4e4b\u95f4\u7684\u7f51\u7edc\u4f20\u8f93\u5e26\u5bbd\uff0cOneFlow \u4f1a\u505a\u4e24\u7ea7\u7684 scatter \u548c gather \u64cd\u4f5c\uff08\u672c\u673a\u7684\u548c\u5404\u4e2a\u673a\u5668\u4e4b\u95f4\u7684\uff09\uff0c\u7528\u4e8e\u589e\u52a0 locality\uff0c\u63d0\u9ad8\u6574\u4f53\u6027\u80fd\u3002 \u53c8\u6bd4\u5982\u5728\u5f02\u6b65\u542f\u52a8\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u65f6\uff0cPython \u7aef\u7528\u6237\u7684\u63a7\u5236\u903b\u8f91\u8ddf OneFlow \u8fd0\u884c\u65f6\u7684\u6267\u884c\u56fe\u662f\u5e76\u884c\u6267\u884c\u7684\uff0c\u540c\u65f6 OneFlow \u6709\u4e00\u5957\u4e92\u65a5\u4e34\u754c\u533a\u7684\u8bbe\u8ba1\u4fdd\u8bc1\u6267\u884c\u7684\u9ad8\u6548\u6027\u548c\u6b63\u786e\u6027\u3002 \u6570\u636e\u52a0\u8f7d\u90e8\u5206\u65e0\u8bba\u662f\u4ece\u78c1\u76d8\u8bfb\u6570\u636e\u8fd8\u662f\u4ece Python \u7aef\u5582\u6570\u636e\uff0cOneFlow \u90fd\u80fd\u4fdd\u8bc1\u5c3d\u53ef\u80fd\u5e76\u884c\uff0c\u4f7f\u5f97\u8ba1\u7b97\u8bbe\u5907\u4e0d\u4f1a\u56e0\u4e3a\u8981\u7b49\u6570\u636e\u800c\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u3002 \u5df2\u6709\u6846\u67b6\u5982\u679c\u60f3\u8981\u5c3d\u53ef\u80fd\u91cd\u53e0\u6570\u636e\u642c\u8fd0\u548c\u8ba1\u7b97\uff0c\u4e00\u822c\u501f\u52a9\u591a\u5c42\u56de\u8c03\uff08Callback\uff09\u51fd\u6570\uff0c\u5f53\u5d4c\u5957\u5c42\u6b21\u8fc7\u591a\u65f6\uff0c\u4f1a\u9047\u5230\u6240\u8c13\u7684 Callback Hell \u9ebb\u70e6\uff0c\u6b63\u786e\u6027\u548c\u53ef\u8bfb\u6027\u90fd\u53ef\u80fd\u4e0b\u964d\u3002\u4f46\u5728 OneFlow \u4e2d\uff0c\u4ee5\u4e0a\u7684\u8fd9\u4e9b\u5e76\u884c\u5e76\u53d1\u7279\u6027\uff0c\u90fd\u662f\u5728\u8fd9\u4e00\u5957\u7b80\u6d01\u7684 Actor \u673a\u5236\u4e0b\u5b9e\u73b0\u7684\uff0c\u89e3\u51b3\u4e86\u4ee4\u4eba\u5934\u79c3\u7684 Callback Hell \u95ee\u9898\u3002 \u6b64\u5916\uff0c\u5728\u591a\u673a\u7684\u7f51\u7edc\u901a\u4fe1\u90e8\u5206\uff0cOneFlow \u5e95\u5c42\u7684\u7f51\u7edc\u901a\u4fe1\u5e93\u539f\u751f\u652f\u6301 RDMA \u7684\u9ad8\u6027\u80fd\u901a\u4fe1\uff0c\u4e5f\u6709\u4e00\u5957\u57fa\u4e8e epoll \u7684\u9ad8\u6548\u901a\u4fe1\u8bbe\u8ba1\u3002\u800c\u76ee\u524d\u6700\u6d41\u884c\u7684 Pytorch\uff0c\u591a\u673a\u8fd8\u9700\u8981\u901a\u8fc7 RPC \u6765\u505a\u6570\u636e\u540c\u6b65\u3002","title":"4. \u5c3d\u53ef\u80fd\u5e76\u884c"},{"location":"single_client/basics_topics/essentials_of_oneflow.html#oneflow_2","text":"OneFlow \u662f\u76ee\u524d\u5206\u5e03\u5f0f\u573a\u666f\u4e2d\u652f\u6301\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u3001\u6d41\u6c34\u5e76\u884c\u7b49\u6700\u6613\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002\u7528\u6237\u53ea\u9700\u8981\u50cf\u5355\u5361\u4e00\u6837\u53bb\u642d\u5efa\u7f51\u7edc\u6a21\u578b\uff0c\u5e76\u544a\u8bc9 OneFlow \u6709\u54ea\u4e9b\u673a\u5668\u54ea\u4e9b\u5361\uff0cOneFlow \u5c31\u4f1a\u7528\u6700\u9ad8\u6548\u7684\u65b9\u5f0f\u628a\u8fd9\u4e9b\u673a\u5668\u548c\u8bbe\u5907\u4f7f\u7528\u8d77\u6765\u3002 \u8fd9\u6e90\u4e8e OneFlow \u7684\u4e00\u5957\u72ec\u7279\u7684\u8bbe\u8ba1\uff1aConsistentView\uff08\u4e00\u81f4\u6027\u89c6\u89d2\uff09\u3002\u5bf9\u4e8e\u591a\u673a\u591a\u5361\uff0cOneFlow \u4f1a \u628a\u5b83\u62bd\u8c61\u6210\u4e00\u4e2a\u8d85\u7ea7\u5927\u7684\u8bbe\u5907 \uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u903b\u8f91\u4e0a\u7684\u8bbe\u5907\uff0c\u8fd9\u4e2a\u903b\u8f91\u8bbe\u5907\u7684\u663e\u5b58\u662f\u5b9e\u9645\u591a\u4e2a\u7269\u7406\u8bbe\u5907\u7684\u663e\u5b58\u4e4b\u548c\uff0c\u8fd9\u4e2a\u903b\u8f91\u8bbe\u5907\u7684\u7b97\u529b\u4e5f\u662f\u5b9e\u9645\u591a\u4e2a\u7269\u7406\u8bbe\u5907\u7684\u7b97\u529b\u4e4b\u548c\u3002 \u7528\u6237\u53ea\u9700\u8981\u5728\u8fd9\u4e2a\u903b\u8f91\u4e0a\u7684\u8d85\u7ea7\u8bbe\u5907\u91cc\uff0c\u5b9a\u4e49\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u662f\u5982\u4f55\u6784\u5efa\u7684\uff0c\u5176\u4f59\u7684\u4fbf\u4e0d\u9700\u8981\u7528\u6237\u6765\u64cd\u4f5c\uff0c\u7531 OneFlow \u6765\u5b8c\u6210\u903b\u8f91\u4e0a\u7684\u8bbe\u5907\u5230\u7269\u7406\u4e0a\u7684\u8bbe\u5907\u7684\u6620\u5c04\u3002 \u8fd9\u91cc\u5148\u660e\u786e\u4e24\u4e2a\u6982\u5ff5\uff1a\u201c\u903b\u8f91\u4e0a\u7684\u201d\u548c\u201c\u7269\u7406\u4e0a\u7684\u201d\u3002\u201c\u903b\u8f91\u4e0a\u7684\u201d\u8868\u793a OneFlow \u628a\u5206\u5e03\u5f0f\u96c6\u7fa4\u62bd\u8c61\u6210\u4e00\u4e2a\u8d85\u7ea7\u8ba1\u7b97\u673a\u4e4b\u540e\u7684\u8ba1\u7b97\u548c\u6570\u636e\uff0c\u201c\u7269\u7406\u4e0a\u7684\u201d\u8868\u793a\u90a3\u4e9b\u771f\u5b9e\u7684\u90e8\u7f72\u5230\u5404\u4e2a\u673a\u5668\u548c\u8bbe\u5907\u4e0a\u7684\u8ba1\u7b97\u548c\u6570\u636e\u3002 \u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u662f\u7531 Op \u6784\u6210\u7684\u8ba1\u7b97\u56fe\uff0cOp \u4e4b\u95f4\u751f\u4ea7\u6d88\u8d39 Tensor \u6570\u636e\u3002\u5728\u591a\u673a\u591a\u5361\u7684\u73af\u5883\u4e0b\uff0c\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 Op \u4f1a\u5bf9\u5e94\u591a\u4e2a\u771f\u5b9e\u7684\u7269\u7406\u4e0a\u7684 Op\uff0c\u6bcf\u4e2a\u7269\u7406\u4e0a\u7684 Op \u5b9e\u9645\u6267\u884c\u7684\u8ba1\u7b97\u90fd\u662f\u8fd9\u4e2a\u903b\u8f91 Op \u8ba1\u7b97\u7684\u4e00\u90e8\u5206\uff0c\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 Tensor \u4e5f\u4f1a\u5bf9\u5e94\u591a\u4e2a\u7269\u7406\u4e0a\u7684 Tensor\uff0c\u6bcf\u4e2a\u7269\u7406\u4e0a\u7684 Tensor \u90fd\u662f\u903b\u8f91 Tensor \u7684\u4e00\u90e8\u5206\u3002 \u5bf9\u4e8e\u5176\u4ed6\u7684\u6846\u67b6\u5b9a\u4e49\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u6bcf\u5f20\u5361\u662f\u4e00\u4e2a\u201cworld\u201d\uff0c\u591a\u5361\u4e4b\u95f4\u6839\u636e\u66b4\u9732\u51fa\u6765\u7684\u63a5\u53e3\u6765\u540c\u6b65\u6a21\u578b\u68af\u5ea6\uff1b\u800c\u5bf9\u4e8e OneFlow \u800c\u8a00\uff0c\u591a\u673a\u591a\u5361\u4e5f\u90fd\u662f\u4e00\u4e2a\u201cworld\u201d\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u5957 Placement+SBP \u7684\u65b9\u5f0f\u505a\u5168\u5c40\u7684\u7edf\u7b79\u7ba1\u7406\u3002","title":"\u4e09\u3001OneFlow \u5982\u4f55\u505a\u5230\u5206\u5e03\u5f0f\u6700\u6613\u7528"},{"location":"single_client/basics_topics/essentials_of_oneflow.html#placement","text":"\u5728 OneFlow \u7684\u8ba1\u7b97\u56fe\u642d\u5efa\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u8ba1\u7b97 Op \u90fd\u6709\u4e00\u4e2a\u5c5e\u6027\u53eb\u505a Placement\uff0c\u8868\u793a\u4e86\u8be5\u903b\u8f91\u4e0a\u7684 Op\uff0c\u662f\u8981\u90e8\u7f72\u5230\u54ea\u4e9b\u673a\u5668\u54ea\u4e9b\u8bbe\u5907\u4e0a\u7684\u3002\u5bf9\u4e8e\u5e38\u89c1\u7684\u6570\u636e\u5e76\u884c\uff0c\u5c31\u662f\u6240\u6709\u7684 Op \u90fd\u90e8\u7f72\u5230\u6240\u6709\u7684\u8bbe\u5907\u4e0a\u3002\u4f46 OneFlow \u4e5f\u652f\u6301\u7528\u6237\u6307\u5b9a Op \u7684 Placement\uff0c\u6bd4\u5982\u5f53\u7f51\u7edc\u8fc7\u5927\u5355\u5361\u6839\u672c\u653e\u4e0d\u4e0b\u7684\u65f6\u5019\uff0c\u5728 OneFlow \u53ef\u4ee5\u8ba9\u7f51\u7edc\u7684\u524d\u4e00\u90e8\u5206\u5728\u4e00\u5f20\u5361\u4e0a\uff0c\u540e\u4e00\u90e8\u5206\u5728\u53e6\u4e00\u5f20\u5361\u4e0a\uff0c\u7528\u4e00\u79cd\u201c\u63a5\u529b\u201d\u7684\u65b9\u5f0f\u5de5\u4f5c\uff0c\u5b9e\u73b0\u6d41\u6c34\u5e76\u884c\u3002 \u56fe4\u5c55\u793a\u4e86\u4e00\u79cd\u53ef\u80fd\u7684 Placement \u4f8b\u5b50\u3002\u7528\u6237\u5b9a\u4e49\u4e86\u4e00\u4e2a\u75313\u4e2a Op \u7ec4\u6210\u7684\u7f51\u7edc\uff1aOp_0 -> Op_1 -> Op_2\u3002 \u5176\u4e2d Op_0 \u548c Op_1 \u7684 Placement \u662f Device 0\uff0cOp_2 \u7684 Placement \u662f Device 1\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u6d41\u6c34\u5e76\u884c\u7684\u4f8b\u5b50\uff0cOneflow \u4f1a\u81ea\u52a8\u5728 Op_1 \u548c Op_2 \u4e4b\u95f4\u63d2\u5165\u9700\u8981\u7684\u6570\u636e\u642c\u8fd0\u7684 Copy Op\u3002 \u56fe4 \u4e00\u4e2a\u6d41\u6c34\u5e76\u884c\u7684Placement\u793a\u4f8b\u56fe","title":"Placement"},{"location":"single_client/basics_topics/essentials_of_oneflow.html#sbp","text":"SBP \u662f OneFlow \u72ec\u6709\u7684\u6982\u5ff5\uff0c\u4ed6\u662f\u4e09\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u7ec4\u5408\uff1aSplit\u3001Broadcast\u3001PartialSum\uff08\u4ee5 PartialSum \u4e3a\u4f8b\uff0c\u5b9e\u9645\u4e0a\u8fd8\u53ef\u4ee5\u662fPartialMin\u3001 PartialMax \u7b49 reduce \u64cd\u4f5c\uff09\uff0c\u5168\u79f0\u53eb SbpParallel\uff0c\u8868\u793a\u4e00\u79cd\u903b\u8f91\u4e0a\u7684 Tensor \u8ddf\u7269\u7406\u4e0a\u7684\u591a\u4e2a Tensor \u7684\u6620\u5c04\u5173\u7cfb\u3002 \u5176\u4e2d Split \u8868\u793a\u7269\u7406\u4e0a\u7684 Tensor \u662f\u903b\u8f91 Tensor \u6309\u7167\u67d0\u4e00\u7ef4\u5ea6\u5207\u5206\u540e\u5f97\u5230\u7684\uff0c Split \u6709\u4e2a\u53c2\u6570 axis\uff0c\u8868\u793a\u5207\u5206\u7684\u7ef4\u5ea6\uff0c\u5982\u679c\u628a\u591a\u4e2a\u7269\u7406\u4e0a\u7684 Tensor \u6309\u7167 Split \u7684\u7ef4\u5ea6\u8fdb\u884c\u62fc\u63a5\uff0c\u5c31\u80fd\u8fd8\u539f\u51fa\u903b\u8f91 Tensor\u3002 Broadcast \u8868\u793a\u7269\u7406\u4e0a\u7684 Tensor \u662f\u8ddf\u903b\u8f91\u4e0a\u7684 Tensor \u5b8c\u5168\u76f8\u540c\u7684\u3002 PartialSum \u8868\u793a\u7269\u7406\u4e0a\u7684 Tensor \u867d\u7136\u8ddf\u903b\u8f91\u4e0a\u7684 Tensor \u5f62\u72b6\u4e00\u81f4\uff0c\u4f46\u662f\u7269\u7406\u4e0a\u7684 Tensor \u91cc\u7684\u503c\u662f\u903b\u8f91 Tensor \u91cc\u5bf9\u5e94\u4f4d\u7f6e\u7684\u4e00\u90e8\u5206\uff0c\u5982\u679c\u628a\u7269\u7406\u4e0a\u7684\u591a\u4e2a Tensor \u6309\u7167\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u52a0\uff0c\u5373\u53ef\u8fd8\u539f\u51fa\u903b\u8f91\u4e0a\u7684 Tensor\u3002 \u56fe5\u5c55\u793a\u4e86 SBP \u7684\u7b80\u5355\u793a\u4f8b\u3002 \u56fe5 \u51e0\u79cd SbpParallel \u7684\u7b80\u5355\u60c5\u5f62 SbpSignature \u662f\u4e00\u4e2a SbpParallel \u7684\u96c6\u5408\uff0c\u5728 OneFlow \u7684\u8bbe\u8ba1\u91cc\u662f Op \u7684\u5c5e\u6027\uff0c\u5b83\u63cf\u7ed8\u4e86\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 Op \u88ab\u6620\u5c04\u6210\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u591a\u4e2a\u7269\u7406\u4e0a\u7684Op\u4ee5\u540e\uff0c\u8fd9\u4e9b\u7269\u7406\u4e0a\u7684 Op \u662f\u5982\u4f55\u770b\u5f85\u4ed6\u4eec\u8f93\u5165\u8f93\u51faTensor\u5728\u903b\u8f91\u4e0a\u548c\u7269\u7406\u4e0a\u7684\u6620\u5c04\u5173\u7cfb\u7684\u3002\u4e00\u4e2a Op \u4f1a\u6709\u591a\u4e2a\u5408\u6cd5\u7684 SbpSignature\uff0c\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u5408\u6cd5 signature \u5c31\u662f\u8f93\u5165\u8f93\u51fa\u90fd\u662f Broadcast\uff0c\u8fd9\u8868\u793a\u4e86\u8fd9\u4e2a Op \u9700\u8981\u6574\u4e2a\u903b\u8f91\u4e0a\u7684 Tensor \u6570\u636e\u3002 \u5f53\u7528\u6237\u6784\u5efa\u7684\u903b\u8f91\u4e0a\u7684\u8ba1\u7b97\u56fe\u786e\u5b9a\u4ee5\u540e\uff0cOneFlow \u5728 Compiler \u751f\u6210\u5206\u5e03\u5f0f\u7684\u7269\u7406\u4e0a\u7684\u6267\u884c\u56fe\u65f6\uff0c\u4f1a\u8003\u8651\u6bcf\u4e2a Op \u7684 Placement \u548c\u8be5 Op \u5141\u8bb8\u7684\u5408\u6cd5 SbpSignature \u5217\u8868\uff0c\u5728\u5176\u4e2d\u9009\u62e9\u4e00\u4e2a\u4f20\u8f93\u5f00\u9500\u6700\u5c0f\u7684 SbpSignature \u4f5c\u4e3a\u672c\u6b21\u8bad\u7ec3\u7684 SbpSignature\uff0c\u7528\u4e8e\u6307\u5bfc Compiler \u751f\u6210\u6700\u9ad8\u6548\u7684\u6267\u884c\u56fe\u3002 \u5173\u4e8e Op \u7684\u5408\u6cd5 SbpSignature \u7684\u5217\u8868\uff0c\u6211\u4eec\u4e3e\u4e00\u4e2a\u77e9\u9635\u4e58\u6cd5\uff08matmul\uff09\u7684Op\u7684\u4f8b\u5b50\u3002 \u5b9a\u4e49: Y = matmul(A, B) , A , B , Y \u90fd\u662f Tensor \uff0c\u8868\u793a Y = AB \u3002\u90a3\u4e48\u81f3\u5c11\u5b58\u5728\u4e24\u79cd\u5408\u6cd5\u7684 SbpSignature\uff1a 1) Y: Split(0) , A: Split(0) , B: Broadcast 2) Y: Split(1) , A: Broadcast , B: Split(1) \u4e24\u79cd\u5408\u6cd5\u7684 signature \u5728\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u793a\u610f\u56fe\u5982\u56fe6\u6240\u793a\u3002\u5047\u8bbe\u903b\u8f91\u4e0a\u7684 MatMul \u7684\u8f93\u5165\u8f93\u51fa Tensor \u7684\u5f62\u72b6\u662f\uff1a A(64, 10) \u00d7 B(10, 50) -> Y(64, 50) \u56fe6 MatMul\u7684\u4e24\u79cd\u5408\u6cd5SbpSignature \u4e14\u8be5 Op \u5206\u5e03\u5728\u4e24\u4e2a\u8bbe\u5907\u4e0a\u3002\u5728\u7b2c\u4e00\u79cd SbpSignature \u4e0b\uff0c0\u53f7\u8bbe\u5907\u4e0a\u7684A\u662f\u903b\u8f91\u4e0a A \u7684\u524d\u4e00\u534a\uff0c1\u53f7\u8bbe\u5907\u4e0a\u7684 A \u662f\u903b\u8f91 A \u7684\u540e\u4e00\u534a\uff08\u6309\u7167\u7b2c0\u7ef4\u5207\u5206\uff09\uff0c\u800c\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684 B \u8ddf\u903b\u8f91\u4e0a\u7684 B \u5b8c\u5168\u4e00\u81f4\uff0c\u4e24\u4e2a\u8bbe\u5907\u8f93\u51fa\u7684 Y \u5206\u522b\u662f\u903b\u8f91\u4e0a\u7684 Y \u7684\u524d\u4e00\u534a\u548c\u540e\u4e00\u534a\u3002\u540c\u6837\u53ef\u4ee5\u5206\u6790\u7b2c\u4e8c\u79cd SbpSignature\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5f53 A \u662f\u6570\u636e\uff0cB \u662f\u6a21\u578b\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u79cd SbpSignature \u5c31\u662f \u6570\u636e\u5e76\u884c \uff0c\u7b2c\u4e8c\u79cd SbpSignature \u5c31\u662f \u6a21\u578b\u5e76\u884c \u3002\u5982\u679c\u4e24\u4e2a\u76f8\u90bb\u7684 MatMul op\uff0c\u524d\u4e00\u4e2a\u4f7f\u7528\u7b2c\u4e00\u79cd SbpSignature\uff0c\u540e\u4e00\u4e2a\u4f7f\u7528\u7b2c\u4e8c\u79cd SbpSignature\uff0c\u6574\u4e2a\u7f51\u7edc\u5c31\u5b9e\u73b0\u4e86 \u6df7\u5408\u5e76\u884c \u3002 \u56fe7\u662f\u4e00\u4e2a\u6df7\u5408\u5e76\u884c\u7684\u793a\u4f8b\uff0c\u5b9a\u4e49\u4e86 Y0 = MatMul_0(A0, B0) , Y1 = MatMul_1(Y0, B1) \u8fd9\u6837\u4e00\u4e2a\u7531\u4e24\u4e2aop\u7ec4\u6210\u7684\u8ba1\u7b97\u56fe\uff0c\u5176\u4e2dA0, Y0, Y1\u662f\u6570\u636eTensor\uff0cB0, B1 \u662f\u6a21\u578bTensor\u3002 \u56fe7 \u6df7\u5408\u5e76\u884c\u793a\u4f8b \u5728\u56fe7\u4e2d MatMul_0 \u4ea7\u51fa\u7684 Y0 \u88ab MatMul_1 \u6d88\u8d39\uff0c\u4f46\u662f\u8fd9\u4e24\u4e2a op \u5bf9\u540c\u4e00\u4e2a Tensor \u7684 SBP \u770b\u5f85\u65b9\u5f0f\u662f\u4e0d\u4e00\u6837\u7684\uff0cMatMul_0 \u8ba4\u4e3a Y0 \u662f Split(axis=0) \u5207\u5206\uff0c\u4f46\u662f MatMul_1 \u9700\u8981\u4e00\u4e2a Broadcast \u7684 Y0 \u8f93\u5165\u3002\u8fd9\u65f6\u5019OneFlow\u4f1a\u81ea\u52a8\u63d2\u5165\u4e00\u4e2a\u201c\u4e07\u80fd\u201d\u7684 Boxing Op \u505a\u5fc5\u8981\u7684\u6570\u636e\u88c1\u526a\u3001\u62fc\u63a5\u3001\u642c\u8fd0\u548c\u6c42\u548c\u7b49\u64cd\u4f5c\uff0c\u4f7f\u5f97\u6240\u6709\u7684Op\u90fd\u53ef\u4ee5\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\u9ad8\u6548\u7684\u62ff\u5230\u81ea\u5df1\u60f3\u8981\u7684\u6570\u636e\u3002 \u53e6\u5916\u5728\u6570\u636e\u5e76\u884c\u7684\u65f6\u5019\uff0c\u8bad\u7ec3\u7684\u524d\u5411\u6a21\u578b Tensor \u7684\u662f Broadcast\uff0c\u5bf9\u5e94\u53cd\u5411\u4f20\u64ad\u7684\u68af\u5ea6\u5c31\u662fPartialSum\uff0c\u5f53 Optimizer \u9700\u8981\u5168\u90e8\u7684\u68af\u5ea6\u6765\u66f4\u65b0\u6a21\u578b\u65f6\uff0c\u5c31\u4f1a\u89e6\u53d1 OneFlow \u7684 Boxing \u673a\u5236\u8fdb\u884c\u9ad8\u6548\u7684\u68af\u5ea6\u540c\u6b65\u5de5\u4f5c\u3002","title":"SBP"},{"location":"single_client/basics_topics/essentials_of_oneflow.html#_1","text":"OneFlow \u7684\u8fd9\u5957 Placement + SBP + Boxing \u7684\u673a\u5236\uff0c\u53ef\u4ee5\u4f7f\u5f97\u7528\u6237\u5b9a\u4e49\u7684\u8ba1\u7b97\u56fe\u4e2d\u7684 Op\u3001Tensor \u4ee5\u4efb\u610f\u7684\u65b9\u5f0f\u5206\u5e03\u5728\u5404\u4e2a\u673a\u5668\u548c\u5404\u4e2a\u8bbe\u5907\u4e0a\uff0c\u65e0\u8bba\u662f\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u8fd8\u662f\u6d41\u6c34\u5e76\u884c\uff0c\u5bf9\u4e8e OneFlow \u800c\u8a00\uff0c\u90fd\u53ea\u662f\u4e00\u4e2a\u7279\u5b9a Placement \u4e0b\u7684\u7279\u5b9a SbpSignature \u7684\u7ec4\u5408\u800c\u5df2\uff0c\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u914d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4ea4\u7ed9 OneFlow \u6765\u505a\u81ea\u52a8\u7684\u5904\u7406\u3002 \u53e6\u5916\uff0c\u65e9\u5728\u5fae\u8f6f\u63a8\u51fa ZeRO-2 \u6846\u67b6\u4e4b\u524d\uff0cOneFlow \u5c31\u5df2\u7ecf\u652f\u6301\u4e86\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u591a\u673a\u591a\u5361\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u6a21\u578b Tensor \u90fd\u53ea\u4fdd\u5b58\u5728\u5176\u4e2d\u4e00\u4e2a\u8bbe\u5907\u4e0a\uff0c\u964d\u4f4e\u68af\u5ea6\u8ba1\u7b97\u4e2d\u7684\u5185\u5b58\u5360\u7528\u3002","title":"\u6700\u6613\u7528\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6846\u67b6"},{"location":"single_client/basics_topics/essentials_of_oneflow.html#_2","text":"\u7efc\u4e0a\uff0c\u5728\u7f16\u8bd1\u671f\uff0cOneFlow \u901a\u8fc7\u8bbe\u8ba1\u4e00\u5957\u6570\u5b66\u4e0a\u4e25\u8c28\u7684\u5f62\u5f0f\u7cfb\u7edf\u6765\u8868\u793a\u6240\u6709\u5408\u6cd5\u7684\u5e76\u884c\u6a21\u5f0f\uff0c\u5e76\u652f\u6301\u7f16\u8bd1\u5668\u8f83\u65b9\u4fbf\u5730\u81ea\u52a8\u641c\u7d22\u6700\u4f18\u5e76\u884c\u65b9\u6848\u3002 \u5728\u8fd0\u884c\u671f\uff0cOneFlow \u901a\u8fc7 Actor \u7cfb\u7edf\u6700\u4f18\u5730\u3001\u7075\u6d3b\u5730\u652f\u6301\u5e76\u884c\u3001\u5e76\u53d1\u6267\u884c\u3002OneFlow \u7684\u5185\u6838\u5177\u6709\u7b80\u6d01\u3001\u9ad8\u6548\u548c\u9ad8\u6269\u5c55\u6027\u7684\u4f18\u70b9\u3002 \u57fa\u4e8e\u6b64\u8bbe\u8ba1\uff0cOneFlow \u4f7f\u5f97\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u6027\u80fd\u8fbe\u5230\u6781\u81f4\uff0c\u4e14\u5206\u5e03\u5f0f\u8bad\u7ec3\u8ddf\u5355\u5361\u4e00\u6837\u7b80\u5355\u6613\u7528\u3002","title":"\u56db\u3001\u603b\u7ed3"},{"location":"single_client/basics_topics/model_load_save.html","text":"\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58 \u00b6 \u5bf9\u4e8e\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58\uff0c\u5e38\u7528\u7684\u573a\u666f\u6709\uff1a \u5c06\u5df2\u7ecf\u8bad\u7ec3\u4e00\u6bb5\u65f6\u95f4\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u7ee7\u7eed\u8bad\u7ec3 \u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u540e\u7eed\u76f4\u63a5\u90e8\u7f72\u4f7f\u7528 \u4e25\u683c\u6765\u8bf4\uff0c\u5c1a\u672a\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u7684\u4fdd\u5b58\uff0c\u79f0\u4e3a checkpoint \u6216\u8005 snapshot \u3002\u4e0e\u4fdd\u5b58\u5df2\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff08 model saving \uff09 \uff0c\u5728\u6982\u5ff5\u4e0a\uff0c\u7565\u6709\u4e0d\u540c\u3002 \u4e0d\u8fc7\uff0c\u5728 OneFlow \u4e2d\uff0c\u65e0\u8bba\u6a21\u578b\u662f\u5426\u8bad\u7ec3\u5b8c\u6bd5\uff0c\u6211\u4eec\u90fd\u4f7f\u7528 \u7edf\u4e00\u7684\u63a5\u53e3 \u5c06\u5176\u4fdd\u5b58\uff0c\u56e0\u6b64\uff0c\u5728\u5176\u5b83\u6846\u67b6\u4e2d\u770b\u5230\u7684 model \u3001 checkpoint \u3001 snapshot \u7b49\u8868\u8ff0\uff0c\u5728 OneFlow \u4e2d\u4e0d\u505a\u533a\u5206\u3002 \u5728 OneFlow \u4e2d\uff0c flow.checkpoint \u540d\u79f0\u7a7a\u95f4\u4e0b\u6709\u6a21\u578b\u4fdd\u5b58\u3001\u52a0\u8f7d\u7684\u63a5\u53e3\u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a \u5982\u4f55\u521b\u5efa\u6a21\u578b\u53c2\u6570 \u5982\u4f55\u4fdd\u5b58/\u52a0\u8f7d\u6a21\u578b OneFlow \u6a21\u578b\u7684\u5b58\u50a8\u7ed3\u6784 \u5982\u4f55\u5fae\u8c03\u4e0e\u6269\u5c55\u6a21\u578b get_variable \u521b\u5efa\u6216\u83b7\u53d6\u53c2\u6570 \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.get_variable \u65b9\u6cd5\u521b\u9020\u6216\u8005\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ef\u4ee5\u7528\u4e8e\u5728\u5168\u5c40\u4f5c\u4e1a\u51fd\u6570\u4e2d\u4ea4\u4e92\u4fe1\u606f\uff1b\u5f53\u8c03\u7528 oneflow.get_all_variables \u548c oneflow.load_variables \u63a5\u53e3\u65f6\uff0c\u53ef\u4ee5\u83b7\u53d6\u6216\u66f4\u65b0 get_variable \u521b\u5efa\u7684\u5bf9\u8c61\u7684\u503c\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u7279\u70b9\uff0c get_variable \u521b\u5efa\u7684\u5bf9\u8c61\uff0c\u5e38\u7528\u4e8e\u5b58\u50a8\u6a21\u578b\u53c2\u6570\u3002\u5b9e\u9645\u4e0a\uff0cOneFlow \u4e2d\u5f88\u591a\u8f83\u9ad8\u5c42\u63a5\u53e3\uff08\u5982 oneflow.layers.conv2d \uff09\uff0c\u5185\u90e8\u4f7f\u7528 get_variable \u521b\u5efa\u6a21\u578b\u53c2\u6570\u3002 \u6d41\u7a0b \u00b6 get_variable \u9700\u8981\u4e00\u4e2a\u6307\u5b9a\u4e00\u4e2a name \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u4f5c\u4e3a\u521b\u5efa\u5bf9\u8c61\u7684\u6807\u8bc6\u3002 \u5982\u679c name \u6307\u5b9a\u7684\u503c\u5728\u5f53\u524d\u4e0a\u4e0b\u6587\u73af\u5883\u4e2d\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48 get_variable \u4f1a\u53d6\u51fa\u5df2\u6709\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u3002 \u5982\u679c name \u6307\u5b9a\u7684\u503c\u4e0d\u5b58\u5728\uff0c\u5219 get_varialbe \u5185\u90e8\u4f1a\u521b\u5efa\u4e00\u4e2a blob \u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u3002 \u4f7f\u7528 get_variable \u521b\u5efa\u5bf9\u8c61 \u00b6 oneflow.get_variable \u7684\u539f\u578b\u5982\u4e0b\uff1a def get_variable ( name , shape = None , dtype = None , initializer = None , regularizer = None , trainable = None , model_name = None , random_seed = None , distribute = distribute_util . broadcast (), ) \u4ee5\u4e0b\u662f oneflow.layers.conv2d \u4e2d\uff0c\u4f7f\u7528 get_variable \u521b\u9020\u53c2\u6570\u53d8\u91cf\uff0c\u5e76\u8fdb\u4e00\u6b65\u6784\u5efa\u7f51\u7edc\u7684\u4f8b\u5b50\uff1a #... weight = flow . get_variable ( weight_name if weight_name else name_prefix + \"-weight\" , shape = weight_shape , dtype = inputs . dtype , initializer = kernel_initializer if kernel_initializer is not None else flow . constant_initializer ( 0 ), regularizer = kernel_regularizer , trainable = trainable , model_name = \"weight\" , ) output = flow . nn . conv2d ( inputs , weight , strides , padding , data_format , dilation_rate , groups = groups , name = name ) #... initializer \u8bbe\u7f6e\u521d\u59cb\u5316\u65b9\u5f0f \u00b6 \u6211\u4eec\u5728\u4e0a\u6587\u4e2d\u5df2\u7ecf\u770b\u5230\uff0c\u5728\u8c03\u7528 get_variable \u65f6\uff0c\u901a\u8fc7\u8bbe\u7f6e\u521d\u59cb\u5316\u5668 initializer \u6765\u6307\u5b9a\u53c2\u6570\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0cOneFlow \u4e2d\u63d0\u4f9b\u4e86\u591a\u79cd\u521d\u59cb\u5316\u5668\uff0c\u53ef\u4ee5\u5728 oneflow \u6a21\u5757\u4e0b\u67e5\u770b\u3002 \u5728\u9759\u6001\u56fe\u673a\u5236\u4e0b\uff0c\u8bbe\u7f6e initializer \u540e\uff0c\u53c2\u6570\u521d\u59cb\u5316\u5de5\u4f5c\u7531 OneFlow \u6846\u67b6\u81ea\u52a8\u5b8c\u6210\u3002 OneFlow \u76ee\u524d\u652f\u6301\u7684 initializer \u5217\u4e3e\u5982\u4e0b\uff0c\u70b9\u51fb\u94fe\u63a5\u53ef\u4ee5\u67e5\u770b\u76f8\u5173\u7b97\u6cd5\uff1a constant_initializer zeros_initializer ones_initializer random_uniform_initializer random_normal_initializer truncated_normal_initializer glorot_uniform_initializer glorot_normal_initializer variance_scaling_initializer kaiming_initializer xavier_normal_initializer xavier_uniform_initializer OneFlow \u6a21\u578b\u7684 Python \u63a5\u53e3 \u00b6 \u6ce8\u610f \uff1a\u7531\u4e8e\u591a\u7248\u672c\u517c\u5bb9\u7684\u539f\u56e0\uff0c\u4f7f\u7528\u672c\u8282\u4ecb\u7ecd\u7684\u63a5\u53e3\uff0c\u5728\u811a\u672c\u4e2d\u90fd\u9700\u5148\u914d\u7f6e\uff1a flow . config . enable_legacy_model_io ( False ) \u83b7\u53d6/\u66f4\u65b0 variable \u5bf9\u8c61\u7684\u503c \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4e24\u4e2a\u63a5\u53e3\uff0c\u83b7\u53d6\u6216\u66f4\u65b0\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7531 oneflow.get_variable \u6240\u521b\u5efa\u7684 variable \u5bf9\u8c61\u7684\u503c oneflow.get_all_variables : \u83b7\u53d6\u6240\u6709\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684\u7684 variable \u5bf9\u8c61 oneflow.load_variables : \u66f4\u65b0\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684 variable \u5bf9\u8c61 oneflow.get_all_variables \u4f1a\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u5b57\u5178\u7684 key \u5c31\u662f\u521b\u5efa variable \u65f6\u6307\u5b9a\u7684 name \uff0ckey \u5bf9\u5e94\u7684 value \u5c31\u662f\u4e00\u4e2a\u5f20\u91cf\u5bf9\u8c61\uff0c\u8be5\u5f20\u91cf\u5bf9\u8c61\u6709 numpy() \u65b9\u6cd5\u8f6c\u4e3a numpy \u6570\u7ec4\u3002 \u6bd4\u5982\uff0c\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u521b\u5efa\u4e86\u540d\u4e3a myblob \u7684\u5bf9\u8c61\uff1a @flow . global_function () def job () -> tp . Numpy : ... myblob = flow . get_variable ( \"myblob\" , shape = ( 3 , 3 ), initializer = flow . random_normal_initializer () ) ... \u5982\u679c\u60f3\u6253\u5370 myblob \u7684\u503c\uff0c\u53ef\u4ee5\u8c03\u7528\uff1a ... for epoch in range ( 20 ): ... job () all_variables = flow . get_all_variables () print ( all_variables [ \"myblob\" ] . numpy ()) ... \u5176\u4e2d\u7684 flow.get_all_variables \u83b7\u53d6\u5230\u4e86\u5b57\u5178\uff0c all_variables[\"myblob\"].numpy() \u83b7\u53d6\u4e86 myblob \u5bf9\u8c61\u5e76\u5c06\u5176\u8f6c\u4e3a numpy \u6570\u7ec4\u3002 \u4e0e get_all_variables \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.load_variables \u66f4\u65b0 variable \u5bf9\u8c61\u7684\u503c\u3002 oneflow.load_variables \u7684\u539f\u578b\u5982\u4e0b\uff1a def load_variables ( value_dict , ignore_mismatch = True ) \u4f7f\u7528 load_variables \u524d\uff0c\u6211\u4eec\u8981\u51c6\u5907\u4e00\u4e2a\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u7684 key \u4e3a\u521b\u5efa variable \u65f6\u6307\u5b9a\u7684 name \uff0cvalue \u662f numpy \u6570\u7ec4\uff1b\u5c06\u5b57\u5178\u4f20\u9012\u7ed9 load_variables \u540e\uff0c load_variables \u4f1a\u5c06\u6839\u636e key \u627e\u5230\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684 variable \u5bf9\u8c61\uff0c\u5e76\u66f4\u65b0\u503c\u3002 \u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a @flow . global_function ( type = \"predict\" ) def job () -> tp . Numpy : myblob = flow . get_variable ( \"myblob\" , shape = ( 3 , 3 ), initializer = flow . random_normal_initializer () ) return myblob myvardict = { \"myblob\" : np . ones (( 3 , 3 )) . astype ( np . float32 )} flow . load_variables ( myvardict ) print ( flow . get_all_variables ()[ \"myblob\" ] . numpy ()) \u867d\u7136\u6211\u4eec\u9009\u62e9\u4e86 random_normal_initializer \u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u4f46\u662f\u56e0\u4e3a flow.load_variables(myvardict) \u66f4\u65b0\u4e86 myblob \u7684\u503c\uff0c\u6240\u4ee5\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\u662f\uff1a [[1. 1. 1.] [1. 1. 1.] [1. 1. 1.]] \u6a21\u578b\u7684\u4fdd\u5b58\u4e0e\u52a0\u8f7d \u00b6 \u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4fdd\u5b58/\u52a0\u8f7d\u6a21\u578b\uff1a oneflow.checkpoint.save : \u8d1f\u8d23\u4fdd\u5b58\u5f53\u524d\u7684\u6a21\u578b\u5230\u6307\u5b9a\u8def\u5f84 oneflow.checkpoint.get : \u4ece\u6307\u5b9a\u8def\u5f84\u4e2d\u5bfc\u5165\u6a21\u578b save \u7684\u539f\u578b\u5982\u4e0b\uff0c\u53ef\u4ee5\u5c06\u6a21\u578b\u4fdd\u5b58\u81f3 path \u6240\u6307\u5b9a\u7684\u8def\u5f84\u3002 def save ( path , var_dict = None ) \u53ef\u9009\u53c2\u6570 var_dict \u5982\u679c\u4e0d\u4e3a None \uff0c\u5219\u5c06 var_dict \u4e2d\u6307\u5b9a\u7684\u5bf9\u8c61\u4fdd\u5b58\u5230\u6307\u5b9a\u8def\u5f84\u3002 get \u7684\u539f\u578b\u5982\u4e0b\uff0c\u53ef\u4ee5\u52a0\u8f7d\u4e4b\u524d\u5df2\u7ecf\u4fdd\u5b58\u7684\uff0c\u7531 path \u8def\u5f84\u6240\u6307\u5b9a\u7684\u6a21\u578b\u3002 def get ( path ) \u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u53ef\u4ee5\u7528\u4e0a\u6587\u4ecb\u7ecd\u7684 load_variables \u65b9\u6cd5\u66f4\u65b0\u5230\u6a21\u578b\u4e2d\uff1a flow . load_variables ( flow . checkpoint . get ( save_dir )) \u6ce8\u610f \uff1a save \u53c2\u6570\u6240\u6307\u5b9a\u8def\u5f84\u5bf9\u5e94\u7684\u76ee\u5f55\u8981\u4e48\u4e0d\u5b58\u5728\uff0c\u8981\u4e48\u5e94\u8be5\u4e3a\u7a7a\u76ee\u5f55\uff0c\u5426\u5219 save \u4f1a\u62a5\u9519(\u9632\u6b62\u8986\u76d6\u6389\u539f\u6709\u4fdd\u5b58\u7684\u6a21\u578b) OneFlow \u6a21\u578b\u4ee5\u4e00\u5b9a\u7684\u7ec4\u7ec7\u5f62\u5f0f\u4fdd\u5b58\u5728\u6307\u5b9a\u7684\u8def\u5f84\u4e2d\uff0c\u5177\u4f53\u7ed3\u6784\u53c2\u89c1\u4e0b\u6587\u4e2d\u7684 OneFlow \u6a21\u578b\u7684\u5b58\u50a8\u7ed3\u6784 \u867d\u7136 OneFlow \u5bf9 save \u7684\u9891\u7387\u6ca1\u6709\u9650\u5236\uff0c\u4f46\u662f\u8fc7\u9ad8\u7684\u4fdd\u5b58\u9891\u7387\uff0c\u4f1a\u52a0\u91cd\u78c1\u76d8\u53ca\u5e26\u5bbd\u7b49\u8d44\u6e90\u7684\u8d1f\u62c5\u3002 OneFlow \u6a21\u578b\u7684\u5b58\u50a8\u7ed3\u6784 \u00b6 OneFlow \u6a21\u578b\u662f\u4e00\u7ec4\u5df2\u7ecf\u88ab\u8bad\u7ec3\u597d\u7684\u7f51\u7edc\u7684 \u53c2\u6570\u503c \u3002\u6a21\u578b\u6240\u4fdd\u5b58\u7684\u8def\u5f84\u4e0b\uff0c\u6709\u591a\u4e2a\u5b50\u76ee\u5f55\uff0c\u6bcf\u4e2a\u5b50\u76ee\u5f55\u5bf9\u5e94\u4e86 \u4f5c\u4e1a\u51fd\u6570 \u4e2d\u6a21\u578b\u7684 name \u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u5148\u901a\u8fc7\u4ee3\u7801\u5b9a\u4e49\u4ee5\u4e0b\u7684\u6a21\u578b\uff1a def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) \u5047\u8bbe\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8c03\u7528\u4ee5\u4e0b\u4ee3\u7801\u4fdd\u5b58\u6a21\u578b\uff1a flow . checkpoint . save ( './lenet_models_name' ) \u90a3\u4e48 lenet_models_name \u53ca\u5176\u5b50\u76ee\u5f55\u7ed3\u6784\u4e3a\uff1a lenet_models_name/ \u251c\u2500\u2500 conv1-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 conv1-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 conv2-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 conv2-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense1-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense1-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense2-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense2-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 snapshot_done \u2514\u2500\u2500 System-Train-TrainStep-train_job \u251c\u2500\u2500 meta \u2514\u2500\u2500 out \u53ef\u4ee5\u770b\u5230\uff1a \u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684\u7f51\u7edc\u6a21\u578b\uff0c\u6bcf\u4e2a\u53d8\u91cf\u5bf9\u5e94\u4e00\u4e2a\u5b50\u76ee\u5f55 \u4ee5\u4e0a\u6bcf\u4e2a\u5b50\u76ee\u5f55\u4e2d\uff0c\u90fd\u6709 out \u548c meta \u6587\u4ef6\uff0c out \u4ee5\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\u5b58\u50a8\u4e86\u7f51\u7edc\u53c2\u6570\u7684\u503c\uff0c meta \u4ee5\u6587\u672c\u7684\u5f62\u5f0f\u5b58\u50a8\u4e86\u7f51\u7edc\u7684\u7ed3\u6784\u4fe1\u606f snapshot_done \u662f\u4e00\u4e2a\u7a7a\u6587\u4ef6\uff0c\u5982\u679c\u5b83\u5b58\u5728\uff0c\u8868\u793a\u7f51\u7edc\u5df2\u7ecf\u8bad\u7ec3\u5b8c\u6210 System-Train-TrainStep-train_job \u4e2d\u4fdd\u5b58\u6709\u5feb\u7167\u7684\u8bad\u7ec3\u6b65\u6570 \u6a21\u578b\u7684\u5fae\u8c03\u4e0e\u6269\u5c55 \u00b6 \u5728\u6a21\u578b\u7684\u5fae\u8c03\u548c\u8fc1\u79fb\u5b66\u4e60\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u9700\u8981\uff1a \u6a21\u578b\u4e2d\u7684\u4e00\u90e8\u5206\u53c2\u6570\u52a0\u8f7d\u81ea\u539f\u6709\u6a21\u578b \u6a21\u578b\u4e2d\u7684\u53e6\u4e00\u90e8\u5206\uff08\u65b0\u589e\u7684\uff09\u53c2\u6570\u9700\u8981\u521d\u59cb\u5316 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.load_variables \u5b8c\u6210\u4ee5\u4e0a\u64cd\u4f5c\u3002\u4ee5\u4e0b\u4e3e\u4e00\u4e2a\u7528\u4e8e\u9610\u8ff0\u6982\u5ff5\u7684\u7b80\u5355\u4f8b\u5b50\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u6a21\u578b\uff0c\u8bad\u7ec3\u540e\u4fdd\u5b58\u81f3 ./mlp_models_1 \uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) dense2 = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , dense2 ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u7136\u540e\uff0c\u6211\u4eec\u62d3\u5c55\u7f51\u7edc\u7ed3\u6784\uff0c\u4e3a\u4ee5\u4e0a\u6a21\u578b\u591a\u589e\u52a0\u4e00\u5c42 dense3 \uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): #... \u539f\u6709\u7f51\u7edc\u7ed3\u6784 dense3 = flow . layers . dense ( dense2 , 10 , kernel_initializer = initializer , name = \"dense3\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , dense3 ) #... \u6700\u540e\uff0c\u4ece\u539f\u6765\u4fdd\u5b58\u7684\u6a21\u578b\u52a0\u8f7d\u53c2\u6570\uff0c\u5e76\u5f00\u59cb\u8bad\u7ec3\uff1a if __name__ == \"__main__\" : flow . load_variables ( flow . checkpoint . get ( \"./mlp_models_1\" )) ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE , BATCH_SIZE ) for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) flow . checkpoint . save ( \"./mlp_ext_models_1\" ) \u65b0\u589e\u7684 dense3 \u5c42\u53c2\u6570\uff0c\u5728\u539f\u6a21\u578b\u4e2d\u4e0d\u5b58\u5728\uff0cOneFlow \u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u5b83\u4eec\u7684\u503c\u3002 \u4ee3\u7801 \u00b6 \u811a\u672c mlp_mnist_origin.py \u4e2d\u6784\u5efa\u4e86\u201c\u9aa8\u5e72\u7f51\u7edc\u201d\uff0c\u5e76\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\u81f3 ./mlp_models_1 \u3002 \u8fd0\u884c\uff1a wget https://docs.oneflow.org/master/code/basics_topics/mlp_mnist_origin.py python3 mlp_mnist_origin.py \u8bad\u7ec3\u5b8c\u6210\u540e\uff0c\u5c06\u4f1a\u5728\u5f53\u524d\u5de5\u4f5c\u8def\u5f84\u4e0b\u5f97\u5230 mlp_models_1 \u76ee\u5f55\u3002 \u811a\u672c mlp_mnist_finetune.py \u4e2d\u7684\u7f51\u7edc\u5728\u539f\u6709\u57fa\u7840\u4e0a\u8fdb\u884c\u201c\u5fae\u8c03\u201d\uff08\u4e3a\u9aa8\u5e72\u7f51\u7edc\u589e\u52a0\u4e00\u5c42 dense3 \uff09\u540e\uff0c\u52a0\u8f7d ./mlp_models_1 \uff0c\u5e76\u7ee7\u7eed\u8bad\u7ec3\u3002 \u8fd0\u884c\uff1a wget https://docs.oneflow.org/master/code/basics_topics/mlp_mnist_finetune.py python3 mlp_mnist_finetune.py \u5fae\u8c03\u540e\u7684\u6a21\u578b\uff0c\u4fdd\u5b58\u5728 ./mlp_ext_models_1 \u4e2d\u3002","title":"\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58"},{"location":"single_client/basics_topics/model_load_save.html#_1","text":"\u5bf9\u4e8e\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58\uff0c\u5e38\u7528\u7684\u573a\u666f\u6709\uff1a \u5c06\u5df2\u7ecf\u8bad\u7ec3\u4e00\u6bb5\u65f6\u95f4\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u7ee7\u7eed\u8bad\u7ec3 \u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u540e\u7eed\u76f4\u63a5\u90e8\u7f72\u4f7f\u7528 \u4e25\u683c\u6765\u8bf4\uff0c\u5c1a\u672a\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u7684\u4fdd\u5b58\uff0c\u79f0\u4e3a checkpoint \u6216\u8005 snapshot \u3002\u4e0e\u4fdd\u5b58\u5df2\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff08 model saving \uff09 \uff0c\u5728\u6982\u5ff5\u4e0a\uff0c\u7565\u6709\u4e0d\u540c\u3002 \u4e0d\u8fc7\uff0c\u5728 OneFlow \u4e2d\uff0c\u65e0\u8bba\u6a21\u578b\u662f\u5426\u8bad\u7ec3\u5b8c\u6bd5\uff0c\u6211\u4eec\u90fd\u4f7f\u7528 \u7edf\u4e00\u7684\u63a5\u53e3 \u5c06\u5176\u4fdd\u5b58\uff0c\u56e0\u6b64\uff0c\u5728\u5176\u5b83\u6846\u67b6\u4e2d\u770b\u5230\u7684 model \u3001 checkpoint \u3001 snapshot \u7b49\u8868\u8ff0\uff0c\u5728 OneFlow \u4e2d\u4e0d\u505a\u533a\u5206\u3002 \u5728 OneFlow \u4e2d\uff0c flow.checkpoint \u540d\u79f0\u7a7a\u95f4\u4e0b\u6709\u6a21\u578b\u4fdd\u5b58\u3001\u52a0\u8f7d\u7684\u63a5\u53e3\u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a \u5982\u4f55\u521b\u5efa\u6a21\u578b\u53c2\u6570 \u5982\u4f55\u4fdd\u5b58/\u52a0\u8f7d\u6a21\u578b OneFlow \u6a21\u578b\u7684\u5b58\u50a8\u7ed3\u6784 \u5982\u4f55\u5fae\u8c03\u4e0e\u6269\u5c55\u6a21\u578b","title":"\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58"},{"location":"single_client/basics_topics/model_load_save.html#get_variable","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.get_variable \u65b9\u6cd5\u521b\u9020\u6216\u8005\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ef\u4ee5\u7528\u4e8e\u5728\u5168\u5c40\u4f5c\u4e1a\u51fd\u6570\u4e2d\u4ea4\u4e92\u4fe1\u606f\uff1b\u5f53\u8c03\u7528 oneflow.get_all_variables \u548c oneflow.load_variables \u63a5\u53e3\u65f6\uff0c\u53ef\u4ee5\u83b7\u53d6\u6216\u66f4\u65b0 get_variable \u521b\u5efa\u7684\u5bf9\u8c61\u7684\u503c\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u7279\u70b9\uff0c get_variable \u521b\u5efa\u7684\u5bf9\u8c61\uff0c\u5e38\u7528\u4e8e\u5b58\u50a8\u6a21\u578b\u53c2\u6570\u3002\u5b9e\u9645\u4e0a\uff0cOneFlow \u4e2d\u5f88\u591a\u8f83\u9ad8\u5c42\u63a5\u53e3\uff08\u5982 oneflow.layers.conv2d \uff09\uff0c\u5185\u90e8\u4f7f\u7528 get_variable \u521b\u5efa\u6a21\u578b\u53c2\u6570\u3002","title":"get_variable \u521b\u5efa\u6216\u83b7\u53d6\u53c2\u6570"},{"location":"single_client/basics_topics/model_load_save.html#_2","text":"get_variable \u9700\u8981\u4e00\u4e2a\u6307\u5b9a\u4e00\u4e2a name \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u4f5c\u4e3a\u521b\u5efa\u5bf9\u8c61\u7684\u6807\u8bc6\u3002 \u5982\u679c name \u6307\u5b9a\u7684\u503c\u5728\u5f53\u524d\u4e0a\u4e0b\u6587\u73af\u5883\u4e2d\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48 get_variable \u4f1a\u53d6\u51fa\u5df2\u6709\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u3002 \u5982\u679c name \u6307\u5b9a\u7684\u503c\u4e0d\u5b58\u5728\uff0c\u5219 get_varialbe \u5185\u90e8\u4f1a\u521b\u5efa\u4e00\u4e2a blob \u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u3002","title":"\u6d41\u7a0b"},{"location":"single_client/basics_topics/model_load_save.html#get_variable_1","text":"oneflow.get_variable \u7684\u539f\u578b\u5982\u4e0b\uff1a def get_variable ( name , shape = None , dtype = None , initializer = None , regularizer = None , trainable = None , model_name = None , random_seed = None , distribute = distribute_util . broadcast (), ) \u4ee5\u4e0b\u662f oneflow.layers.conv2d \u4e2d\uff0c\u4f7f\u7528 get_variable \u521b\u9020\u53c2\u6570\u53d8\u91cf\uff0c\u5e76\u8fdb\u4e00\u6b65\u6784\u5efa\u7f51\u7edc\u7684\u4f8b\u5b50\uff1a #... weight = flow . get_variable ( weight_name if weight_name else name_prefix + \"-weight\" , shape = weight_shape , dtype = inputs . dtype , initializer = kernel_initializer if kernel_initializer is not None else flow . constant_initializer ( 0 ), regularizer = kernel_regularizer , trainable = trainable , model_name = \"weight\" , ) output = flow . nn . conv2d ( inputs , weight , strides , padding , data_format , dilation_rate , groups = groups , name = name ) #...","title":"\u4f7f\u7528 get_variable \u521b\u5efa\u5bf9\u8c61"},{"location":"single_client/basics_topics/model_load_save.html#initializer","text":"\u6211\u4eec\u5728\u4e0a\u6587\u4e2d\u5df2\u7ecf\u770b\u5230\uff0c\u5728\u8c03\u7528 get_variable \u65f6\uff0c\u901a\u8fc7\u8bbe\u7f6e\u521d\u59cb\u5316\u5668 initializer \u6765\u6307\u5b9a\u53c2\u6570\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0cOneFlow \u4e2d\u63d0\u4f9b\u4e86\u591a\u79cd\u521d\u59cb\u5316\u5668\uff0c\u53ef\u4ee5\u5728 oneflow \u6a21\u5757\u4e0b\u67e5\u770b\u3002 \u5728\u9759\u6001\u56fe\u673a\u5236\u4e0b\uff0c\u8bbe\u7f6e initializer \u540e\uff0c\u53c2\u6570\u521d\u59cb\u5316\u5de5\u4f5c\u7531 OneFlow \u6846\u67b6\u81ea\u52a8\u5b8c\u6210\u3002 OneFlow \u76ee\u524d\u652f\u6301\u7684 initializer \u5217\u4e3e\u5982\u4e0b\uff0c\u70b9\u51fb\u94fe\u63a5\u53ef\u4ee5\u67e5\u770b\u76f8\u5173\u7b97\u6cd5\uff1a constant_initializer zeros_initializer ones_initializer random_uniform_initializer random_normal_initializer truncated_normal_initializer glorot_uniform_initializer glorot_normal_initializer variance_scaling_initializer kaiming_initializer xavier_normal_initializer xavier_uniform_initializer","title":"initializer \u8bbe\u7f6e\u521d\u59cb\u5316\u65b9\u5f0f"},{"location":"single_client/basics_topics/model_load_save.html#oneflow-python","text":"\u6ce8\u610f \uff1a\u7531\u4e8e\u591a\u7248\u672c\u517c\u5bb9\u7684\u539f\u56e0\uff0c\u4f7f\u7528\u672c\u8282\u4ecb\u7ecd\u7684\u63a5\u53e3\uff0c\u5728\u811a\u672c\u4e2d\u90fd\u9700\u5148\u914d\u7f6e\uff1a flow . config . enable_legacy_model_io ( False )","title":"OneFlow \u6a21\u578b\u7684 Python \u63a5\u53e3"},{"location":"single_client/basics_topics/model_load_save.html#variable","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4e24\u4e2a\u63a5\u53e3\uff0c\u83b7\u53d6\u6216\u66f4\u65b0\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7531 oneflow.get_variable \u6240\u521b\u5efa\u7684 variable \u5bf9\u8c61\u7684\u503c oneflow.get_all_variables : \u83b7\u53d6\u6240\u6709\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684\u7684 variable \u5bf9\u8c61 oneflow.load_variables : \u66f4\u65b0\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684 variable \u5bf9\u8c61 oneflow.get_all_variables \u4f1a\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u5b57\u5178\u7684 key \u5c31\u662f\u521b\u5efa variable \u65f6\u6307\u5b9a\u7684 name \uff0ckey \u5bf9\u5e94\u7684 value \u5c31\u662f\u4e00\u4e2a\u5f20\u91cf\u5bf9\u8c61\uff0c\u8be5\u5f20\u91cf\u5bf9\u8c61\u6709 numpy() \u65b9\u6cd5\u8f6c\u4e3a numpy \u6570\u7ec4\u3002 \u6bd4\u5982\uff0c\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u521b\u5efa\u4e86\u540d\u4e3a myblob \u7684\u5bf9\u8c61\uff1a @flow . global_function () def job () -> tp . Numpy : ... myblob = flow . get_variable ( \"myblob\" , shape = ( 3 , 3 ), initializer = flow . random_normal_initializer () ) ... \u5982\u679c\u60f3\u6253\u5370 myblob \u7684\u503c\uff0c\u53ef\u4ee5\u8c03\u7528\uff1a ... for epoch in range ( 20 ): ... job () all_variables = flow . get_all_variables () print ( all_variables [ \"myblob\" ] . numpy ()) ... \u5176\u4e2d\u7684 flow.get_all_variables \u83b7\u53d6\u5230\u4e86\u5b57\u5178\uff0c all_variables[\"myblob\"].numpy() \u83b7\u53d6\u4e86 myblob \u5bf9\u8c61\u5e76\u5c06\u5176\u8f6c\u4e3a numpy \u6570\u7ec4\u3002 \u4e0e get_all_variables \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.load_variables \u66f4\u65b0 variable \u5bf9\u8c61\u7684\u503c\u3002 oneflow.load_variables \u7684\u539f\u578b\u5982\u4e0b\uff1a def load_variables ( value_dict , ignore_mismatch = True ) \u4f7f\u7528 load_variables \u524d\uff0c\u6211\u4eec\u8981\u51c6\u5907\u4e00\u4e2a\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u7684 key \u4e3a\u521b\u5efa variable \u65f6\u6307\u5b9a\u7684 name \uff0cvalue \u662f numpy \u6570\u7ec4\uff1b\u5c06\u5b57\u5178\u4f20\u9012\u7ed9 load_variables \u540e\uff0c load_variables \u4f1a\u5c06\u6839\u636e key \u627e\u5230\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684 variable \u5bf9\u8c61\uff0c\u5e76\u66f4\u65b0\u503c\u3002 \u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a @flow . global_function ( type = \"predict\" ) def job () -> tp . Numpy : myblob = flow . get_variable ( \"myblob\" , shape = ( 3 , 3 ), initializer = flow . random_normal_initializer () ) return myblob myvardict = { \"myblob\" : np . ones (( 3 , 3 )) . astype ( np . float32 )} flow . load_variables ( myvardict ) print ( flow . get_all_variables ()[ \"myblob\" ] . numpy ()) \u867d\u7136\u6211\u4eec\u9009\u62e9\u4e86 random_normal_initializer \u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u4f46\u662f\u56e0\u4e3a flow.load_variables(myvardict) \u66f4\u65b0\u4e86 myblob \u7684\u503c\uff0c\u6240\u4ee5\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\u662f\uff1a [[1. 1. 1.] [1. 1. 1.] [1. 1. 1.]]","title":"\u83b7\u53d6/\u66f4\u65b0 variable \u5bf9\u8c61\u7684\u503c"},{"location":"single_client/basics_topics/model_load_save.html#_3","text":"\u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4fdd\u5b58/\u52a0\u8f7d\u6a21\u578b\uff1a oneflow.checkpoint.save : \u8d1f\u8d23\u4fdd\u5b58\u5f53\u524d\u7684\u6a21\u578b\u5230\u6307\u5b9a\u8def\u5f84 oneflow.checkpoint.get : \u4ece\u6307\u5b9a\u8def\u5f84\u4e2d\u5bfc\u5165\u6a21\u578b save \u7684\u539f\u578b\u5982\u4e0b\uff0c\u53ef\u4ee5\u5c06\u6a21\u578b\u4fdd\u5b58\u81f3 path \u6240\u6307\u5b9a\u7684\u8def\u5f84\u3002 def save ( path , var_dict = None ) \u53ef\u9009\u53c2\u6570 var_dict \u5982\u679c\u4e0d\u4e3a None \uff0c\u5219\u5c06 var_dict \u4e2d\u6307\u5b9a\u7684\u5bf9\u8c61\u4fdd\u5b58\u5230\u6307\u5b9a\u8def\u5f84\u3002 get \u7684\u539f\u578b\u5982\u4e0b\uff0c\u53ef\u4ee5\u52a0\u8f7d\u4e4b\u524d\u5df2\u7ecf\u4fdd\u5b58\u7684\uff0c\u7531 path \u8def\u5f84\u6240\u6307\u5b9a\u7684\u6a21\u578b\u3002 def get ( path ) \u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u53ef\u4ee5\u7528\u4e0a\u6587\u4ecb\u7ecd\u7684 load_variables \u65b9\u6cd5\u66f4\u65b0\u5230\u6a21\u578b\u4e2d\uff1a flow . load_variables ( flow . checkpoint . get ( save_dir )) \u6ce8\u610f \uff1a save \u53c2\u6570\u6240\u6307\u5b9a\u8def\u5f84\u5bf9\u5e94\u7684\u76ee\u5f55\u8981\u4e48\u4e0d\u5b58\u5728\uff0c\u8981\u4e48\u5e94\u8be5\u4e3a\u7a7a\u76ee\u5f55\uff0c\u5426\u5219 save \u4f1a\u62a5\u9519(\u9632\u6b62\u8986\u76d6\u6389\u539f\u6709\u4fdd\u5b58\u7684\u6a21\u578b) OneFlow \u6a21\u578b\u4ee5\u4e00\u5b9a\u7684\u7ec4\u7ec7\u5f62\u5f0f\u4fdd\u5b58\u5728\u6307\u5b9a\u7684\u8def\u5f84\u4e2d\uff0c\u5177\u4f53\u7ed3\u6784\u53c2\u89c1\u4e0b\u6587\u4e2d\u7684 OneFlow \u6a21\u578b\u7684\u5b58\u50a8\u7ed3\u6784 \u867d\u7136 OneFlow \u5bf9 save \u7684\u9891\u7387\u6ca1\u6709\u9650\u5236\uff0c\u4f46\u662f\u8fc7\u9ad8\u7684\u4fdd\u5b58\u9891\u7387\uff0c\u4f1a\u52a0\u91cd\u78c1\u76d8\u53ca\u5e26\u5bbd\u7b49\u8d44\u6e90\u7684\u8d1f\u62c5\u3002","title":"\u6a21\u578b\u7684\u4fdd\u5b58\u4e0e\u52a0\u8f7d"},{"location":"single_client/basics_topics/model_load_save.html#oneflow","text":"OneFlow \u6a21\u578b\u662f\u4e00\u7ec4\u5df2\u7ecf\u88ab\u8bad\u7ec3\u597d\u7684\u7f51\u7edc\u7684 \u53c2\u6570\u503c \u3002\u6a21\u578b\u6240\u4fdd\u5b58\u7684\u8def\u5f84\u4e0b\uff0c\u6709\u591a\u4e2a\u5b50\u76ee\u5f55\uff0c\u6bcf\u4e2a\u5b50\u76ee\u5f55\u5bf9\u5e94\u4e86 \u4f5c\u4e1a\u51fd\u6570 \u4e2d\u6a21\u578b\u7684 name \u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u5148\u901a\u8fc7\u4ee3\u7801\u5b9a\u4e49\u4ee5\u4e0b\u7684\u6a21\u578b\uff1a def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) \u5047\u8bbe\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8c03\u7528\u4ee5\u4e0b\u4ee3\u7801\u4fdd\u5b58\u6a21\u578b\uff1a flow . checkpoint . save ( './lenet_models_name' ) \u90a3\u4e48 lenet_models_name \u53ca\u5176\u5b50\u76ee\u5f55\u7ed3\u6784\u4e3a\uff1a lenet_models_name/ \u251c\u2500\u2500 conv1-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 conv1-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 conv2-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 conv2-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense1-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense1-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense2-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense2-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 snapshot_done \u2514\u2500\u2500 System-Train-TrainStep-train_job \u251c\u2500\u2500 meta \u2514\u2500\u2500 out \u53ef\u4ee5\u770b\u5230\uff1a \u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684\u7f51\u7edc\u6a21\u578b\uff0c\u6bcf\u4e2a\u53d8\u91cf\u5bf9\u5e94\u4e00\u4e2a\u5b50\u76ee\u5f55 \u4ee5\u4e0a\u6bcf\u4e2a\u5b50\u76ee\u5f55\u4e2d\uff0c\u90fd\u6709 out \u548c meta \u6587\u4ef6\uff0c out \u4ee5\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\u5b58\u50a8\u4e86\u7f51\u7edc\u53c2\u6570\u7684\u503c\uff0c meta \u4ee5\u6587\u672c\u7684\u5f62\u5f0f\u5b58\u50a8\u4e86\u7f51\u7edc\u7684\u7ed3\u6784\u4fe1\u606f snapshot_done \u662f\u4e00\u4e2a\u7a7a\u6587\u4ef6\uff0c\u5982\u679c\u5b83\u5b58\u5728\uff0c\u8868\u793a\u7f51\u7edc\u5df2\u7ecf\u8bad\u7ec3\u5b8c\u6210 System-Train-TrainStep-train_job \u4e2d\u4fdd\u5b58\u6709\u5feb\u7167\u7684\u8bad\u7ec3\u6b65\u6570","title":"OneFlow \u6a21\u578b\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"single_client/basics_topics/model_load_save.html#_4","text":"\u5728\u6a21\u578b\u7684\u5fae\u8c03\u548c\u8fc1\u79fb\u5b66\u4e60\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u9700\u8981\uff1a \u6a21\u578b\u4e2d\u7684\u4e00\u90e8\u5206\u53c2\u6570\u52a0\u8f7d\u81ea\u539f\u6709\u6a21\u578b \u6a21\u578b\u4e2d\u7684\u53e6\u4e00\u90e8\u5206\uff08\u65b0\u589e\u7684\uff09\u53c2\u6570\u9700\u8981\u521d\u59cb\u5316 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.load_variables \u5b8c\u6210\u4ee5\u4e0a\u64cd\u4f5c\u3002\u4ee5\u4e0b\u4e3e\u4e00\u4e2a\u7528\u4e8e\u9610\u8ff0\u6982\u5ff5\u7684\u7b80\u5355\u4f8b\u5b50\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u6a21\u578b\uff0c\u8bad\u7ec3\u540e\u4fdd\u5b58\u81f3 ./mlp_models_1 \uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) dense2 = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , dense2 ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u7136\u540e\uff0c\u6211\u4eec\u62d3\u5c55\u7f51\u7edc\u7ed3\u6784\uff0c\u4e3a\u4ee5\u4e0a\u6a21\u578b\u591a\u589e\u52a0\u4e00\u5c42 dense3 \uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): #... \u539f\u6709\u7f51\u7edc\u7ed3\u6784 dense3 = flow . layers . dense ( dense2 , 10 , kernel_initializer = initializer , name = \"dense3\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , dense3 ) #... \u6700\u540e\uff0c\u4ece\u539f\u6765\u4fdd\u5b58\u7684\u6a21\u578b\u52a0\u8f7d\u53c2\u6570\uff0c\u5e76\u5f00\u59cb\u8bad\u7ec3\uff1a if __name__ == \"__main__\" : flow . load_variables ( flow . checkpoint . get ( \"./mlp_models_1\" )) ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE , BATCH_SIZE ) for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) flow . checkpoint . save ( \"./mlp_ext_models_1\" ) \u65b0\u589e\u7684 dense3 \u5c42\u53c2\u6570\uff0c\u5728\u539f\u6a21\u578b\u4e2d\u4e0d\u5b58\u5728\uff0cOneFlow \u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u5b83\u4eec\u7684\u503c\u3002","title":"\u6a21\u578b\u7684\u5fae\u8c03\u4e0e\u6269\u5c55"},{"location":"single_client/basics_topics/model_load_save.html#_5","text":"\u811a\u672c mlp_mnist_origin.py \u4e2d\u6784\u5efa\u4e86\u201c\u9aa8\u5e72\u7f51\u7edc\u201d\uff0c\u5e76\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\u81f3 ./mlp_models_1 \u3002 \u8fd0\u884c\uff1a wget https://docs.oneflow.org/master/code/basics_topics/mlp_mnist_origin.py python3 mlp_mnist_origin.py \u8bad\u7ec3\u5b8c\u6210\u540e\uff0c\u5c06\u4f1a\u5728\u5f53\u524d\u5de5\u4f5c\u8def\u5f84\u4e0b\u5f97\u5230 mlp_models_1 \u76ee\u5f55\u3002 \u811a\u672c mlp_mnist_finetune.py \u4e2d\u7684\u7f51\u7edc\u5728\u539f\u6709\u57fa\u7840\u4e0a\u8fdb\u884c\u201c\u5fae\u8c03\u201d\uff08\u4e3a\u9aa8\u5e72\u7f51\u7edc\u589e\u52a0\u4e00\u5c42 dense3 \uff09\u540e\uff0c\u52a0\u8f7d ./mlp_models_1 \uff0c\u5e76\u7ee7\u7eed\u8bad\u7ec3\u3002 \u8fd0\u884c\uff1a wget https://docs.oneflow.org/master/code/basics_topics/mlp_mnist_finetune.py python3 mlp_mnist_finetune.py \u5fae\u8c03\u540e\u7684\u6a21\u578b\uff0c\u4fdd\u5b58\u5728 ./mlp_ext_models_1 \u4e2d\u3002","title":"\u4ee3\u7801"},{"location":"single_client/basics_topics/optimizer_in_function_config.html","text":"\u914d\u7f6e\u4f18\u5316\u7b97\u6cd5\u548c\u8d85\u53c2 \u00b6 \u5f53\u642d\u5efa\u597d\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u540e\uff0c\u9700\u8981\u7ecf\u8fc7\u8bad\u7ec3\u624d\u80fd\u7528\u6765\u505a\u9884\u6d4b\u3002\u800c\u8bad\u7ec3\u7684\u8fc7\u7a0b\u5c31\u662f\u7f51\u7edc\u6a21\u578b\u4e2d\u7684\u53c2\u6570\u88ab\u4f18\u5316\u7684\u8fc7\u7a0b\uff0c\u901a\u5e38\u91c7\u7528\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u548c\u6307\u5b9a\u7684 Optimizer \u66f4\u65b0\u53c2\u6570\uff0c\u672c\u6587\u91cd\u70b9\u4ecb\u7ecd\u5728 OneFlow \u4e2d\u5982\u4f55\u8bbe\u7f6e Optimizer \u548c \u8d85\u53c2(Hyperparameters) \u3002 \u6587\u7ae0\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\uff1a \u7528\u4e8e\u8bad\u7ec3\u7684\u4f5c\u4e1a\u51fd\u6570\u548c\u7528\u4e8e\u9884\u6d4b\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u914d\u7f6e\u793a\u4f8b\uff1b optimizer \u53ca \u5b66\u4e60\u7b56\u7565\u7684\u4f7f\u7528\uff1b \u7531\u4e8e\u9519\u8bef\u914d\u7f6e\u5bfc\u81f4\u7684\u5e38\u89c1\u9519\u8bef\u53ca\u89e3\u51b3\u65b9\u6cd5 \u53ef\u4ee5\u5728\u4e0d\u4e86\u89e3 OneFlow \u8bbe\u8ba1\u548c\u6982\u5ff5\u7684\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u91c7\u7528 \u914d\u7f6e\u793a\u4f8b \u90e8\u5206\u7684\u8bad\u7ec3\u6216\u9884\u6d4b\u914d\u7f6e\uff1b\u66f4\u8be6\u7ec6\u7684\u8bf4\u660e\u8bf7\u53c2\u8003 optimizer API \u6587\u6863 \u4f5c\u4e1a\u51fd\u6570\u914d\u7f6e\u7684\u57fa\u672c\u6982\u5ff5 \u00b6 \u5728 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u4e00\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 oneflow.global_function \u88c5\u9970\u5668\u53ca\u4f5c\u4e1a\u51fd\u6570\u7684\u6982\u5ff5\uff0c\u672c\u6587\u7684\u914d\u7f6e\uff0c\u5efa\u7acb\u5728\u6b64\u57fa\u7840\u4e0a\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5411\u8be5\u88c5\u9970\u5668\u4f20\u9012 function_config \u53c2\u6570\u8fbe\u5230\u914d\u7f6e\u4f5c\u4e1a\u51fd\u6570\u7684\u76ee\u7684\u3002 \u5982\u679c\u5bf9\u4e8e oneflow.global_function \u8fd8\u4e0d\u4e86\u89e3\uff0c\u8bf7\u5148\u53c2\u9605 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u53ca \u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528 \u3002 \u914d\u7f6e\u793a\u4f8b \u00b6 \u9884\u6d4b\u914d\u7f6e \u00b6 \u4ee5\u4e0b\u4ee3\u7801\u4e2d\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7528\u4e8e\u9884\u6d4b\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a eval_job \u3002 \u6211\u4eec\u901a\u8fc7 get_eval_config() \u5b9a\u4e49\u4e86 eval_job() \u7684\u914d\u7f6e\uff0c\u5e76\u5c06 get_eval_config() \u4f5c\u4e3a @flow.global_function \u7684\u53c2\u6570\uff0c\u5e94\u7528\u5230 eval_job() \u51fd\u6570\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 type=\"predict\" \u6765\u8868\u660e\u8be5\u4f5c\u4e1a\u51fd\u6570\u7528\u4e8e\u9884\u6d4b\uff0c\u8fd9\u6837\uff0cOneFlow \u4e0d\u4f1a\u5728\u8fd9\u4e2a\u4f5c\u4e1a\u51fd\u6570\u4e2d\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u3002 def get_eval_config (): config = flow . function_config () config . default_data_type ( flow . float ) return config @flow . global_function ( type = \"predict\" , get_eval_config ()) def eval_job () -> tp . Numpy : # build neural network here \u8bad\u7ec3\u914d\u7f6e \u00b6 \u5982\u679c\u6307\u5b9a @flow.global_function \u7684 type \u53c2\u6570\u4e3a train \uff0c\u5c31\u80fd\u591f\u5f97\u5230\u4e00\u4e2a\u7528\u4e8e\u8bad\u7ec3\u7684\u4f5c\u4e1a\u51fd\u6570\u3002 \u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c train_job \u4e3a\u7528\u4e8e\u8bad\u7ec3\u7684\u4f5c\u4e1a\u51fd\u6570\uff0c\u91c7\u7528\u9ed8\u8ba4\u7684 function_config \u914d\u7f6e\uff08\u56e0\u6b64\u6ca1\u6709\u5411 function_config \u4f20\u53c2)\u3002 \u56e0\u4e3a OneFlow \u4f1a\u4e3a train \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u56e0\u6b64\u9700\u8981\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u6307\u5b9a optimizer\u3001\u5b66\u4e60\u7387\u7b49\u8d85\u53c2\u6570\u7684\u8bbe\u5b9a\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff1a flow.optimizer.PiecewiseConstantScheduler \u8bbe\u7f6e\u4e86\u5b66\u4e60\u7387\uff080.1\uff09\u53ca\u5b66\u4e60\u7b56\u7565\uff08PiecewiseConstantScheduler\uff0c\u5206\u6bb5\u7f29\u653e\u7b56\u7565\uff09\uff0cOneFlow \u4e2d\u8fd8\u5185\u7f6e\u4e86\u5176\u5b83\u5b66\u4e60\u7b56\u7565\uff0c\u5982\uff1a CosineScheduler \u3001 CustomScheduler \u3001 InverseTimeScheduler \u7b49\u3002 \u5728 flow.optimizer.SGD(lr_scheduler, momentum=0).minimize(loss) \u8bbe\u7f6e optimizer \u4e3a SGD\uff0c\u5e76\u6307\u5b9a\u4f18\u5316\u76ee\u6807\u4e3a loss \u3002OneFlow \u4e2d\u5185\u7f6e\u4e86\u591a\u79cd optimizer\uff0c\u5b83\u4eec\u5206\u522b\u662f\uff1a SGD \u3001 Adam \u3001 AdamW \u3001 LazyAdam \u3001 LARS \u3001 RMSProp \uff0c\u53ef\u53c2\u9605 API \u6587\u6863\u83b7\u53d6\u4f7f\u7528\u65b9\u6cd5\u53ca\u7b97\u6cd5\u7ec6\u8282\u3002 FAQ \u00b6 \u62a5\u9519 Check failed: job().job_conf().train_conf().has_model_update_conf() \u5982\u679c\u4f5c\u4e1a\u51fd\u6570\u7684 type \u4e3a \"train\" \uff0c\u4f46\u662f\u6ca1\u6709\u8bbe\u7f6e optimizer \u53ca\u4f18\u5316\u76ee\u6807\uff0c\u90a3\u4e48\u5728\u53cd\u5411\u4f20\u64ad\u65f6\uff0cOneFlow \u4f1a\u56e0\u4e3a\u4e0d\u77e5\u9053\u5982\u4f55\u66f4\u65b0\u53c2\u6570\u800c\u62a5\u9519\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a\u4e3a\u8bad\u7ec3\u4f5c\u4e1a\u51fd\u6570\u914d\u7f6e optimizer \u5e76\u6307\u5b9a\u4f18\u5316\u76ee\u6807\u3002 \u62a5\u9519 Check failed: NeedBackwardOp \u5982\u679c\u4f5c\u4e1a\u51fd\u6570\u7684 type \u4e3a \"predict\" \uff0c\u5374\uff08\u9519\u8bef\u5730\uff09\u914d\u7f6e\u4e86 optimizer \u65f6\uff0c\u56e0\u4e3a OneFlow \u4e0d\u4f1a\u4e3a predict \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u751f\u6210\u53cd\u5411\u56fe\uff0c\u6240\u4ee5\u6b64\u65f6 optimizer \u65e0\u6cd5\u62ff\u5230\u53cd\u5411\u7684\u6570\u636e\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a\u53bb\u6389 predict \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684 optimizer \u76f8\u5173\u8bed\u53e5\u3002","title":"\u4f18\u5316\u7b97\u6cd5\u53ca\u8d85\u53c2\u914d\u7f6e"},{"location":"single_client/basics_topics/optimizer_in_function_config.html#_1","text":"\u5f53\u642d\u5efa\u597d\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u540e\uff0c\u9700\u8981\u7ecf\u8fc7\u8bad\u7ec3\u624d\u80fd\u7528\u6765\u505a\u9884\u6d4b\u3002\u800c\u8bad\u7ec3\u7684\u8fc7\u7a0b\u5c31\u662f\u7f51\u7edc\u6a21\u578b\u4e2d\u7684\u53c2\u6570\u88ab\u4f18\u5316\u7684\u8fc7\u7a0b\uff0c\u901a\u5e38\u91c7\u7528\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u548c\u6307\u5b9a\u7684 Optimizer \u66f4\u65b0\u53c2\u6570\uff0c\u672c\u6587\u91cd\u70b9\u4ecb\u7ecd\u5728 OneFlow \u4e2d\u5982\u4f55\u8bbe\u7f6e Optimizer \u548c \u8d85\u53c2(Hyperparameters) \u3002 \u6587\u7ae0\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\uff1a \u7528\u4e8e\u8bad\u7ec3\u7684\u4f5c\u4e1a\u51fd\u6570\u548c\u7528\u4e8e\u9884\u6d4b\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u914d\u7f6e\u793a\u4f8b\uff1b optimizer \u53ca \u5b66\u4e60\u7b56\u7565\u7684\u4f7f\u7528\uff1b \u7531\u4e8e\u9519\u8bef\u914d\u7f6e\u5bfc\u81f4\u7684\u5e38\u89c1\u9519\u8bef\u53ca\u89e3\u51b3\u65b9\u6cd5 \u53ef\u4ee5\u5728\u4e0d\u4e86\u89e3 OneFlow \u8bbe\u8ba1\u548c\u6982\u5ff5\u7684\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u91c7\u7528 \u914d\u7f6e\u793a\u4f8b \u90e8\u5206\u7684\u8bad\u7ec3\u6216\u9884\u6d4b\u914d\u7f6e\uff1b\u66f4\u8be6\u7ec6\u7684\u8bf4\u660e\u8bf7\u53c2\u8003 optimizer API \u6587\u6863","title":"\u914d\u7f6e\u4f18\u5316\u7b97\u6cd5\u548c\u8d85\u53c2"},{"location":"single_client/basics_topics/optimizer_in_function_config.html#_2","text":"\u5728 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u4e00\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 oneflow.global_function \u88c5\u9970\u5668\u53ca\u4f5c\u4e1a\u51fd\u6570\u7684\u6982\u5ff5\uff0c\u672c\u6587\u7684\u914d\u7f6e\uff0c\u5efa\u7acb\u5728\u6b64\u57fa\u7840\u4e0a\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5411\u8be5\u88c5\u9970\u5668\u4f20\u9012 function_config \u53c2\u6570\u8fbe\u5230\u914d\u7f6e\u4f5c\u4e1a\u51fd\u6570\u7684\u76ee\u7684\u3002 \u5982\u679c\u5bf9\u4e8e oneflow.global_function \u8fd8\u4e0d\u4e86\u89e3\uff0c\u8bf7\u5148\u53c2\u9605 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u53ca \u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528 \u3002","title":"\u4f5c\u4e1a\u51fd\u6570\u914d\u7f6e\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"single_client/basics_topics/optimizer_in_function_config.html#_3","text":"","title":"\u914d\u7f6e\u793a\u4f8b"},{"location":"single_client/basics_topics/optimizer_in_function_config.html#_4","text":"\u4ee5\u4e0b\u4ee3\u7801\u4e2d\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7528\u4e8e\u9884\u6d4b\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a eval_job \u3002 \u6211\u4eec\u901a\u8fc7 get_eval_config() \u5b9a\u4e49\u4e86 eval_job() \u7684\u914d\u7f6e\uff0c\u5e76\u5c06 get_eval_config() \u4f5c\u4e3a @flow.global_function \u7684\u53c2\u6570\uff0c\u5e94\u7528\u5230 eval_job() \u51fd\u6570\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 type=\"predict\" \u6765\u8868\u660e\u8be5\u4f5c\u4e1a\u51fd\u6570\u7528\u4e8e\u9884\u6d4b\uff0c\u8fd9\u6837\uff0cOneFlow \u4e0d\u4f1a\u5728\u8fd9\u4e2a\u4f5c\u4e1a\u51fd\u6570\u4e2d\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u3002 def get_eval_config (): config = flow . function_config () config . default_data_type ( flow . float ) return config @flow . global_function ( type = \"predict\" , get_eval_config ()) def eval_job () -> tp . Numpy : # build neural network here","title":"\u9884\u6d4b\u914d\u7f6e"},{"location":"single_client/basics_topics/optimizer_in_function_config.html#_5","text":"\u5982\u679c\u6307\u5b9a @flow.global_function \u7684 type \u53c2\u6570\u4e3a train \uff0c\u5c31\u80fd\u591f\u5f97\u5230\u4e00\u4e2a\u7528\u4e8e\u8bad\u7ec3\u7684\u4f5c\u4e1a\u51fd\u6570\u3002 \u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c train_job \u4e3a\u7528\u4e8e\u8bad\u7ec3\u7684\u4f5c\u4e1a\u51fd\u6570\uff0c\u91c7\u7528\u9ed8\u8ba4\u7684 function_config \u914d\u7f6e\uff08\u56e0\u6b64\u6ca1\u6709\u5411 function_config \u4f20\u53c2)\u3002 \u56e0\u4e3a OneFlow \u4f1a\u4e3a train \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u56e0\u6b64\u9700\u8981\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u6307\u5b9a optimizer\u3001\u5b66\u4e60\u7387\u7b49\u8d85\u53c2\u6570\u7684\u8bbe\u5b9a\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff1a flow.optimizer.PiecewiseConstantScheduler \u8bbe\u7f6e\u4e86\u5b66\u4e60\u7387\uff080.1\uff09\u53ca\u5b66\u4e60\u7b56\u7565\uff08PiecewiseConstantScheduler\uff0c\u5206\u6bb5\u7f29\u653e\u7b56\u7565\uff09\uff0cOneFlow \u4e2d\u8fd8\u5185\u7f6e\u4e86\u5176\u5b83\u5b66\u4e60\u7b56\u7565\uff0c\u5982\uff1a CosineScheduler \u3001 CustomScheduler \u3001 InverseTimeScheduler \u7b49\u3002 \u5728 flow.optimizer.SGD(lr_scheduler, momentum=0).minimize(loss) \u8bbe\u7f6e optimizer \u4e3a SGD\uff0c\u5e76\u6307\u5b9a\u4f18\u5316\u76ee\u6807\u4e3a loss \u3002OneFlow \u4e2d\u5185\u7f6e\u4e86\u591a\u79cd optimizer\uff0c\u5b83\u4eec\u5206\u522b\u662f\uff1a SGD \u3001 Adam \u3001 AdamW \u3001 LazyAdam \u3001 LARS \u3001 RMSProp \uff0c\u53ef\u53c2\u9605 API \u6587\u6863\u83b7\u53d6\u4f7f\u7528\u65b9\u6cd5\u53ca\u7b97\u6cd5\u7ec6\u8282\u3002","title":"\u8bad\u7ec3\u914d\u7f6e"},{"location":"single_client/basics_topics/optimizer_in_function_config.html#faq","text":"\u62a5\u9519 Check failed: job().job_conf().train_conf().has_model_update_conf() \u5982\u679c\u4f5c\u4e1a\u51fd\u6570\u7684 type \u4e3a \"train\" \uff0c\u4f46\u662f\u6ca1\u6709\u8bbe\u7f6e optimizer \u53ca\u4f18\u5316\u76ee\u6807\uff0c\u90a3\u4e48\u5728\u53cd\u5411\u4f20\u64ad\u65f6\uff0cOneFlow \u4f1a\u56e0\u4e3a\u4e0d\u77e5\u9053\u5982\u4f55\u66f4\u65b0\u53c2\u6570\u800c\u62a5\u9519\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a\u4e3a\u8bad\u7ec3\u4f5c\u4e1a\u51fd\u6570\u914d\u7f6e optimizer \u5e76\u6307\u5b9a\u4f18\u5316\u76ee\u6807\u3002 \u62a5\u9519 Check failed: NeedBackwardOp \u5982\u679c\u4f5c\u4e1a\u51fd\u6570\u7684 type \u4e3a \"predict\" \uff0c\u5374\uff08\u9519\u8bef\u5730\uff09\u914d\u7f6e\u4e86 optimizer \u65f6\uff0c\u56e0\u4e3a OneFlow \u4e0d\u4f1a\u4e3a predict \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u751f\u6210\u53cd\u5411\u56fe\uff0c\u6240\u4ee5\u6b64\u65f6 optimizer \u65e0\u6cd5\u62ff\u5230\u53cd\u5411\u7684\u6570\u636e\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a\u53bb\u6389 predict \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684 optimizer \u76f8\u5173\u8bed\u53e5\u3002","title":"FAQ"},{"location":"single_client/extended_topics/consistent_mirrored.html","text":"Consistent \u4e0e Mirrored \u89c6\u89d2 \u00b6 \u5728\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0cOneFlow \u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u79cd\u89d2\u5ea6\u770b\u5f85\u6570\u636e\u4e0e\u6a21\u578b\u7684\u5173\u7cfb\uff0c\u88ab\u79f0\u4f5c consistent \u89c6\u89d2\u4e0e mirrored \u89c6\u89d2\u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a \u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\u7684\u533a\u522b\u53ca\u9002\u7528\u573a\u666f \u5728\u5206\u5e03\u5f0f\u4efb\u52a1\u4e2d\u91c7\u7528 mirrored \u89c6\u89d2\u53ca\u5176\u7279\u70b9 \u5728\u5206\u5e03\u5f0f\u4efb\u52a1\u4e2d\u91c7\u7528 consistent \u89c6\u89d2\u53ca\u5176\u7279\u70b9 \u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c \u00b6 \u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3 OneFlow \u4e2d\u7684 consistent \u548c mirrored \u89c6\u89d2\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u5206\u5e03\u5f0f\u4efb\u52a1\u4e2d\u7684 \u6570\u636e\u5e76\u884c \u3001 \u6a21\u578b\u5e76\u884c \u4e24\u79cd\u5e76\u884c\u65b9\u5f0f\u7684\u533a\u522b\u3002 \u4e3a\u4e86\u66f4\u76f4\u89c2\u5730\u5c55\u793a\u4e24\u8005\u7684\u5dee\u522b\uff0c\u6211\u4eec\u5148\u770b\u4e00\u4e2a\u7b80\u5355\u7684 Op \uff1a\u77e9\u9635\u4e58\u6cd5\u3002 \u6211\u4eec\u5047\u5b9a\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\uff0c\u5b58\u5728\u4e00\u4e2a\u8f93\u5165\u77e9\u9635 I \uff0c\u901a\u8fc7\u77e9\u9635 I \u4e0e\u77e9\u9635 W \u505a\u77e9\u9635\u4e58\u6cd5\uff0c\u5f97\u5230\u8f93\u51fa\u77e9\u9635 O \u3002 \u5982\u4ee5\u4e0a\u6240\u793a\uff0cI\u7684\u5927\u5c0f\u4e3a(N, C1)\uff0cW\u7684\u5927\u5c0f\u4e3a(C1, C2)\uff0cO\u7684\u5927\u5c0f\u4e3a(N, C2)\u3002 \u7ed3\u5408\u673a\u5668\u5b66\u4e60\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u53ef\u4ee5\u8d4b\u4e88\u4ee5\u4e0a\u51e0\u4e2a\u77e9\u9635\u76f4\u89c2\u610f\u4e49\uff1a I \u77e9\u9635\u4f5c\u4e3a\u8f93\u5165\u77e9\u9635\uff0c\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u6837\u672c\uff0c\u4e00\u884c\u4e2d\u7684\u5404\u5217\u4ee3\u8868\u4e86\u6837\u672c\u7684\u7279\u5f81 W \u77e9\u9635\u4ee3\u8868\u4e86\u6a21\u578b\u53c2\u6570 O \u662f\u9884\u6d4b\u7ed3\u679c\u6216\u8005 label \uff0c\u5982\u679c\u662f\u9884\u6d4b\u4f5c\u4e1a\uff0c\u90a3\u4e48\u5c31\u662f\u7531 I\u3001W \u6c42\u89e3 O\uff0c\u5f97\u5230\u5206\u7c7b\u7ed3\u679c\u7684\u8fc7\u7a0b\uff1b\u5982\u679c\u662f\u8bad\u7ec3\u4f5c\u4e1a\uff0c\u90a3\u4e48\u5c31\u662f\u7531 I \u4e0e O \u6c42\u89e3 W \u7684\u8fc7\u7a0b \u5f53\u4ee5\u4e0a I \u77e9\u9635\u7684\u884c N \u5f88\u5927\uff0c\u8bf4\u660e\u6837\u672c\u5f88\u591a\uff1b\u5982\u679c W \u77e9\u9635\u7684\u5217 C2 \u5f88\u5927\uff0c\u8bf4\u660e\u6a21\u578b\u590d\u6742\uff1b\u5f53\u6837\u672c\u6570\u76ee\u3001\u6a21\u578b\u590d\u6742\u7a0b\u5ea6\u590d\u6742\u5230\u4e00\u5b9a\u7a0b\u5ea6\u65f6\uff0c\u5355\u673a\u5355\u5361\u7684\u786c\u4ef6\u6761\u4ef6\u5df2\u7ecf\u65e0\u6cd5\u627f\u8f7d\u8bad\u7ec3\u4f5c\u4e1a\uff0c\u5c31\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u8bad\u7ec3\u3002\u800c\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9 \u6570\u636e\u5e76\u884c \u548c \u6a21\u578b\u5e76\u884c \u3002 \u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\uff0c\u6211\u4eec\u5148\u7528\u4e0b\u56fe\u4f5c\u4e3a\u77e9\u9635\u76f8\u4e58 Op \u7684\u793a\u4f8b\uff1a \u7b49\u5f0f\u5de6\u8fb9\u7b2c1\u4e2a\u7070\u8272\u7684\u77e9\u9635\u4ee3\u8868\u8f93\u5165\u6837\u672c\uff0c\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u6837\u672c\uff1b\u7b49\u5f0f\u5de6\u8fb9\u7b2c2\u4e2a\u84dd\u8272\u7684\u77e9\u9635\u4ee3\u8868\u6a21\u578b\u3002 \u5728\u540e\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4ee5\u4e0a\u7684 op\uff0c\u5728\u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\u4e0b\uff0c\u4e0d\u540c\u7684\u201c\u5207\u5206\u201d\u65b9\u5f0f\u3002 \u6570\u636e\u5e76\u884c\u56fe\u793a \u00b6 \u5728 \u6570\u636e\u5e76\u884c \u4e2d\uff0c\u5c06\u6837\u672c\u6570\u636e\u8fdb\u884c\u5207\u5206\uff0c \u5207\u5206\u540e\u7684\u6570\u636e \u88ab\u9001\u81f3\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\uff0c\u4e0e \u5b8c\u6574\u7684\u6a21\u578b \u8fdb\u884c\u8fd0\u7b97\uff0c\u6700\u540e\u5c06\u591a\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u8fdb\u884c\u5408\u5e76\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6a21\u578b\u5e76\u884c\u56fe\u793a \u00b6 \u5728 \u6a21\u578b\u5e76\u884c \u4e2d\uff0c\u5c06\u6a21\u578b\u8fdb\u884c\u5207\u5206\uff0c \u5b8c\u6574\u7684\u6570\u636e \u88ab\u9001\u81f3\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\uff0c\u4e0e \u5207\u5206\u540e\u7684\u6a21\u578b \u8fdb\u884c\u8fd0\u7b97\uff0c\u6700\u540e\u5c06\u591a\u4e2a\u8282\u70b9\u7684\u8fd0\u7b97\u7ed3\u679c\u5408\u5e76\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u603b\u4e4b\uff1a \u6570\u636e\u5e76\u884c\u4e0b\uff0c\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u7684\u6a21\u578b\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u6570\u636e\u88ab\u5207\u5206\uff1b \u6a21\u578b\u5e76\u884c\u4e0b\uff0c\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u90fd\u63a5\u6536\u4e00\u6837\u7684\u5b8c\u6574\u6570\u636e\uff0c \u6a21\u578b\u88ab\u5207\u5206\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4ecb\u7ecd OneFlow \u770b\u5f85\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e24\u79cd\u89c6\u89d2\uff08 mirrored \u89c6\u89d2\u4e0e consistent \u89c6\u89d2\uff09\uff0c\u5b66\u4e60\u5728\u4e0d\u540c\u7684\u89c6\u89d2\u4e0b\u5982\u4f55\u9009\u62e9\u5e76\u884c\u65b9\u5f0f\u3002 \u4e24\u7c7b\u5360\u4f4d\u7b26 \u00b6 \u5728 \u4f7f\u7528OneFlow\u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u53ca \u5b9a\u4e49\u4e0e\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 \u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u4e86 \u6570\u636e\u5360\u4f4d\u7b26 \u4e0e Blob \u7684\u6982\u5ff5\u3002 \u5b9e\u9645\u4e0a\uff0c\u9488\u5bf9\u5e76\u884c\uff0cOneFlow\u7684\u6570\u636e\u5360\u4f4d\u7b26\u8fd8\u53ef\u4ee5\u7ec6\u5206\u4e3a \u4e24\u7c7b\uff1a\u5206\u522b\u901a\u8fc7\u63a5\u53e3 flow.typing.Numpy.Placeholder \u548c flow.typing.ListNumpy.Placeholder \u6784\u9020\u7684\u5360\u4f4d\u7b26\uff0c\u5206\u522b\u5bf9\u5e94 Consistent \u4e0e Mirrored \u60c5\u51b5\u3002 \u6211\u4eec\u5c06\u5728\u4e0b\u6587\u4e2d\u770b\u5230\u5b83\u4eec\u7684\u5177\u4f53\u5e94\u7528\u3002 \u5728 OneFlow \u4e2d\u4f7f\u7528 mirrored \u89c6\u89d2 \u00b6 \u5176\u5b83\u7684\u6846\u67b6\uff0c\u5982 TensorFlow\u3001Pytorch \u5747\u652f\u6301 mirroed view \uff1bOneFlow \u7684 mirrored \u89c6\u89d2\u4e0e\u5b83\u4eec\u7c7b\u4f3c\u3002 \u5728 mirrored \u89c6\u89d2\u4e0b\uff0c\u6a21\u578b\u88ab\u955c\u50cf\u590d\u5236\u5230\u6bcf\u5f20\u5361\u4e0a\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6a21\u578b\u6784\u56fe\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u53ea\u80fd\u91c7\u7528 \u6570\u636e\u5e76\u884c \u3002 \u5728 OneFlow \u4e2d\uff0c\u9ed8\u8ba4\u4e0d\u662f mirrored \u7b56\u7565\uff0c\u9700\u8981\u901a\u8fc7 flow.function_config() \u7684 default_logical_view \u63a5\u53e3\u6765\u663e\u5f0f\u6307\u5b9a\uff1a func_config = flow . function_config () func_config . default_logical_view ( flow . scope . mirrored_view ()) \u5728 mirrored_view \u4e0b\uff0c\u53ea\u80fd\u91c7\u7528 \u6570\u636e\u5e76\u884c \u7684\u5e76\u884c\u6a21\u5f0f\uff0c\u5728\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6570\u636e\u6309\u7167\u8bad\u7ec3\u8282\u70b9\u7684\u6570\u76ee\uff08\u663e\u5361\u603b\u6570\uff09\u8fdb\u884c\u5e73\u5747\u5207\u5206\uff0c\u5e76\u5c06\u5207\u5206\u540e\u7684\u6570\u636e\u653e\u5165 list \u4e2d\u8fdb\u884c\u4f20\u9012\uff0c list \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5c31\u662f\u540e\u5206\u914d\u7ed9 \u5404\u4e2a\u663e\u5361 \u7684\u5b9e\u9645\u6570\u636e\u3002 \u8bad\u7ec3\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u4e5f\u53d8\u4f5c\u4e86 flow.typing.ListNumpy \uff0c\u662f\u4e00\u4e2a list \uff0c list \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5bf9\u5e94\u4e86\u6bcf\u5f20\u5361\u4e0a\u8bad\u7ec3\u7ed3\u679c\u3002 \u4ee5\u4e0a\u63d0\u53ca\u7684 list \u4e2d\u7684\u6240\u6709\u5143\u7d20 \u62fc\u63a5\u5728\u4e00\u8d77 \uff0c\u624d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 BATCH\u3002\u800cOneFlow\u4f1a\u81ea\u52a8\u6267\u884c\u8fd9\u4e2a\u62fc\u63a5\u7684\u8fc7\u7a0b\uff0c\u65e0\u9700\u7528\u6237\u8fdb\u884c\u591a\u4f59\u7684\u64cd\u4f5c\u3002 \u4ee3\u7801 \u00b6 \u5728\u4ee5\u4e0b\u7684\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u91c7\u7528 mirrored_view \u89c6\u89d2\uff0c\u4f7f\u75282\u4e2a GPU \u8fdb\u884c\u8bad\u7ec3\u3002 \u4ee3\u7801\uff1a mirrored_strategy.py \u91cd\u70b9\u90e8\u5206\u7684\u8bf4\u660e\u8bf7\u89c1\u540e\u6587\u201c\u4ee3\u7801\u89e3\u6790\u201d\u90e8\u5206\u3002 \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff1a \u4f7f\u7528 flow.config.gpu_device_num \u8bbe\u7f6e GPU \u6570\u76ee\u4e3a2 flow . config . gpu_device_num ( 2 ) flow.typing.ListNumpy.Placeholder \u5b9a\u4e49\u7684\u6837\u672c\u6570\u76ee\uff0c\u662f\u88ab\u5207\u5206\u540e\u7684\u6570\u76ee\uff0c\u5373\u4ee3\u7801\u4e2d\u7684 BATCH_SIZE_PER_GPU \u4e0e\u603b\u6837\u672c\u6570 BATCH_SIZE \u7684\u5173\u7cfb\u4e3a\uff1a BATCH_SIZE=BATCH_SIZE_PER_GPU\u00d7GPU_NUM def train_job ( images : tp . ListNumpy . Placeholder (( BATCH_SIZE_PER_GPU , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . ListNumpy . Placeholder (( BATCH_SIZE_PER_GPU ,), dtype = flow . int32 ), ) -> tp . ListNumpy : \u5207\u5206\u540e\u7684\u6570\u636e\uff0c\u9700\u8981\u4fdd\u5b58\u81f3 list \u4e2d\u4f20\u5165\u8bad\u7ec3\u51fd\u6570\uff1b list \u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u4e0e \u53c2\u4e0e\u8bad\u7ec3\u7684GPU\u6570\u76ee \u4e00\u81f4\uff1bOneFlow \u5c06\u6309\u7167 list \u4e2d\u5143\u7d20\u987a\u5e8f\uff0c\u5411\u5404\u5361\u4f20\u9012\u6570\u636e( list \u4e2d\u7b2c i \u4e2a\u5143\u7d20\u5bf9\u5e94\u7b2c i \u5f20\u5361)\uff1a images1 = images [: BATCH_SIZE_PER_GPU ] images2 = images [ BATCH_SIZE_PER_GPU :] labels1 = labels [: BATCH_SIZE_PER_GPU ] labels2 = labels [ BATCH_SIZE_PER_GPU :] imgs_list = [ images1 , images2 ] labels_list = [ labels1 , labels2 ] loss = np . array ( train_job ( imgs_list , labels_list )) \u8fd4\u56de\u7684\u5f97\u5230\u7684\u7ed3\u679c loss \uff0c\u662f\u4e00\u4e2a list \u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8be5 list \u4e2d\u5143\u7d20\u4e2a\u6570\u5e94\u4e0e \u53c2\u4e0e\u8bad\u7ec3\u7684GPU\u6570\u76ee \u4e00\u81f4\uff1b list \u4e2d\u7684\u7b2ci\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e86\u7b2c i \u5f20 GPU \u5361\u4e0a\u7684\u8fd0\u7b97\u7ed3\u679c\u3002\u4f46\u7531\u4e8eOneFlow\u4f1a\u5728\u540e\u53f0\u81ea\u52a8\u6267\u884c\u62fc\u63a5\u64cd\u4f5c\uff0c\u6211\u4eec\u65e0\u9700\u518d\u5728\u4ee3\u7801\u4e2d\u8fdb\u884c\u591a\u4f59\u7684\u62fc\u63a5\u6b65\u9aa4\u3002\u53ea\u9700\u5c06loss\u5408\u5e76\u540e\u8fdb\u884c\u8ba1\u7b97\u5e76\u6253\u5370\u5176\u5e73\u5747\u503c\u3002 total_loss = np . array ([ * loss [ 0 ], * loss [ 1 ]]) if i % 20 == 0 : print ( loss . mean ()) \u5728 OneFlow \u4e2d\u4f7f\u7528 consistent \u89c6\u89d2 \u00b6 \u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 mirrored \u89c6\u89d2\uff0c\u77e5\u9053\u5728 mirrored_view \u89c6\u89d2\u4e0b\uff0c\u6837\u672c\u4f1a\u88ab\u5e73\u5747\u5206\u914d\u5230\u591a\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u6a21\u578b\u4e0a\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u4e0a\u7684\u7ed3\u679c\uff0c\u9700\u8981\u7ec4\u88c5\u624d\u80fd\u5f97\u5230\u771f\u6b63\u5b8c\u6574\u7684 BATCH\uff0c\u5bf9\u5e94\u4e86\u903b\u8f91\u4e0a\u7684 op \u4e0e Blob\u3002 \u9664\u4e86 mirrored \u89c6\u89d2\u5916\uff0cOneFlow \u8fd8\u63d0\u4f9b\u4e86 consistent \u89c6\u89d2\u3002consistent \u89c6\u89d2\u662f OneFlow \u7684\u4e00\u5927\u7279\u8272\uff0c\u4e0e mirrored \u89c6\u89d2\u76f8\u6bd4\u6709\u5f88\u5927\u7684\u4f18\u52bf\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b OneFlow \u91c7\u53d6\u7684\u662f consistent \u89c6\u89d2\uff0c\u5982\u679c\u60f3\u663e\u5f0f\u58f0\u660e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u8bbe\u7f6e\uff1a config = flow . function_config () config . default_logical_view ( flow . scope . consistent_view ()) \u4e4b\u6240\u4ee5\u8bf4 consistent \u89c6\u89d2\u662f OneFlow \u7684\u4e00\u5927\u7279\u8272\uff0c\u662f\u56e0\u4e3a\u5728 OneFlow \u7684\u8bbe\u8ba1\u4e2d\uff0c\u82e5\u91c7\u7528 consistent_view \uff0c\u90a3\u4e48\u4ece\u7528\u6237\u7684\u89c6\u89d2\u770b\uff0c\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u591a\u4e2a\u8bbe\u5907\u5c06\u83b7\u5f97 \u903b\u8f91\u4e0a\u7684\u7edf\u4e00 \uff0c\u540c\u6837\u4ee5\u672c\u6587\u5f00\u5934\u7684\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8 \u77e9\u9635\u4e58\u6cd5 \u672c\u8eab\u6570\u5b66\u8ba1\u7b97\u4e0a\u7684\u610f\u4e49\uff1b\u800c\u5728\u5de5\u7a0b\u4e0a\u5230\u5e95\u5982\u4f55\u914d\u7f6e\u3001\u91c7\u7528\u6a21\u578b\u5e76\u884c\u8fd8\u662f\u6570\u636e\u5e76\u884c\u7b49\u7ec6\u8282\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528 OneFlow \u7684\u63a5\u53e3\u8f7b\u677e\u5b8c\u6210\u3002OneFlow \u5185\u90e8\u4f1a\u9ad8\u6548\u53ef\u9760\u5730\u89e3\u51b3 \u6570\u636e\u5e76\u884c\u4e2d\u7684\u6570\u636e\u5207\u5206 \u3001 \u6a21\u578b\u5e76\u884c\u4e2d\u7684\u6a21\u578b\u5207\u5206 \u3001 \u4e32\u884c\u903b\u8f91 \u7b49\u95ee\u9898\u3002 \u5728 OneFlow \u7684 consistent \u89c6\u89d2\u4e0b\uff0c\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u6a21\u578b\u5e76\u884c\u3001\u6570\u636e\u5e76\u884c\u3001\u6d41\u6c34\u5e76\u884c\u6216\u8005\u6df7\u5408\u5e76\u884c\u3002 \u4ee3\u7801 \u00b6 \u4ee5\u4e0b\u811a\u672c\uff0c\u6211\u4eec\u91c7\u7528 consistent \u89c6\u89d2\uff0c\u4f7f\u75282\u4e2a GPU \u8fdb\u884c\u8bad\u7ec3\uff0cconsistent \u7b56\u7565\u4e0b\u9ed8\u8ba4\u7684\u5e76\u884c\u65b9\u5f0f\u4ecd\u7136\u662f \u6570\u636e\u5e76\u884c \u3002\u5173\u4e8e\u5982\u4f55\u5728 consistent \u7b56\u7565\u4e0b\u8bbe\u7f6e \u6a21\u578b\u5e76\u884c \u53ca \u6df7\u5408\u5e76\u884c \u4e0d\u5728\u672c\u6587\u8ba8\u8bba\u8303\u56f4\uff0c\u6211\u4eec\u5728 OneFlow \u7684\u5e76\u884c\u7279\u8272 \u4e2d\u6709\u4e13\u95e8\u7684\u4ecb\u7ecd\u4e0e\u793a\u4f8b\u3002 \u4ee3\u7801\uff1a consistent_strategy.py \u4ee3\u7801\u4e2d\u7684\u91cd\u70b9\u5c06\u5728\u4e0b\u6587\u4ecb\u7ecd\u3002 \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff1a \u4f7f\u7528 flow.config.gpu_device_num \u8bbe\u7f6eGPU\u6570\u76ee\uff1a flow . config . gpu_device_num ( 2 ) \u4f7f\u7528 tp.Numpy.Placeholder \u5b9a\u4e49 consistent \u89c6\u89d2\u4e0b\u7684\u5360\u4f4d\u7b26\uff0c\u56e0\u4e3a Numpy.Placeholder \u4ea7\u51fa\u7684 Blob \u4ee3\u8868\u903b\u8f91\u4e0a\u7684 op \u53ca\u6570\u636e\u5360\u4f4d\u7b26\uff0c\u56e0\u6b64\u6b64\u5904\u7684 BATCH_SIZE \u5c31\u662f\u6574\u4e2a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u6837\u672c\u603b\u548c\uff0c\u4e0d\u9700\u8981\u4eba\u4e3a\u5207\u5206\u6216\u8005\u7ec4\u5408 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u76f4\u63a5\u5f97\u5230\u8bad\u7ec3\u7ed3\u679c\uff0c\u8bad\u7ec3\u7ed3\u679c\u5df2\u7ecf\u7531 OneFlow \u5b8c\u6210\u5206\u5e03\u5f0f\u8fc7\u7a0b\u4e2d\u5207\u5206\u4e0e\u5408\u5e76\u7684\u5de5\u4f5c\u3002\u5728 consistent \u89c6\u89d2\u4e0b\uff0c\u591a\u5361\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e0e\u5355\u5361\u7684\u8bad\u7ec3\uff0c\u4ee3\u7801\u5dee\u522b\u6781\u5c11\uff0c\u4e0a\u624b\u4f53\u9a8c\u51e0\u4e4e\u4e00\u6837 for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u6269\u5c55 \u00b6 \u968f\u7740\u673a\u5668\u5b66\u4e60\u7406\u8bba\u4e0e\u5b9e\u8df5\u53d1\u5c55\uff0c\u73b0\u5728\u5df2\u7ecf\u51fa\u73b0\u4e86\u5f88\u591a\u5355\u673a\u65e0\u6cd5\u8bad\u7ec3\u7684\u7f51\u7edc\uff1b\u4e5f\u51fa\u73b0\u4e86\u8d8a\u6765\u8d8a\u591a\u4ec5\u91c7\u7528\u6570\u636e\u5e76\u884c\u65e0\u6cd5\u5f88\u597d\u5b8c\u6210\u8bad\u7ec3\u7684\u6a21\u578b\u3002 \u91c7\u7528 OneFlow \u7684 consistent \u89c6\u89d2\uff0c\u901a\u8fc7\u81ea\u7531\u9009\u62e9\u53ca\u7ec4\u5408\u5e76\u884c\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\uff0c\u6211\u4eec\u5728 OneFlow \u7684\u5e76\u884c\u7279\u8272 \u8fdb\u884c\u4e86\u4e13\u95e8\u7684\u4ecb\u7ecd\u3002","title":"Global \u4e0e Mirrored \u89c6\u89d2"},{"location":"single_client/extended_topics/consistent_mirrored.html#consistent-mirrored","text":"\u5728\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0cOneFlow \u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u79cd\u89d2\u5ea6\u770b\u5f85\u6570\u636e\u4e0e\u6a21\u578b\u7684\u5173\u7cfb\uff0c\u88ab\u79f0\u4f5c consistent \u89c6\u89d2\u4e0e mirrored \u89c6\u89d2\u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a \u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\u7684\u533a\u522b\u53ca\u9002\u7528\u573a\u666f \u5728\u5206\u5e03\u5f0f\u4efb\u52a1\u4e2d\u91c7\u7528 mirrored \u89c6\u89d2\u53ca\u5176\u7279\u70b9 \u5728\u5206\u5e03\u5f0f\u4efb\u52a1\u4e2d\u91c7\u7528 consistent \u89c6\u89d2\u53ca\u5176\u7279\u70b9","title":"Consistent \u4e0e Mirrored \u89c6\u89d2"},{"location":"single_client/extended_topics/consistent_mirrored.html#_1","text":"\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3 OneFlow \u4e2d\u7684 consistent \u548c mirrored \u89c6\u89d2\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u5206\u5e03\u5f0f\u4efb\u52a1\u4e2d\u7684 \u6570\u636e\u5e76\u884c \u3001 \u6a21\u578b\u5e76\u884c \u4e24\u79cd\u5e76\u884c\u65b9\u5f0f\u7684\u533a\u522b\u3002 \u4e3a\u4e86\u66f4\u76f4\u89c2\u5730\u5c55\u793a\u4e24\u8005\u7684\u5dee\u522b\uff0c\u6211\u4eec\u5148\u770b\u4e00\u4e2a\u7b80\u5355\u7684 Op \uff1a\u77e9\u9635\u4e58\u6cd5\u3002 \u6211\u4eec\u5047\u5b9a\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\uff0c\u5b58\u5728\u4e00\u4e2a\u8f93\u5165\u77e9\u9635 I \uff0c\u901a\u8fc7\u77e9\u9635 I \u4e0e\u77e9\u9635 W \u505a\u77e9\u9635\u4e58\u6cd5\uff0c\u5f97\u5230\u8f93\u51fa\u77e9\u9635 O \u3002 \u5982\u4ee5\u4e0a\u6240\u793a\uff0cI\u7684\u5927\u5c0f\u4e3a(N, C1)\uff0cW\u7684\u5927\u5c0f\u4e3a(C1, C2)\uff0cO\u7684\u5927\u5c0f\u4e3a(N, C2)\u3002 \u7ed3\u5408\u673a\u5668\u5b66\u4e60\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u53ef\u4ee5\u8d4b\u4e88\u4ee5\u4e0a\u51e0\u4e2a\u77e9\u9635\u76f4\u89c2\u610f\u4e49\uff1a I \u77e9\u9635\u4f5c\u4e3a\u8f93\u5165\u77e9\u9635\uff0c\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u6837\u672c\uff0c\u4e00\u884c\u4e2d\u7684\u5404\u5217\u4ee3\u8868\u4e86\u6837\u672c\u7684\u7279\u5f81 W \u77e9\u9635\u4ee3\u8868\u4e86\u6a21\u578b\u53c2\u6570 O \u662f\u9884\u6d4b\u7ed3\u679c\u6216\u8005 label \uff0c\u5982\u679c\u662f\u9884\u6d4b\u4f5c\u4e1a\uff0c\u90a3\u4e48\u5c31\u662f\u7531 I\u3001W \u6c42\u89e3 O\uff0c\u5f97\u5230\u5206\u7c7b\u7ed3\u679c\u7684\u8fc7\u7a0b\uff1b\u5982\u679c\u662f\u8bad\u7ec3\u4f5c\u4e1a\uff0c\u90a3\u4e48\u5c31\u662f\u7531 I \u4e0e O \u6c42\u89e3 W \u7684\u8fc7\u7a0b \u5f53\u4ee5\u4e0a I \u77e9\u9635\u7684\u884c N \u5f88\u5927\uff0c\u8bf4\u660e\u6837\u672c\u5f88\u591a\uff1b\u5982\u679c W \u77e9\u9635\u7684\u5217 C2 \u5f88\u5927\uff0c\u8bf4\u660e\u6a21\u578b\u590d\u6742\uff1b\u5f53\u6837\u672c\u6570\u76ee\u3001\u6a21\u578b\u590d\u6742\u7a0b\u5ea6\u590d\u6742\u5230\u4e00\u5b9a\u7a0b\u5ea6\u65f6\uff0c\u5355\u673a\u5355\u5361\u7684\u786c\u4ef6\u6761\u4ef6\u5df2\u7ecf\u65e0\u6cd5\u627f\u8f7d\u8bad\u7ec3\u4f5c\u4e1a\uff0c\u5c31\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u8bad\u7ec3\u3002\u800c\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9 \u6570\u636e\u5e76\u884c \u548c \u6a21\u578b\u5e76\u884c \u3002 \u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\uff0c\u6211\u4eec\u5148\u7528\u4e0b\u56fe\u4f5c\u4e3a\u77e9\u9635\u76f8\u4e58 Op \u7684\u793a\u4f8b\uff1a \u7b49\u5f0f\u5de6\u8fb9\u7b2c1\u4e2a\u7070\u8272\u7684\u77e9\u9635\u4ee3\u8868\u8f93\u5165\u6837\u672c\uff0c\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u6837\u672c\uff1b\u7b49\u5f0f\u5de6\u8fb9\u7b2c2\u4e2a\u84dd\u8272\u7684\u77e9\u9635\u4ee3\u8868\u6a21\u578b\u3002 \u5728\u540e\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4ee5\u4e0a\u7684 op\uff0c\u5728\u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\u4e0b\uff0c\u4e0d\u540c\u7684\u201c\u5207\u5206\u201d\u65b9\u5f0f\u3002","title":"\u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c"},{"location":"single_client/extended_topics/consistent_mirrored.html#_2","text":"\u5728 \u6570\u636e\u5e76\u884c \u4e2d\uff0c\u5c06\u6837\u672c\u6570\u636e\u8fdb\u884c\u5207\u5206\uff0c \u5207\u5206\u540e\u7684\u6570\u636e \u88ab\u9001\u81f3\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\uff0c\u4e0e \u5b8c\u6574\u7684\u6a21\u578b \u8fdb\u884c\u8fd0\u7b97\uff0c\u6700\u540e\u5c06\u591a\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u8fdb\u884c\u5408\u5e76\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"\u6570\u636e\u5e76\u884c\u56fe\u793a"},{"location":"single_client/extended_topics/consistent_mirrored.html#_3","text":"\u5728 \u6a21\u578b\u5e76\u884c \u4e2d\uff0c\u5c06\u6a21\u578b\u8fdb\u884c\u5207\u5206\uff0c \u5b8c\u6574\u7684\u6570\u636e \u88ab\u9001\u81f3\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\uff0c\u4e0e \u5207\u5206\u540e\u7684\u6a21\u578b \u8fdb\u884c\u8fd0\u7b97\uff0c\u6700\u540e\u5c06\u591a\u4e2a\u8282\u70b9\u7684\u8fd0\u7b97\u7ed3\u679c\u5408\u5e76\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u603b\u4e4b\uff1a \u6570\u636e\u5e76\u884c\u4e0b\uff0c\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u7684\u6a21\u578b\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u6570\u636e\u88ab\u5207\u5206\uff1b \u6a21\u578b\u5e76\u884c\u4e0b\uff0c\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u90fd\u63a5\u6536\u4e00\u6837\u7684\u5b8c\u6574\u6570\u636e\uff0c \u6a21\u578b\u88ab\u5207\u5206\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4ecb\u7ecd OneFlow \u770b\u5f85\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e24\u79cd\u89c6\u89d2\uff08 mirrored \u89c6\u89d2\u4e0e consistent \u89c6\u89d2\uff09\uff0c\u5b66\u4e60\u5728\u4e0d\u540c\u7684\u89c6\u89d2\u4e0b\u5982\u4f55\u9009\u62e9\u5e76\u884c\u65b9\u5f0f\u3002","title":"\u6a21\u578b\u5e76\u884c\u56fe\u793a"},{"location":"single_client/extended_topics/consistent_mirrored.html#_4","text":"\u5728 \u4f7f\u7528OneFlow\u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u53ca \u5b9a\u4e49\u4e0e\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 \u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u4e86 \u6570\u636e\u5360\u4f4d\u7b26 \u4e0e Blob \u7684\u6982\u5ff5\u3002 \u5b9e\u9645\u4e0a\uff0c\u9488\u5bf9\u5e76\u884c\uff0cOneFlow\u7684\u6570\u636e\u5360\u4f4d\u7b26\u8fd8\u53ef\u4ee5\u7ec6\u5206\u4e3a \u4e24\u7c7b\uff1a\u5206\u522b\u901a\u8fc7\u63a5\u53e3 flow.typing.Numpy.Placeholder \u548c flow.typing.ListNumpy.Placeholder \u6784\u9020\u7684\u5360\u4f4d\u7b26\uff0c\u5206\u522b\u5bf9\u5e94 Consistent \u4e0e Mirrored \u60c5\u51b5\u3002 \u6211\u4eec\u5c06\u5728\u4e0b\u6587\u4e2d\u770b\u5230\u5b83\u4eec\u7684\u5177\u4f53\u5e94\u7528\u3002","title":"\u4e24\u7c7b\u5360\u4f4d\u7b26"},{"location":"single_client/extended_topics/consistent_mirrored.html#oneflow-mirrored","text":"\u5176\u5b83\u7684\u6846\u67b6\uff0c\u5982 TensorFlow\u3001Pytorch \u5747\u652f\u6301 mirroed view \uff1bOneFlow \u7684 mirrored \u89c6\u89d2\u4e0e\u5b83\u4eec\u7c7b\u4f3c\u3002 \u5728 mirrored \u89c6\u89d2\u4e0b\uff0c\u6a21\u578b\u88ab\u955c\u50cf\u590d\u5236\u5230\u6bcf\u5f20\u5361\u4e0a\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6a21\u578b\u6784\u56fe\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u53ea\u80fd\u91c7\u7528 \u6570\u636e\u5e76\u884c \u3002 \u5728 OneFlow \u4e2d\uff0c\u9ed8\u8ba4\u4e0d\u662f mirrored \u7b56\u7565\uff0c\u9700\u8981\u901a\u8fc7 flow.function_config() \u7684 default_logical_view \u63a5\u53e3\u6765\u663e\u5f0f\u6307\u5b9a\uff1a func_config = flow . function_config () func_config . default_logical_view ( flow . scope . mirrored_view ()) \u5728 mirrored_view \u4e0b\uff0c\u53ea\u80fd\u91c7\u7528 \u6570\u636e\u5e76\u884c \u7684\u5e76\u884c\u6a21\u5f0f\uff0c\u5728\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6570\u636e\u6309\u7167\u8bad\u7ec3\u8282\u70b9\u7684\u6570\u76ee\uff08\u663e\u5361\u603b\u6570\uff09\u8fdb\u884c\u5e73\u5747\u5207\u5206\uff0c\u5e76\u5c06\u5207\u5206\u540e\u7684\u6570\u636e\u653e\u5165 list \u4e2d\u8fdb\u884c\u4f20\u9012\uff0c list \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5c31\u662f\u540e\u5206\u914d\u7ed9 \u5404\u4e2a\u663e\u5361 \u7684\u5b9e\u9645\u6570\u636e\u3002 \u8bad\u7ec3\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u4e5f\u53d8\u4f5c\u4e86 flow.typing.ListNumpy \uff0c\u662f\u4e00\u4e2a list \uff0c list \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5bf9\u5e94\u4e86\u6bcf\u5f20\u5361\u4e0a\u8bad\u7ec3\u7ed3\u679c\u3002 \u4ee5\u4e0a\u63d0\u53ca\u7684 list \u4e2d\u7684\u6240\u6709\u5143\u7d20 \u62fc\u63a5\u5728\u4e00\u8d77 \uff0c\u624d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 BATCH\u3002\u800cOneFlow\u4f1a\u81ea\u52a8\u6267\u884c\u8fd9\u4e2a\u62fc\u63a5\u7684\u8fc7\u7a0b\uff0c\u65e0\u9700\u7528\u6237\u8fdb\u884c\u591a\u4f59\u7684\u64cd\u4f5c\u3002","title":"\u5728 OneFlow \u4e2d\u4f7f\u7528 mirrored \u89c6\u89d2"},{"location":"single_client/extended_topics/consistent_mirrored.html#_5","text":"\u5728\u4ee5\u4e0b\u7684\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u91c7\u7528 mirrored_view \u89c6\u89d2\uff0c\u4f7f\u75282\u4e2a GPU \u8fdb\u884c\u8bad\u7ec3\u3002 \u4ee3\u7801\uff1a mirrored_strategy.py \u91cd\u70b9\u90e8\u5206\u7684\u8bf4\u660e\u8bf7\u89c1\u540e\u6587\u201c\u4ee3\u7801\u89e3\u6790\u201d\u90e8\u5206\u3002","title":"\u4ee3\u7801"},{"location":"single_client/extended_topics/consistent_mirrored.html#_6","text":"\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff1a \u4f7f\u7528 flow.config.gpu_device_num \u8bbe\u7f6e GPU \u6570\u76ee\u4e3a2 flow . config . gpu_device_num ( 2 ) flow.typing.ListNumpy.Placeholder \u5b9a\u4e49\u7684\u6837\u672c\u6570\u76ee\uff0c\u662f\u88ab\u5207\u5206\u540e\u7684\u6570\u76ee\uff0c\u5373\u4ee3\u7801\u4e2d\u7684 BATCH_SIZE_PER_GPU \u4e0e\u603b\u6837\u672c\u6570 BATCH_SIZE \u7684\u5173\u7cfb\u4e3a\uff1a BATCH_SIZE=BATCH_SIZE_PER_GPU\u00d7GPU_NUM def train_job ( images : tp . ListNumpy . Placeholder (( BATCH_SIZE_PER_GPU , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . ListNumpy . Placeholder (( BATCH_SIZE_PER_GPU ,), dtype = flow . int32 ), ) -> tp . ListNumpy : \u5207\u5206\u540e\u7684\u6570\u636e\uff0c\u9700\u8981\u4fdd\u5b58\u81f3 list \u4e2d\u4f20\u5165\u8bad\u7ec3\u51fd\u6570\uff1b list \u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u4e0e \u53c2\u4e0e\u8bad\u7ec3\u7684GPU\u6570\u76ee \u4e00\u81f4\uff1bOneFlow \u5c06\u6309\u7167 list \u4e2d\u5143\u7d20\u987a\u5e8f\uff0c\u5411\u5404\u5361\u4f20\u9012\u6570\u636e( list \u4e2d\u7b2c i \u4e2a\u5143\u7d20\u5bf9\u5e94\u7b2c i \u5f20\u5361)\uff1a images1 = images [: BATCH_SIZE_PER_GPU ] images2 = images [ BATCH_SIZE_PER_GPU :] labels1 = labels [: BATCH_SIZE_PER_GPU ] labels2 = labels [ BATCH_SIZE_PER_GPU :] imgs_list = [ images1 , images2 ] labels_list = [ labels1 , labels2 ] loss = np . array ( train_job ( imgs_list , labels_list )) \u8fd4\u56de\u7684\u5f97\u5230\u7684\u7ed3\u679c loss \uff0c\u662f\u4e00\u4e2a list \u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8be5 list \u4e2d\u5143\u7d20\u4e2a\u6570\u5e94\u4e0e \u53c2\u4e0e\u8bad\u7ec3\u7684GPU\u6570\u76ee \u4e00\u81f4\uff1b list \u4e2d\u7684\u7b2ci\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e86\u7b2c i \u5f20 GPU \u5361\u4e0a\u7684\u8fd0\u7b97\u7ed3\u679c\u3002\u4f46\u7531\u4e8eOneFlow\u4f1a\u5728\u540e\u53f0\u81ea\u52a8\u6267\u884c\u62fc\u63a5\u64cd\u4f5c\uff0c\u6211\u4eec\u65e0\u9700\u518d\u5728\u4ee3\u7801\u4e2d\u8fdb\u884c\u591a\u4f59\u7684\u62fc\u63a5\u6b65\u9aa4\u3002\u53ea\u9700\u5c06loss\u5408\u5e76\u540e\u8fdb\u884c\u8ba1\u7b97\u5e76\u6253\u5370\u5176\u5e73\u5747\u503c\u3002 total_loss = np . array ([ * loss [ 0 ], * loss [ 1 ]]) if i % 20 == 0 : print ( loss . mean ())","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"single_client/extended_topics/consistent_mirrored.html#oneflow-consistent","text":"\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 mirrored \u89c6\u89d2\uff0c\u77e5\u9053\u5728 mirrored_view \u89c6\u89d2\u4e0b\uff0c\u6837\u672c\u4f1a\u88ab\u5e73\u5747\u5206\u914d\u5230\u591a\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u6a21\u578b\u4e0a\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u4e0a\u7684\u7ed3\u679c\uff0c\u9700\u8981\u7ec4\u88c5\u624d\u80fd\u5f97\u5230\u771f\u6b63\u5b8c\u6574\u7684 BATCH\uff0c\u5bf9\u5e94\u4e86\u903b\u8f91\u4e0a\u7684 op \u4e0e Blob\u3002 \u9664\u4e86 mirrored \u89c6\u89d2\u5916\uff0cOneFlow \u8fd8\u63d0\u4f9b\u4e86 consistent \u89c6\u89d2\u3002consistent \u89c6\u89d2\u662f OneFlow \u7684\u4e00\u5927\u7279\u8272\uff0c\u4e0e mirrored \u89c6\u89d2\u76f8\u6bd4\u6709\u5f88\u5927\u7684\u4f18\u52bf\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b OneFlow \u91c7\u53d6\u7684\u662f consistent \u89c6\u89d2\uff0c\u5982\u679c\u60f3\u663e\u5f0f\u58f0\u660e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u8bbe\u7f6e\uff1a config = flow . function_config () config . default_logical_view ( flow . scope . consistent_view ()) \u4e4b\u6240\u4ee5\u8bf4 consistent \u89c6\u89d2\u662f OneFlow \u7684\u4e00\u5927\u7279\u8272\uff0c\u662f\u56e0\u4e3a\u5728 OneFlow \u7684\u8bbe\u8ba1\u4e2d\uff0c\u82e5\u91c7\u7528 consistent_view \uff0c\u90a3\u4e48\u4ece\u7528\u6237\u7684\u89c6\u89d2\u770b\uff0c\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u591a\u4e2a\u8bbe\u5907\u5c06\u83b7\u5f97 \u903b\u8f91\u4e0a\u7684\u7edf\u4e00 \uff0c\u540c\u6837\u4ee5\u672c\u6587\u5f00\u5934\u7684\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8 \u77e9\u9635\u4e58\u6cd5 \u672c\u8eab\u6570\u5b66\u8ba1\u7b97\u4e0a\u7684\u610f\u4e49\uff1b\u800c\u5728\u5de5\u7a0b\u4e0a\u5230\u5e95\u5982\u4f55\u914d\u7f6e\u3001\u91c7\u7528\u6a21\u578b\u5e76\u884c\u8fd8\u662f\u6570\u636e\u5e76\u884c\u7b49\u7ec6\u8282\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528 OneFlow \u7684\u63a5\u53e3\u8f7b\u677e\u5b8c\u6210\u3002OneFlow \u5185\u90e8\u4f1a\u9ad8\u6548\u53ef\u9760\u5730\u89e3\u51b3 \u6570\u636e\u5e76\u884c\u4e2d\u7684\u6570\u636e\u5207\u5206 \u3001 \u6a21\u578b\u5e76\u884c\u4e2d\u7684\u6a21\u578b\u5207\u5206 \u3001 \u4e32\u884c\u903b\u8f91 \u7b49\u95ee\u9898\u3002 \u5728 OneFlow \u7684 consistent \u89c6\u89d2\u4e0b\uff0c\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u6a21\u578b\u5e76\u884c\u3001\u6570\u636e\u5e76\u884c\u3001\u6d41\u6c34\u5e76\u884c\u6216\u8005\u6df7\u5408\u5e76\u884c\u3002","title":"\u5728 OneFlow \u4e2d\u4f7f\u7528 consistent \u89c6\u89d2"},{"location":"single_client/extended_topics/consistent_mirrored.html#_7","text":"\u4ee5\u4e0b\u811a\u672c\uff0c\u6211\u4eec\u91c7\u7528 consistent \u89c6\u89d2\uff0c\u4f7f\u75282\u4e2a GPU \u8fdb\u884c\u8bad\u7ec3\uff0cconsistent \u7b56\u7565\u4e0b\u9ed8\u8ba4\u7684\u5e76\u884c\u65b9\u5f0f\u4ecd\u7136\u662f \u6570\u636e\u5e76\u884c \u3002\u5173\u4e8e\u5982\u4f55\u5728 consistent \u7b56\u7565\u4e0b\u8bbe\u7f6e \u6a21\u578b\u5e76\u884c \u53ca \u6df7\u5408\u5e76\u884c \u4e0d\u5728\u672c\u6587\u8ba8\u8bba\u8303\u56f4\uff0c\u6211\u4eec\u5728 OneFlow \u7684\u5e76\u884c\u7279\u8272 \u4e2d\u6709\u4e13\u95e8\u7684\u4ecb\u7ecd\u4e0e\u793a\u4f8b\u3002 \u4ee3\u7801\uff1a consistent_strategy.py \u4ee3\u7801\u4e2d\u7684\u91cd\u70b9\u5c06\u5728\u4e0b\u6587\u4ecb\u7ecd\u3002","title":"\u4ee3\u7801"},{"location":"single_client/extended_topics/consistent_mirrored.html#_8","text":"\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff1a \u4f7f\u7528 flow.config.gpu_device_num \u8bbe\u7f6eGPU\u6570\u76ee\uff1a flow . config . gpu_device_num ( 2 ) \u4f7f\u7528 tp.Numpy.Placeholder \u5b9a\u4e49 consistent \u89c6\u89d2\u4e0b\u7684\u5360\u4f4d\u7b26\uff0c\u56e0\u4e3a Numpy.Placeholder \u4ea7\u51fa\u7684 Blob \u4ee3\u8868\u903b\u8f91\u4e0a\u7684 op \u53ca\u6570\u636e\u5360\u4f4d\u7b26\uff0c\u56e0\u6b64\u6b64\u5904\u7684 BATCH_SIZE \u5c31\u662f\u6574\u4e2a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u6837\u672c\u603b\u548c\uff0c\u4e0d\u9700\u8981\u4eba\u4e3a\u5207\u5206\u6216\u8005\u7ec4\u5408 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u76f4\u63a5\u5f97\u5230\u8bad\u7ec3\u7ed3\u679c\uff0c\u8bad\u7ec3\u7ed3\u679c\u5df2\u7ecf\u7531 OneFlow \u5b8c\u6210\u5206\u5e03\u5f0f\u8fc7\u7a0b\u4e2d\u5207\u5206\u4e0e\u5408\u5e76\u7684\u5de5\u4f5c\u3002\u5728 consistent \u89c6\u89d2\u4e0b\uff0c\u591a\u5361\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e0e\u5355\u5361\u7684\u8bad\u7ec3\uff0c\u4ee3\u7801\u5dee\u522b\u6781\u5c11\uff0c\u4e0a\u624b\u4f53\u9a8c\u51e0\u4e4e\u4e00\u6837 for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ())","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"single_client/extended_topics/consistent_mirrored.html#_9","text":"\u968f\u7740\u673a\u5668\u5b66\u4e60\u7406\u8bba\u4e0e\u5b9e\u8df5\u53d1\u5c55\uff0c\u73b0\u5728\u5df2\u7ecf\u51fa\u73b0\u4e86\u5f88\u591a\u5355\u673a\u65e0\u6cd5\u8bad\u7ec3\u7684\u7f51\u7edc\uff1b\u4e5f\u51fa\u73b0\u4e86\u8d8a\u6765\u8d8a\u591a\u4ec5\u91c7\u7528\u6570\u636e\u5e76\u884c\u65e0\u6cd5\u5f88\u597d\u5b8c\u6210\u8bad\u7ec3\u7684\u6a21\u578b\u3002 \u91c7\u7528 OneFlow \u7684 consistent \u89c6\u89d2\uff0c\u901a\u8fc7\u81ea\u7531\u9009\u62e9\u53ca\u7ec4\u5408\u5e76\u884c\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\uff0c\u6211\u4eec\u5728 OneFlow \u7684\u5e76\u884c\u7279\u8272 \u8fdb\u884c\u4e86\u4e13\u95e8\u7684\u4ecb\u7ecd\u3002","title":"\u6269\u5c55"},{"location":"single_client/extended_topics/how_to_convert_image_to_ofrecord.html","text":"\u5c06\u56fe\u7247\u6587\u4ef6\u5236\u4f5c\u4e3a OFRecord \u6570\u636e\u96c6 \u00b6 \u5728 OFRecord \u6570\u636e\u683c\u5f0f \u548c \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 \u4e2d\uff0c\u6211\u4eec\u5206\u522b\u5b66\u4e60\u4e86 OFRecord \u6570\u636e\u683c\u5f0f\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u5176\u5b83\u6570\u636e\u96c6\u8f6c\u4e3a OFRecord \u6570\u636e\u96c6\u5e76\u4f7f\u7528\u3002 \u672c\u6587\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u5c06\u56fe\u7247\u6587\u4ef6\u5236\u4f5c\u4e3a OFRecord \u6570\u636e\u96c6\uff0c\u5e76\u63d0\u4f9b\u4e86\u76f8\u5173\u7684\u5236\u4f5c\u811a\u672c\uff0c\u65b9\u4fbf\u7528\u6237\u76f4\u63a5\u4f7f\u7528\u6216\u8005\u5728\u6b64\u57fa\u7840\u4e0a\u4fee\u6539\u3002\u5185\u5bb9\u5305\u62ec\uff1a \u5236\u4f5c\u57fa\u4e8e MNIST \u624b\u5199\u6570\u5b57\u6570\u636e\u96c6\u7684 OFRecord \u6570\u636e\u96c6 OFRecord \u7684\u7f16\u89e3\u7801\u65b9\u5f0f \u5728\u81ea\u5236\u7684 OFRecord \u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u8bad\u7ec3 \u7528\u56fe\u7247\u6587\u4ef6\u5236\u4f5c OFRecord \u6587\u4ef6 \u00b6 \u6211\u4eec\u4f7f\u7528 MNIST \u6570\u636e\u96c6\u4e2d\u7684\u56fe\u7247\u6587\u4ef6 \u6765\u5236\u4f5c\u4e00\u4e2a OFRecord \u683c\u5f0f\u6587\u4ef6\u3002 \u4f5c\u4e3a\u793a\u4f8b\uff0c\u6211\u4eec\u4ec5\u4f7f\u7528\u4e8650\u5f20\u56fe\u7247\uff0c\u76f8\u5173\u811a\u672c\u548c\u6570\u636e\u96c6\u7684\u4e0b\u8f7d\u5730\u5740\u4e3a img2ofrecord \u4e0b\u8f7d\u76f8\u5173\u538b\u7f29\u5305\u5e76\u89e3\u538b $ wget https://oneflow-static.oss-cn-beijing.aliyuncs.com/oneflow-tutorial-attachments/img2ofrecord.zip $ unzip img2ofrecord.zip \u8fdb\u5165\u5230\u5bf9\u5e94\u76ee\u5f55\uff0c\u5e76\u8fd0\u884c OFRecord \u5236\u4f5c\u811a\u672c img2ofrecord.py $ cd ./img_to_ofrecord $ python img2ofrecord.py --part_num=5 --save_dir=./dataset/ --img_format=.png --image_root=./images/train_set/ \u811a\u672c\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u5185\u5bb9 The image root is: ./images/train_set/ The amount of OFRecord data part is: 5 The directory of Labels is: ./images/train_label/label.txt The image format is: .png The OFRecord save directory is: ./dataset/ Start Processing...... ./images/train_set/00000030_3.png feature saved ./images/train_set/00000034_0.png feature saved ./images/train_set/00000026_4.png feature saved ./images/train_set/00000043_9.png feature saved ...... Process image successfully !!! \u81f3\u6b64\u6211\u4eec OFRecord \u6587\u4ef6\u5236\u4f5c\u5b8c\u6bd5\uff0c\u5e76\u4fdd\u5b58\u5728 ./dataset \u76ee\u5f55\u4e0b \u4ee3\u7801\u89e3\u8bfb \u00b6 \u6574\u4e2a\u4ee3\u7801\u76ee\u5f55\u6784\u9020\u5982\u4e0b img_to_ofrecord \u251c\u2500\u2500 images \u251c\u2500\u2500 train_set \u251c\u2500\u2500 00000000_5.png \u251c\u2500\u2500 00000001_0.png \u251c\u2500\u2500 00000002_4.png ...... \u251c\u2500\u2500 train_label \u251c\u2500\u2500 label.txt \u251c\u2500\u2500 img2ofrecord.py \u251c\u2500\u2500 lenet_train.py images \u76ee\u5f55\u5b58\u653e\u539f\u59cb\u793a\u4f8b\u8bad\u7ec3\u6570\u636e\u96c6\u4ee5\u53ca\u6807\u7b7e\u6587\u4ef6 \u6211\u4eec\u7684\u6807\u7b7e\u6587\u4ef6\u662f\u4ee5 json \u683c\u5f0f\u5b58\u50a8\u7684\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a {\"00000030_3.png\": 3} {\"00000034_0.png\": 0} {\"00000026_4.png\": 4} {\"00000043_9.png\": 9} {\"00000047_5.png\": 5} {\"00000003_1.png\": 1} ...... img2ofrecord.py \u811a\u672c\u5c06 MNIST \u56fe\u7247\u8f6c\u6362\u6210 OFRecord \u6570\u636e\u96c6 lenet_train.py \u811a\u672c\u5219\u8bfb\u53d6\u6211\u4eec\u5236\u4f5c\u597d\u7684 OFRecord \u6570\u636e\u96c6\uff0c\u5e76\u4f7f\u7528 LeNet \u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u3002 img2ofrecord.py \u7684\u547d\u4ee4\u884c\u9009\u9879\u5982\u4e0b\uff1a image_root \u6307\u5b9a\u56fe\u7247\u7684\u6839\u76ee\u5f55\u8def\u5f84 part_num \u6307\u5b9a\u751f\u6210 OFRecord \u6587\u4ef6\u4e2a\u6570\uff0c\u5982\u679c\u8be5\u6570\u76ee\u5927\u4e8e\u603b\u56fe\u7247\u6570\u76ee\uff0c\u4f1a\u62a5\u9519 label_dir \u6307\u5b9a\u6807\u7b7e\u7684\u76ee\u5f55\u8def\u5f84 img_format \u6307\u5b9a\u56fe\u7247\u7684\u683c\u5f0f save_dir \u6307\u5b9a OFRecord \u6587\u4ef6\u4fdd\u5b58\u7684\u76ee\u5f55 \u811a\u672c\u7684\u7f16\u7801\u6d41\u7a0b \u00b6 \u4e0e OFRecord \u6587\u4ef6\u7f16\u7801\u7684\u76f8\u5173\u903b\u8f91\u4e5f\u5728 img2ofrecord.py \u5185\uff0c\u5176\u7f16\u7801\u6d41\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u5bf9\u8bfb\u53d6\u8fdb\u6765\u7684\u56fe\u7247\u6570\u636e\u8fdb\u884c\u7f16\u7801 def encode_img_file ( filename , ext = \".jpg\" ): img = cv2 . imread ( filename ) encoded_data = cv2 . imencode ( ext , img )[ 1 ] return encoded_data . tostring () \u8fd9\u91cc\u7684 ext \u662f\u56fe\u7247\u7f16\u7801\u683c\u5f0f\uff0c\u76ee\u524d\uff0cOneFlow \u56fe\u7247\u7f16\u89e3\u7801\u652f\u6301\u7684\u683c\u5f0f\u4e0e OpenCV \u7684\u4e00\u81f4\uff0c\u53ef\u53c2\u89c1 cv::ImwriteFlags \uff0c\u5305\u62ec\uff1a JPEG\uff0c\u4e00\u79cd\u6700\u5e38\u89c1\u7684\u6709\u635f\u7f16\u7801\u683c\u5f0f\uff0c\u53ef\u53c2\u8003 JPEG PNG\uff0c\u4e00\u79cd\u5e38\u89c1\u7684\u65e0\u635f\u4f4d\u56fe\u7f16\u7801\u683c\u5f0f\uff0c\u53ef\u53c2\u8003 Portable Network Graphics TIFF\uff0c\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u538b\u7f29\u7f16\u7801\u683c\u5f0f\uff0c\u53ef\u53c2\u8003 Tagged Image File Format \u7136\u540e\uff0c\u8f6c\u5316\u6210 Feature \u7684\u5f62\u5f0f\uff0c\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u5e76\u5c06\u6570\u636e\u957f\u5ea6\u5199\u5165\u5230\u6587\u4ef6\u4e2d def ndarray2ofrecords ( dsfile , dataname , encoded_data , labelname , encoded_label ): topack = { dataname : bytes_feature ( encoded_data ), labelname : int32_feature ( encoded_label )} ofrecord_features = ofrecord . OFRecord ( feature = topack ) serilizedBytes = ofrecord_features . SerializeToString () length = ofrecord_features . ByteSize () dsfile . write ( struct . pack ( \"q\" , length )) dsfile . write ( serilizedBytes ) \u4f7f\u7528\u81ea\u5236\u7684 OFRecord \u6570\u636e\u96c6\u8fdb\u884c\u8bad\u7ec3 \u00b6 \u6211\u4eec\u8fd0\u884c\u76ee\u5f55\u4e0b\u7684 lenet_train.py \uff0c\u5b83\u5c06\u8bfb\u53d6\u6211\u4eec\u521a\u5236\u4f5c\u597d\u7684 OFRecord \u6570\u636e\u96c6\uff0c\u5728 Lenet \u6a21\u578b\u4e0a\u8fdb\u884c\u8bad\u7ec3 \u8be5\u8bad\u7ec3\u811a\u672c\u8f93\u51fa\u5982\u4e0b\uff1a [6.778578] [2.0212684] [1.3814741] [0.47514156] [0.13277876] [0.16388433] [0.03788032] [0.01225162] ...... \u81f3\u6b64\uff0c\u6211\u4eec\u6210\u529f\u5b8c\u6210\u4e86\u6570\u636e\u96c6\u5236\u4f5c\u3001\u8bfb\u53d6\u4e0e\u8bad\u7ec3\u6574\u4e2a\u6d41\u7a0b\u3002","title":"\u5c06\u56fe\u7247\u6587\u4ef6\u5236\u4f5c\u4e3a OFRecord \u6570\u636e\u96c6"},{"location":"single_client/extended_topics/how_to_convert_image_to_ofrecord.html#ofrecord","text":"\u5728 OFRecord \u6570\u636e\u683c\u5f0f \u548c \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 \u4e2d\uff0c\u6211\u4eec\u5206\u522b\u5b66\u4e60\u4e86 OFRecord \u6570\u636e\u683c\u5f0f\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u5176\u5b83\u6570\u636e\u96c6\u8f6c\u4e3a OFRecord \u6570\u636e\u96c6\u5e76\u4f7f\u7528\u3002 \u672c\u6587\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u5c06\u56fe\u7247\u6587\u4ef6\u5236\u4f5c\u4e3a OFRecord \u6570\u636e\u96c6\uff0c\u5e76\u63d0\u4f9b\u4e86\u76f8\u5173\u7684\u5236\u4f5c\u811a\u672c\uff0c\u65b9\u4fbf\u7528\u6237\u76f4\u63a5\u4f7f\u7528\u6216\u8005\u5728\u6b64\u57fa\u7840\u4e0a\u4fee\u6539\u3002\u5185\u5bb9\u5305\u62ec\uff1a \u5236\u4f5c\u57fa\u4e8e MNIST \u624b\u5199\u6570\u5b57\u6570\u636e\u96c6\u7684 OFRecord \u6570\u636e\u96c6 OFRecord \u7684\u7f16\u89e3\u7801\u65b9\u5f0f \u5728\u81ea\u5236\u7684 OFRecord \u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u8bad\u7ec3","title":"\u5c06\u56fe\u7247\u6587\u4ef6\u5236\u4f5c\u4e3a OFRecord \u6570\u636e\u96c6"},{"location":"single_client/extended_topics/how_to_convert_image_to_ofrecord.html#ofrecord_1","text":"\u6211\u4eec\u4f7f\u7528 MNIST \u6570\u636e\u96c6\u4e2d\u7684\u56fe\u7247\u6587\u4ef6 \u6765\u5236\u4f5c\u4e00\u4e2a OFRecord \u683c\u5f0f\u6587\u4ef6\u3002 \u4f5c\u4e3a\u793a\u4f8b\uff0c\u6211\u4eec\u4ec5\u4f7f\u7528\u4e8650\u5f20\u56fe\u7247\uff0c\u76f8\u5173\u811a\u672c\u548c\u6570\u636e\u96c6\u7684\u4e0b\u8f7d\u5730\u5740\u4e3a img2ofrecord \u4e0b\u8f7d\u76f8\u5173\u538b\u7f29\u5305\u5e76\u89e3\u538b $ wget https://oneflow-static.oss-cn-beijing.aliyuncs.com/oneflow-tutorial-attachments/img2ofrecord.zip $ unzip img2ofrecord.zip \u8fdb\u5165\u5230\u5bf9\u5e94\u76ee\u5f55\uff0c\u5e76\u8fd0\u884c OFRecord \u5236\u4f5c\u811a\u672c img2ofrecord.py $ cd ./img_to_ofrecord $ python img2ofrecord.py --part_num=5 --save_dir=./dataset/ --img_format=.png --image_root=./images/train_set/ \u811a\u672c\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u5185\u5bb9 The image root is: ./images/train_set/ The amount of OFRecord data part is: 5 The directory of Labels is: ./images/train_label/label.txt The image format is: .png The OFRecord save directory is: ./dataset/ Start Processing...... ./images/train_set/00000030_3.png feature saved ./images/train_set/00000034_0.png feature saved ./images/train_set/00000026_4.png feature saved ./images/train_set/00000043_9.png feature saved ...... Process image successfully !!! \u81f3\u6b64\u6211\u4eec OFRecord \u6587\u4ef6\u5236\u4f5c\u5b8c\u6bd5\uff0c\u5e76\u4fdd\u5b58\u5728 ./dataset \u76ee\u5f55\u4e0b","title":"\u7528\u56fe\u7247\u6587\u4ef6\u5236\u4f5c OFRecord \u6587\u4ef6"},{"location":"single_client/extended_topics/how_to_convert_image_to_ofrecord.html#_1","text":"\u6574\u4e2a\u4ee3\u7801\u76ee\u5f55\u6784\u9020\u5982\u4e0b img_to_ofrecord \u251c\u2500\u2500 images \u251c\u2500\u2500 train_set \u251c\u2500\u2500 00000000_5.png \u251c\u2500\u2500 00000001_0.png \u251c\u2500\u2500 00000002_4.png ...... \u251c\u2500\u2500 train_label \u251c\u2500\u2500 label.txt \u251c\u2500\u2500 img2ofrecord.py \u251c\u2500\u2500 lenet_train.py images \u76ee\u5f55\u5b58\u653e\u539f\u59cb\u793a\u4f8b\u8bad\u7ec3\u6570\u636e\u96c6\u4ee5\u53ca\u6807\u7b7e\u6587\u4ef6 \u6211\u4eec\u7684\u6807\u7b7e\u6587\u4ef6\u662f\u4ee5 json \u683c\u5f0f\u5b58\u50a8\u7684\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a {\"00000030_3.png\": 3} {\"00000034_0.png\": 0} {\"00000026_4.png\": 4} {\"00000043_9.png\": 9} {\"00000047_5.png\": 5} {\"00000003_1.png\": 1} ...... img2ofrecord.py \u811a\u672c\u5c06 MNIST \u56fe\u7247\u8f6c\u6362\u6210 OFRecord \u6570\u636e\u96c6 lenet_train.py \u811a\u672c\u5219\u8bfb\u53d6\u6211\u4eec\u5236\u4f5c\u597d\u7684 OFRecord \u6570\u636e\u96c6\uff0c\u5e76\u4f7f\u7528 LeNet \u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u3002 img2ofrecord.py \u7684\u547d\u4ee4\u884c\u9009\u9879\u5982\u4e0b\uff1a image_root \u6307\u5b9a\u56fe\u7247\u7684\u6839\u76ee\u5f55\u8def\u5f84 part_num \u6307\u5b9a\u751f\u6210 OFRecord \u6587\u4ef6\u4e2a\u6570\uff0c\u5982\u679c\u8be5\u6570\u76ee\u5927\u4e8e\u603b\u56fe\u7247\u6570\u76ee\uff0c\u4f1a\u62a5\u9519 label_dir \u6307\u5b9a\u6807\u7b7e\u7684\u76ee\u5f55\u8def\u5f84 img_format \u6307\u5b9a\u56fe\u7247\u7684\u683c\u5f0f save_dir \u6307\u5b9a OFRecord \u6587\u4ef6\u4fdd\u5b58\u7684\u76ee\u5f55","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"single_client/extended_topics/how_to_convert_image_to_ofrecord.html#_2","text":"\u4e0e OFRecord \u6587\u4ef6\u7f16\u7801\u7684\u76f8\u5173\u903b\u8f91\u4e5f\u5728 img2ofrecord.py \u5185\uff0c\u5176\u7f16\u7801\u6d41\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u5bf9\u8bfb\u53d6\u8fdb\u6765\u7684\u56fe\u7247\u6570\u636e\u8fdb\u884c\u7f16\u7801 def encode_img_file ( filename , ext = \".jpg\" ): img = cv2 . imread ( filename ) encoded_data = cv2 . imencode ( ext , img )[ 1 ] return encoded_data . tostring () \u8fd9\u91cc\u7684 ext \u662f\u56fe\u7247\u7f16\u7801\u683c\u5f0f\uff0c\u76ee\u524d\uff0cOneFlow \u56fe\u7247\u7f16\u89e3\u7801\u652f\u6301\u7684\u683c\u5f0f\u4e0e OpenCV \u7684\u4e00\u81f4\uff0c\u53ef\u53c2\u89c1 cv::ImwriteFlags \uff0c\u5305\u62ec\uff1a JPEG\uff0c\u4e00\u79cd\u6700\u5e38\u89c1\u7684\u6709\u635f\u7f16\u7801\u683c\u5f0f\uff0c\u53ef\u53c2\u8003 JPEG PNG\uff0c\u4e00\u79cd\u5e38\u89c1\u7684\u65e0\u635f\u4f4d\u56fe\u7f16\u7801\u683c\u5f0f\uff0c\u53ef\u53c2\u8003 Portable Network Graphics TIFF\uff0c\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u538b\u7f29\u7f16\u7801\u683c\u5f0f\uff0c\u53ef\u53c2\u8003 Tagged Image File Format \u7136\u540e\uff0c\u8f6c\u5316\u6210 Feature \u7684\u5f62\u5f0f\uff0c\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u5e76\u5c06\u6570\u636e\u957f\u5ea6\u5199\u5165\u5230\u6587\u4ef6\u4e2d def ndarray2ofrecords ( dsfile , dataname , encoded_data , labelname , encoded_label ): topack = { dataname : bytes_feature ( encoded_data ), labelname : int32_feature ( encoded_label )} ofrecord_features = ofrecord . OFRecord ( feature = topack ) serilizedBytes = ofrecord_features . SerializeToString () length = ofrecord_features . ByteSize () dsfile . write ( struct . pack ( \"q\" , length )) dsfile . write ( serilizedBytes )","title":"\u811a\u672c\u7684\u7f16\u7801\u6d41\u7a0b"},{"location":"single_client/extended_topics/how_to_convert_image_to_ofrecord.html#ofrecord_2","text":"\u6211\u4eec\u8fd0\u884c\u76ee\u5f55\u4e0b\u7684 lenet_train.py \uff0c\u5b83\u5c06\u8bfb\u53d6\u6211\u4eec\u521a\u5236\u4f5c\u597d\u7684 OFRecord \u6570\u636e\u96c6\uff0c\u5728 Lenet \u6a21\u578b\u4e0a\u8fdb\u884c\u8bad\u7ec3 \u8be5\u8bad\u7ec3\u811a\u672c\u8f93\u51fa\u5982\u4e0b\uff1a [6.778578] [2.0212684] [1.3814741] [0.47514156] [0.13277876] [0.16388433] [0.03788032] [0.01225162] ...... \u81f3\u6b64\uff0c\u6211\u4eec\u6210\u529f\u5b8c\u6210\u4e86\u6570\u636e\u96c6\u5236\u4f5c\u3001\u8bfb\u53d6\u4e0e\u8bad\u7ec3\u6574\u4e2a\u6d41\u7a0b\u3002","title":"\u4f7f\u7528\u81ea\u5236\u7684 OFRecord \u6570\u636e\u96c6\u8fdb\u884c\u8bad\u7ec3"},{"location":"single_client/extended_topics/how_to_make_ofdataset.html","text":"\u5728 \u6570\u636e\u8f93\u5165 \u4e00\u6587\u4e2d\u6211\u4eec\u77e5\u9053\u4e86\u4f7f\u7528 DataLoader \u53ca\u76f8\u5173\u7b97\u5b50\u52a0\u8f7d\u6570\u636e\uff0c\u5f80\u5f80\u6548\u7387\u66f4\u9ad8\uff0c\u5e76\u4e14\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 DataLoader \u53ca\u76f8\u5173\u7b97\u5b50\u3002 \u5728 OFrecord \u6570\u636e\u683c\u5f0f \u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86 OFRecord \u6587\u4ef6\u7684\u5b58\u50a8\u683c\u5f0f\u3002 \u672c\u6587\uff0c\u5c06\u56f4\u7ed5 OneFlow \u7684 OFRecord \u6570\u636e\u96c6\u7684\u52a0\u8f7d\u4e0e\u5236\u4f5c\u5c55\u5f00\uff0c\u4e3b\u8981\u5305\u62ec\uff1a OFRecord \u6570\u636e\u96c6\u7684\u7ec4\u7ec7\u5f62\u5f0f \u52a0\u8f7d OFRecord \u6570\u636e\u96c6\u7684\u591a\u79cd\u65b9\u5f0f OFRecord \u6570\u636e\u96c6\u4e0e\u5176\u5b83\u6570\u636e\u683c\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316 \u4ec0\u4e48\u662fOFRecord\u6570\u636e\u96c6 \u00b6 \u5728 OFrecord \u6570\u636e\u683c\u5f0f \u4e2d\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u8fc7 OFRecord \u6587\u4ef6 \u7684\u5b58\u50a8\u683c\u5f0f\uff0c\u77e5\u9053\u4e86\u4ec0\u4e48\u662f OFRecord\u6587\u4ef6 \u3002 OFRecord \u6570\u636e\u96c6\u662f OFRecord \u6587\u4ef6\u7684\u96c6\u5408 \u3002\u5c06\u591a\u4e2a OFRecord\u6587\u4ef6 \uff0c\u6309\u7167 OneFlow \u7ea6\u5b9a\u7684\u6587\u4ef6\u540d\u683c\u5f0f\uff0c\u5b58\u653e\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e2d\uff0c\u5c31\u5f97\u5230\u4e86 OFRecord \u6570\u636e\u96c6\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cOFRecord \u6570\u636e\u96c6\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\uff0c\u7edf\u4e00\u4ee5 part-xxx \u7684\u65b9\u5f0f\u547d\u540d\uff0c\u5176\u4e2d\u7684 \"xxx\" \u662f\u4ece0\u5f00\u59cb\u7684\u6587\u4ef6\u7f16\u53f7\uff0c\u6709\u8865\u9f50\u548c\u4e0d\u8865\u9f50\u4e24\u79cd\u9009\u62e9\u3002 \u4ee5\u4e0b\u662f\u6ca1\u6709\u91c7\u7528\u8865\u9f50\u7684\u547d\u540d\u98ce\u683c\u793a\u4f8b\uff1a mnist_kaggle/train/ \u251c\u2500\u2500 part-0 \u251c\u2500\u2500 part-1 \u251c\u2500\u2500 part-10 \u251c\u2500\u2500 part-11 \u251c\u2500\u2500 part-12 \u251c\u2500\u2500 part-13 \u251c\u2500\u2500 part-14 \u251c\u2500\u2500 part-15 \u251c\u2500\u2500 part-2 \u251c\u2500\u2500 part-3 \u251c\u2500\u2500 part-4 \u251c\u2500\u2500 part-5 \u251c\u2500\u2500 part-6 \u251c\u2500\u2500 part-7 \u251c\u2500\u2500 part-8 \u2514\u2500\u2500 part-9 \u4ee5\u4e0b\u662f\u6709\u8865\u9f50\u7684\u547d\u540d\u98ce\u683c\uff1a mnist_kaggle/train/ \u251c\u2500\u2500 part-00000 \u251c\u2500\u2500 part-00001 \u251c\u2500\u2500 part-00002 \u251c\u2500\u2500 part-00003 \u251c\u2500\u2500 part-00004 \u251c\u2500\u2500 part-00005 \u251c\u2500\u2500 part-00006 \u251c\u2500\u2500 part-00007 \u251c\u2500\u2500 part-00008 \u251c\u2500\u2500 part-00009 \u251c\u2500\u2500 part-00010 \u251c\u2500\u2500 part-00011 \u251c\u2500\u2500 part-00012 \u251c\u2500\u2500 part-00013 \u251c\u2500\u2500 part-00014 \u251c\u2500\u2500 part-00015 OneFlow \u91c7\u7528\u6b64\u7ea6\u5b9a\uff0c\u4e0e spark \u7684\u9ed8\u8ba4\u5b58\u50a8\u7684\u6587\u4ef6\u540d\u4e00\u81f4\uff0c\u65b9\u4fbf\u4f7f\u7528 spark \u5236\u4f5c\u4e0e\u8f6c\u5316 OFRecord \u6570\u636e\u3002 \u5b9e\u9645\u4e0a\uff0c\u6587\u4ef6\u540d\u524d\u7f00( part- )\u3001\u6587\u4ef6\u540d\u7f16\u53f7\u662f\u5426\u8865\u9f50\u3001\u6309\u591a\u5c11\u4f4d\u8865\u9f50\uff0c\u5747\u53ef\u4ee5\u81ea\u884c\u6307\u5b9a\uff0c\u53ea\u9700\u8981\u5728\u52a0\u8f7d\u6570\u636e\u96c6(\u4e0b\u6587\u4f1a\u4ecb\u7ecd)\u65f6\uff0c\u4fdd\u6301\u76f8\u5173\u53c2\u6570\u4e00\u81f4\u5373\u53ef\u3002 OneFlow \u63d0\u4f9b\u4e86\u52a0\u8f7d OFRecord \u6570\u636e\u96c6\u7684\u63a5\u53e3\uff0c\u4f7f\u5f97\u6211\u4eec\u53ea\u8981\u6307\u5b9a\u6570\u636e\u96c6\u76ee\u5f55\u7684\u8def\u5f84\uff0c\u5c31\u53ef\u4ee5\u4eab\u53d7 OneFlow \u6846\u67b6\u6240\u5e26\u6765\u7684\u591a\u7ebf\u7a0b\u3001\u6570\u636e\u6d41\u6c34\u7ebf\u7b49\u4f18\u52bf\u3002 \u52a0\u8f7dOFRecord\u6570\u636e\u96c6\u7684\u65b9\u6cd5 \u00b6 \u6211\u4eec\u4f7f\u7528 ofrecord_reader \u52a0\u8f7d\u5e76\u9884\u5904\u7406\u6570\u636e\u96c6\u3002 \u5728 \u6570\u636e\u8f93\u5165 \u4e00\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 ofrecord_reader \u63a5\u53e3\u52a0\u8f7d OFRecord \u6570\u636e\uff0c\u5e76\u8fdb\u884c\u6570\u636e\u9884\u5904\u7406\u3002 \u4ee3\u7801\u89c1\uff1a of_data_pipeline.py ofrecord_reader \u7684\u63a5\u53e3\u5982\u4e0b\uff1a def ofrecord_reader ( ofrecord_dir , batch_size = 1 , data_part_num = 1 , part_name_prefix = \"part-\" , part_name_suffix_length =- 1 , random_shuffle = False , shuffle_buffer_size = 1024 , shuffle_after_epoch = False , name = None , ) ofrecord_dir \u6307\u5b9a\u5b58\u653e\u6570\u636e\u96c6\u7684\u76ee\u5f55\u8def\u5f84 batch_size \u6307\u5b9a\u6bcf\u8f6e\u8bfb\u53d6\u7684 batch \u5927\u5c0f data_part_num \u6307\u5b9a\u6570\u636e\u96c6\u76ee\u5f55\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u4e2a ofrecord \u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u5982\u679c\u8fd9\u4e2a\u6570\u5b57\u5927\u4e8e\u771f\u5b9e\u5b58\u5728\u7684\u6587\u4ef6\u6570\uff0c\u4f1a\u62a5\u9519 part_name_prefix \u6307\u5b9a ofrecord \u6587\u4ef6\u7684\u6587\u4ef6\u540d\u524d\u7f00\uff0c OneFlow \u6839\u636e\u524d\u7f00+\u5e8f\u53f7\u5728\u6570\u636e\u96c6\u76ee\u5f55\u4e2d\u5b9a\u4f4d ofrecord \u6587\u4ef6 part_name_suffix_length \u6307\u5b9a ofrecord \u6587\u4ef6\u7684\u5e8f\u53f7\u7684\u5bf9\u9f50\u957f\u5ea6\uff0c-1\u8868\u793a\u4e0d\u7528\u5bf9\u9f50 random_shuffle \u8868\u793a\u8bfb\u53d6\u65f6\u662f\u5426\u9700\u8981\u968f\u673a\u6253\u4e71\u6837\u672c\u987a\u5e8f shuffle_buffer_size \u6307\u5b9a\u4e86\u8bfb\u53d6\u6837\u672c\u7684\u7f13\u51b2\u533a\u5927\u5c0f shuffle_after_epoch \u8868\u793a\u6bcf\u8f6e\u8bfb\u53d6\u5b8c\u540e\u662f\u5426\u9700\u8981\u91cd\u65b0\u6253\u4e71\u6837\u672c\u987a\u5e8f \u4f7f\u7528 ofrecord_reader \u7684\u597d\u5904\u5728\u4e8e\uff0c ofrecord_reader \u4f5c\u4e3a\u4e00\u4e2a\u666e\u901a\u7b97\u5b50\uff0c\u53c2\u4e0e OneFlow \u6784\u56fe\u4f18\u5316\uff0c\u5e76\u4eab\u6709 OneFlow \u6d41\u6c34\u7ebf\u52a0\u901f\u3002 \u5bf9\u4e8e\u4e0e\u4e1a\u52a1\u903b\u8f91\u8026\u5408\u7684\u7279\u5b9a\u64cd\u4f5c\uff08\u5982\u89e3\u7801\u3001\u89e3\u538b\u7b49\uff09\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4e3a ofrecord_reader \u5b9a\u4e49\u9884\u5904\u7406 op\uff0c\u8ba9\u7a0b\u5e8f\u62e5\u6709\u5f88\u9ad8\u7684\u7075\u6d3b\u6027\u548c\u6269\u5c55\u6027\u3002 \u5173\u4e8e DataLoader \u53ca\u76f8\u5173\u7b97\u5b50\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003 \u6570\u636e\u8f93\u5165 \u5176\u5b83\u683c\u5f0f\u6570\u636e\u4e0e OFRecord \u6570\u636e\u96c6\u7684\u76f8\u4e92\u8f6c\u5316 \u00b6 \u53c2\u8003 OFrecord\u6570\u636e\u683c\u5f0f \u4e2d OFRecord \u6587\u4ef6\u7684\u5b58\u50a8\u683c\u5f0f\u53ca\u672c\u6587\u5f00\u5934\u4ecb\u7ecd\u7684 OFRecord \u6570\u636e\u96c6\u7684\u6587\u4ef6\u540d\u683c\u5f0f\u7ea6\u5b9a\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u81ea\u5df1\u5236\u4f5c OFRecord \u6570\u636e\u96c6\u3002 \u4e0d\u8fc7\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 Spark \u7684 jar \u5305\uff0c\u65b9\u4fbf OFRecord \u4e0e\u5e38\u89c1\u6570\u636e\u683c\u5f0f(\u5982 TFRecord\u3001json)\u8fdb\u884c\u76f8\u4e92\u8f6c\u5316\u3002 spark \u7684\u5b89\u88c5\u4e0e\u542f\u52a8 \u00b6 \u9996\u5148\uff0c\u4e0b\u8f7d spark \u53ca spark-oneflow-connector\uff1a \u5728 spark \u5b98\u7f51\u4e0b\u8f7d spark-2.4.7-bin-hadoop2.7.tgz \u5728 \u8fd9\u91cc \u4e0b\u8f7d jar \u5305\uff0cspark \u9700\u8981\u5b83\u6765\u652f\u6301 ofrecord \u683c\u5f0f \u63a5\u7740\uff0c\u89e3\u538b spark-2.4.7-bin-hadoop2.7.tgz \uff0c\u5e76\u914d\u7f6e\u73af\u5883\u53d8\u91cf SPARK_HOME : export SPARK_HOME=path/to/spark-2.4.7-bin-hadoop2.7 export PATH=$SPARK_HOME/bin:$PATH \u7136\u540e\uff0c\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 pyspark shell\uff1a pyspark --master \"local[*]\"\\ --jars spark-oneflow-connector-assembly-0.1.0_int64.jar\\ --packages org.tensorflow:spark-tensorflow-connector_2.11:1.13.1 ... Welcome to ____ __ / __/__ ___ _____/ /__ _\\ \\/ _ \\/ _ `/ __/ '_/ /__ / .__/\\_,_/_/ /_/\\_\\ version 2.4.7 /_/ Using Python version 3.6.10 (default, Mar 25 2020 18:53:43) SparkSession available as 'spark'. >>> \u5728\u542f\u52a8\u7684 pyspark shell \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5b8c\u6210 OFRecord \u6570\u636e\u96c6\u4e0e\u5176\u5b83\u6570\u636e\u683c\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316\u3002 \u4f7f\u7528 spark \u67e5\u770b OFRecord \u6570\u636e\u96c6 \u00b6 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b OFRecord \u6570\u636e\uff1a spark.read.format(\"ofrecord\").load(\"file:///path/to/ofrecord_file\").show() \u9ed8\u8ba4\u663e\u793a\u524d20\u6761\u6570\u636e: +--------------------+------+ | images|labels| +--------------------+------+ |[0.33967614, 0.87...| 2| |[0.266905, 0.9730...| 3| |[0.66661334, 0.67...| 1| |[0.91943026, 0.89...| 6| |[0.014844197, 0.0...| 6| |[0.5366513, 0.748...| 4| |[0.055148937, 0.7...| 7| |[0.7814437, 0.228...| 4| |[0.31193638, 0.55...| 3| |[0.20034336, 0.24...| 4| |[0.09441255, 0.07...| 3| |[0.5177533, 0.397...| 0| |[0.23703437, 0.44...| 9| |[0.9425567, 0.859...| 9| |[0.017339867, 0.0...| 3| |[0.827106, 0.3122...| 0| |[0.8641392, 0.194...| 2| |[0.95585227, 0.29...| 3| |[0.7508129, 0.464...| 4| |[0.035597708, 0.3...| 9| +--------------------+------+ only showing top 20 rows \u4e0e TFRecord \u6570\u636e\u96c6\u7684\u76f8\u4e92\u8f6c\u5316 \u00b6 \u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u5c06 TFRecord \u8f6c\u5316\u4e3a OFRecrod\uff1a reader = spark . read . format ( \"tfrecords\" ) dataframe = reader . load ( \"file:///path/to/tfrecord_file\" ) writer = dataframe . write . format ( \"ofrecord\" ) writer . save ( \"file:///path/to/outputdir\" ) \u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 outputdir \u76ee\u5f55\u4f1a\u88ab\u81ea\u52a8\u521b\u5efa\uff0c\u5e76\u5728\u5176\u4e2d\u4fdd\u5b58 ofrecord \u6587\u4ef6\u3002\u5728\u6267\u884c\u547d\u4ee4\u524d\u5e94\u4fdd\u8bc1 outputdir \u76ee\u5f55\u4e0d\u5b58\u5728\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u8f6c\u5316\u7684\u540c\u65f6\uff0c\u5c06\u6570\u636e\u5207\u5206\u4e3a\u591a\u4e2a ofrecord \u6587\u4ef6\uff1a reader = spark . read . format ( \"tfrecords\" ) dataframe = reader . load ( \"file:///path/to/tfrecord_file\" ) writer = dataframe . repartition ( 10 ) . write . format ( \"ofrecord\" ) writer . save ( \"file://path/to/outputdir\" ) \u4ee5\u4e0a\u547d\u4ee4\u6267\u884c\u540e\uff0c\u5728 outputdir \u76ee\u5f55\u4e0b\u4f1a\u4ea7\u751f10\u4e2a part-xxx \u683c\u5f0f\u7684ofrecord\u6587\u4ef6\u3002 \u5c06 OFRecord \u6587\u4ef6\u8f6c\u4e3a TFRecord \u6587\u4ef6\u7684\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u4ea4\u6362\u8bfb/\u5199\u65b9\u7684 format \u5373\u53ef\uff1a reader = spark . read . format ( \"ofrecord\" ) dataframe = reader . load ( \"file:///path/to/ofrecord_file\" ) writer = dataframe . write . format ( \"tfrecords\" ) writer . save ( \"file:///path/to/outputdir\" ) \u4e0e JSON \u683c\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316 \u00b6 \u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u5c06 JSON \u683c\u5f0f\u6570\u636e\u8f6c\u4e3a OFRecord \u6570\u636e\u96c6: dataframe = spark . read . json ( \"file:///path/to/json_file\" ) writer = dataframe . write . format ( \"ofrecord\" ) writer . save ( \"file:///path/to/outputdir\" ) \u4ee5\u4e0b\u547d\u4ee4\u5c06 OFRecord \u6570\u636e\u8f6c\u4e3a JSON \u6587\u4ef6\uff1a reader = spark . read . format ( \"ofrecord\" ) dataframe = reader . load ( \"file:///path/to/ofrecord_file\" ) dataframe . write . json ( \"file://path/to/outputdir\" )","title":"\u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6"},{"location":"single_client/extended_topics/how_to_make_ofdataset.html#ofrecord","text":"\u5728 OFrecord \u6570\u636e\u683c\u5f0f \u4e2d\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u8fc7 OFRecord \u6587\u4ef6 \u7684\u5b58\u50a8\u683c\u5f0f\uff0c\u77e5\u9053\u4e86\u4ec0\u4e48\u662f OFRecord\u6587\u4ef6 \u3002 OFRecord \u6570\u636e\u96c6\u662f OFRecord \u6587\u4ef6\u7684\u96c6\u5408 \u3002\u5c06\u591a\u4e2a OFRecord\u6587\u4ef6 \uff0c\u6309\u7167 OneFlow \u7ea6\u5b9a\u7684\u6587\u4ef6\u540d\u683c\u5f0f\uff0c\u5b58\u653e\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e2d\uff0c\u5c31\u5f97\u5230\u4e86 OFRecord \u6570\u636e\u96c6\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cOFRecord \u6570\u636e\u96c6\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\uff0c\u7edf\u4e00\u4ee5 part-xxx \u7684\u65b9\u5f0f\u547d\u540d\uff0c\u5176\u4e2d\u7684 \"xxx\" \u662f\u4ece0\u5f00\u59cb\u7684\u6587\u4ef6\u7f16\u53f7\uff0c\u6709\u8865\u9f50\u548c\u4e0d\u8865\u9f50\u4e24\u79cd\u9009\u62e9\u3002 \u4ee5\u4e0b\u662f\u6ca1\u6709\u91c7\u7528\u8865\u9f50\u7684\u547d\u540d\u98ce\u683c\u793a\u4f8b\uff1a mnist_kaggle/train/ \u251c\u2500\u2500 part-0 \u251c\u2500\u2500 part-1 \u251c\u2500\u2500 part-10 \u251c\u2500\u2500 part-11 \u251c\u2500\u2500 part-12 \u251c\u2500\u2500 part-13 \u251c\u2500\u2500 part-14 \u251c\u2500\u2500 part-15 \u251c\u2500\u2500 part-2 \u251c\u2500\u2500 part-3 \u251c\u2500\u2500 part-4 \u251c\u2500\u2500 part-5 \u251c\u2500\u2500 part-6 \u251c\u2500\u2500 part-7 \u251c\u2500\u2500 part-8 \u2514\u2500\u2500 part-9 \u4ee5\u4e0b\u662f\u6709\u8865\u9f50\u7684\u547d\u540d\u98ce\u683c\uff1a mnist_kaggle/train/ \u251c\u2500\u2500 part-00000 \u251c\u2500\u2500 part-00001 \u251c\u2500\u2500 part-00002 \u251c\u2500\u2500 part-00003 \u251c\u2500\u2500 part-00004 \u251c\u2500\u2500 part-00005 \u251c\u2500\u2500 part-00006 \u251c\u2500\u2500 part-00007 \u251c\u2500\u2500 part-00008 \u251c\u2500\u2500 part-00009 \u251c\u2500\u2500 part-00010 \u251c\u2500\u2500 part-00011 \u251c\u2500\u2500 part-00012 \u251c\u2500\u2500 part-00013 \u251c\u2500\u2500 part-00014 \u251c\u2500\u2500 part-00015 OneFlow \u91c7\u7528\u6b64\u7ea6\u5b9a\uff0c\u4e0e spark \u7684\u9ed8\u8ba4\u5b58\u50a8\u7684\u6587\u4ef6\u540d\u4e00\u81f4\uff0c\u65b9\u4fbf\u4f7f\u7528 spark \u5236\u4f5c\u4e0e\u8f6c\u5316 OFRecord \u6570\u636e\u3002 \u5b9e\u9645\u4e0a\uff0c\u6587\u4ef6\u540d\u524d\u7f00( part- )\u3001\u6587\u4ef6\u540d\u7f16\u53f7\u662f\u5426\u8865\u9f50\u3001\u6309\u591a\u5c11\u4f4d\u8865\u9f50\uff0c\u5747\u53ef\u4ee5\u81ea\u884c\u6307\u5b9a\uff0c\u53ea\u9700\u8981\u5728\u52a0\u8f7d\u6570\u636e\u96c6(\u4e0b\u6587\u4f1a\u4ecb\u7ecd)\u65f6\uff0c\u4fdd\u6301\u76f8\u5173\u53c2\u6570\u4e00\u81f4\u5373\u53ef\u3002 OneFlow \u63d0\u4f9b\u4e86\u52a0\u8f7d OFRecord \u6570\u636e\u96c6\u7684\u63a5\u53e3\uff0c\u4f7f\u5f97\u6211\u4eec\u53ea\u8981\u6307\u5b9a\u6570\u636e\u96c6\u76ee\u5f55\u7684\u8def\u5f84\uff0c\u5c31\u53ef\u4ee5\u4eab\u53d7 OneFlow \u6846\u67b6\u6240\u5e26\u6765\u7684\u591a\u7ebf\u7a0b\u3001\u6570\u636e\u6d41\u6c34\u7ebf\u7b49\u4f18\u52bf\u3002","title":"\u4ec0\u4e48\u662fOFRecord\u6570\u636e\u96c6"},{"location":"single_client/extended_topics/how_to_make_ofdataset.html#ofrecord_1","text":"\u6211\u4eec\u4f7f\u7528 ofrecord_reader \u52a0\u8f7d\u5e76\u9884\u5904\u7406\u6570\u636e\u96c6\u3002 \u5728 \u6570\u636e\u8f93\u5165 \u4e00\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 ofrecord_reader \u63a5\u53e3\u52a0\u8f7d OFRecord \u6570\u636e\uff0c\u5e76\u8fdb\u884c\u6570\u636e\u9884\u5904\u7406\u3002 \u4ee3\u7801\u89c1\uff1a of_data_pipeline.py ofrecord_reader \u7684\u63a5\u53e3\u5982\u4e0b\uff1a def ofrecord_reader ( ofrecord_dir , batch_size = 1 , data_part_num = 1 , part_name_prefix = \"part-\" , part_name_suffix_length =- 1 , random_shuffle = False , shuffle_buffer_size = 1024 , shuffle_after_epoch = False , name = None , ) ofrecord_dir \u6307\u5b9a\u5b58\u653e\u6570\u636e\u96c6\u7684\u76ee\u5f55\u8def\u5f84 batch_size \u6307\u5b9a\u6bcf\u8f6e\u8bfb\u53d6\u7684 batch \u5927\u5c0f data_part_num \u6307\u5b9a\u6570\u636e\u96c6\u76ee\u5f55\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u4e2a ofrecord \u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u5982\u679c\u8fd9\u4e2a\u6570\u5b57\u5927\u4e8e\u771f\u5b9e\u5b58\u5728\u7684\u6587\u4ef6\u6570\uff0c\u4f1a\u62a5\u9519 part_name_prefix \u6307\u5b9a ofrecord \u6587\u4ef6\u7684\u6587\u4ef6\u540d\u524d\u7f00\uff0c OneFlow \u6839\u636e\u524d\u7f00+\u5e8f\u53f7\u5728\u6570\u636e\u96c6\u76ee\u5f55\u4e2d\u5b9a\u4f4d ofrecord \u6587\u4ef6 part_name_suffix_length \u6307\u5b9a ofrecord \u6587\u4ef6\u7684\u5e8f\u53f7\u7684\u5bf9\u9f50\u957f\u5ea6\uff0c-1\u8868\u793a\u4e0d\u7528\u5bf9\u9f50 random_shuffle \u8868\u793a\u8bfb\u53d6\u65f6\u662f\u5426\u9700\u8981\u968f\u673a\u6253\u4e71\u6837\u672c\u987a\u5e8f shuffle_buffer_size \u6307\u5b9a\u4e86\u8bfb\u53d6\u6837\u672c\u7684\u7f13\u51b2\u533a\u5927\u5c0f shuffle_after_epoch \u8868\u793a\u6bcf\u8f6e\u8bfb\u53d6\u5b8c\u540e\u662f\u5426\u9700\u8981\u91cd\u65b0\u6253\u4e71\u6837\u672c\u987a\u5e8f \u4f7f\u7528 ofrecord_reader \u7684\u597d\u5904\u5728\u4e8e\uff0c ofrecord_reader \u4f5c\u4e3a\u4e00\u4e2a\u666e\u901a\u7b97\u5b50\uff0c\u53c2\u4e0e OneFlow \u6784\u56fe\u4f18\u5316\uff0c\u5e76\u4eab\u6709 OneFlow \u6d41\u6c34\u7ebf\u52a0\u901f\u3002 \u5bf9\u4e8e\u4e0e\u4e1a\u52a1\u903b\u8f91\u8026\u5408\u7684\u7279\u5b9a\u64cd\u4f5c\uff08\u5982\u89e3\u7801\u3001\u89e3\u538b\u7b49\uff09\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4e3a ofrecord_reader \u5b9a\u4e49\u9884\u5904\u7406 op\uff0c\u8ba9\u7a0b\u5e8f\u62e5\u6709\u5f88\u9ad8\u7684\u7075\u6d3b\u6027\u548c\u6269\u5c55\u6027\u3002 \u5173\u4e8e DataLoader \u53ca\u76f8\u5173\u7b97\u5b50\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003 \u6570\u636e\u8f93\u5165","title":"\u52a0\u8f7dOFRecord\u6570\u636e\u96c6\u7684\u65b9\u6cd5"},{"location":"single_client/extended_topics/how_to_make_ofdataset.html#ofrecord_2","text":"\u53c2\u8003 OFrecord\u6570\u636e\u683c\u5f0f \u4e2d OFRecord \u6587\u4ef6\u7684\u5b58\u50a8\u683c\u5f0f\u53ca\u672c\u6587\u5f00\u5934\u4ecb\u7ecd\u7684 OFRecord \u6570\u636e\u96c6\u7684\u6587\u4ef6\u540d\u683c\u5f0f\u7ea6\u5b9a\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u81ea\u5df1\u5236\u4f5c OFRecord \u6570\u636e\u96c6\u3002 \u4e0d\u8fc7\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 Spark \u7684 jar \u5305\uff0c\u65b9\u4fbf OFRecord \u4e0e\u5e38\u89c1\u6570\u636e\u683c\u5f0f(\u5982 TFRecord\u3001json)\u8fdb\u884c\u76f8\u4e92\u8f6c\u5316\u3002","title":"\u5176\u5b83\u683c\u5f0f\u6570\u636e\u4e0e OFRecord \u6570\u636e\u96c6\u7684\u76f8\u4e92\u8f6c\u5316"},{"location":"single_client/extended_topics/how_to_make_ofdataset.html#spark","text":"\u9996\u5148\uff0c\u4e0b\u8f7d spark \u53ca spark-oneflow-connector\uff1a \u5728 spark \u5b98\u7f51\u4e0b\u8f7d spark-2.4.7-bin-hadoop2.7.tgz \u5728 \u8fd9\u91cc \u4e0b\u8f7d jar \u5305\uff0cspark \u9700\u8981\u5b83\u6765\u652f\u6301 ofrecord \u683c\u5f0f \u63a5\u7740\uff0c\u89e3\u538b spark-2.4.7-bin-hadoop2.7.tgz \uff0c\u5e76\u914d\u7f6e\u73af\u5883\u53d8\u91cf SPARK_HOME : export SPARK_HOME=path/to/spark-2.4.7-bin-hadoop2.7 export PATH=$SPARK_HOME/bin:$PATH \u7136\u540e\uff0c\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 pyspark shell\uff1a pyspark --master \"local[*]\"\\ --jars spark-oneflow-connector-assembly-0.1.0_int64.jar\\ --packages org.tensorflow:spark-tensorflow-connector_2.11:1.13.1 ... Welcome to ____ __ / __/__ ___ _____/ /__ _\\ \\/ _ \\/ _ `/ __/ '_/ /__ / .__/\\_,_/_/ /_/\\_\\ version 2.4.7 /_/ Using Python version 3.6.10 (default, Mar 25 2020 18:53:43) SparkSession available as 'spark'. >>> \u5728\u542f\u52a8\u7684 pyspark shell \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5b8c\u6210 OFRecord \u6570\u636e\u96c6\u4e0e\u5176\u5b83\u6570\u636e\u683c\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316\u3002","title":"spark \u7684\u5b89\u88c5\u4e0e\u542f\u52a8"},{"location":"single_client/extended_topics/how_to_make_ofdataset.html#spark-ofrecord","text":"\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b OFRecord \u6570\u636e\uff1a spark.read.format(\"ofrecord\").load(\"file:///path/to/ofrecord_file\").show() \u9ed8\u8ba4\u663e\u793a\u524d20\u6761\u6570\u636e: +--------------------+------+ | images|labels| +--------------------+------+ |[0.33967614, 0.87...| 2| |[0.266905, 0.9730...| 3| |[0.66661334, 0.67...| 1| |[0.91943026, 0.89...| 6| |[0.014844197, 0.0...| 6| |[0.5366513, 0.748...| 4| |[0.055148937, 0.7...| 7| |[0.7814437, 0.228...| 4| |[0.31193638, 0.55...| 3| |[0.20034336, 0.24...| 4| |[0.09441255, 0.07...| 3| |[0.5177533, 0.397...| 0| |[0.23703437, 0.44...| 9| |[0.9425567, 0.859...| 9| |[0.017339867, 0.0...| 3| |[0.827106, 0.3122...| 0| |[0.8641392, 0.194...| 2| |[0.95585227, 0.29...| 3| |[0.7508129, 0.464...| 4| |[0.035597708, 0.3...| 9| +--------------------+------+ only showing top 20 rows","title":"\u4f7f\u7528 spark \u67e5\u770b OFRecord \u6570\u636e\u96c6"},{"location":"single_client/extended_topics/how_to_make_ofdataset.html#tfrecord","text":"\u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u5c06 TFRecord \u8f6c\u5316\u4e3a OFRecrod\uff1a reader = spark . read . format ( \"tfrecords\" ) dataframe = reader . load ( \"file:///path/to/tfrecord_file\" ) writer = dataframe . write . format ( \"ofrecord\" ) writer . save ( \"file:///path/to/outputdir\" ) \u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 outputdir \u76ee\u5f55\u4f1a\u88ab\u81ea\u52a8\u521b\u5efa\uff0c\u5e76\u5728\u5176\u4e2d\u4fdd\u5b58 ofrecord \u6587\u4ef6\u3002\u5728\u6267\u884c\u547d\u4ee4\u524d\u5e94\u4fdd\u8bc1 outputdir \u76ee\u5f55\u4e0d\u5b58\u5728\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u8f6c\u5316\u7684\u540c\u65f6\uff0c\u5c06\u6570\u636e\u5207\u5206\u4e3a\u591a\u4e2a ofrecord \u6587\u4ef6\uff1a reader = spark . read . format ( \"tfrecords\" ) dataframe = reader . load ( \"file:///path/to/tfrecord_file\" ) writer = dataframe . repartition ( 10 ) . write . format ( \"ofrecord\" ) writer . save ( \"file://path/to/outputdir\" ) \u4ee5\u4e0a\u547d\u4ee4\u6267\u884c\u540e\uff0c\u5728 outputdir \u76ee\u5f55\u4e0b\u4f1a\u4ea7\u751f10\u4e2a part-xxx \u683c\u5f0f\u7684ofrecord\u6587\u4ef6\u3002 \u5c06 OFRecord \u6587\u4ef6\u8f6c\u4e3a TFRecord \u6587\u4ef6\u7684\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u4ea4\u6362\u8bfb/\u5199\u65b9\u7684 format \u5373\u53ef\uff1a reader = spark . read . format ( \"ofrecord\" ) dataframe = reader . load ( \"file:///path/to/ofrecord_file\" ) writer = dataframe . write . format ( \"tfrecords\" ) writer . save ( \"file:///path/to/outputdir\" )","title":"\u4e0e TFRecord \u6570\u636e\u96c6\u7684\u76f8\u4e92\u8f6c\u5316"},{"location":"single_client/extended_topics/how_to_make_ofdataset.html#json","text":"\u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u5c06 JSON \u683c\u5f0f\u6570\u636e\u8f6c\u4e3a OFRecord \u6570\u636e\u96c6: dataframe = spark . read . json ( \"file:///path/to/json_file\" ) writer = dataframe . write . format ( \"ofrecord\" ) writer . save ( \"file:///path/to/outputdir\" ) \u4ee5\u4e0b\u547d\u4ee4\u5c06 OFRecord \u6570\u636e\u8f6c\u4e3a JSON \u6587\u4ef6\uff1a reader = spark . read . format ( \"ofrecord\" ) dataframe = reader . load ( \"file:///path/to/ofrecord_file\" ) dataframe . write . json ( \"file://path/to/outputdir\" )","title":"\u4e0e JSON \u683c\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316"},{"location":"single_client/extended_topics/job_function_define_call.html","text":"\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528 \u00b6 \u5728 OneFlow \u4e2d\uff0c\u6211\u4eec\u5c06\u8bad\u7ec3\u3001\u9884\u6d4b\u4efb\u52a1\u5c01\u88c5\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u7edf\u79f0\u4e3a\u4f5c\u4e1a\u51fd\u6570(job function)\uff0c\u4f5c\u4e1a\u51fd\u6570\u8054\u7cfb\u7528\u6237\u7684\u4e1a\u52a1\u903b\u8f91\u4e0e OneFlow \u7ba1\u7406\u7684\u8ba1\u7b97\u8d44\u6e90\u3002 \u5728 OneFlow \u4e2d\uff0c\u88ab @oneflow.global_function \u88c5\u9970\u5668\u6240\u4fee\u9970\u7684 python \u51fd\u6570\uff0c\u5c31\u662f OneFlow \u4f5c\u4e1a\u51fd\u6570\u3002 \u6211\u4eec\u4e3b\u8981\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u5b9a\u4e49\u7f51\u7edc\u6a21\u578b\u7684\u7ed3\u6784\u3001\u9009\u62e9\u4f18\u5316\u6307\u6807\uff1b\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u5c06\u8bad\u7ec3\u6709\u5173\u7684\u8d85\u53c2\u53ca\u73af\u5883\u914d\u7f6e\u5f53\u505a\u53c2\u6570\u4f20\u9012\u7ed9\u4f5c\u4e1a\u51fd\u6570(\u5982:\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684\uff1a get_train_config() )\uff0cOneFlow \u4f1a\u6839\u636e\u8bbe\u7f6e\u4e3a\u6211\u4eec\u7ba1\u7406\u5185\u5b58\u3001GPU \u7b49\u786c\u4ef6\u8d44\u6e90\u3002 \u672c\u6587\u4e2d\u6211\u4eec\u5c06\u5177\u4f53\u5b66\u4e60\uff1a \u5982\u4f55\u5b9a\u4e49\u548c\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 \u5982\u4f55\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c \u4f5c\u4e1a\u51fd\u6570\u4e0e OneFlow \u8fd0\u884c\u6d41\u7a0b\u7684\u5173\u7cfb \u00b6 \u4f5c\u4e1a\u51fd\u6570\u5206\u4e3a\u5b9a\u4e49\u548c\u8c03\u7528\u4e24\u4e2a\u9636\u6bb5\u3002 \u8fd9\u4e0e OneFlow \u672c\u8eab\u7684\u8fd0\u884c\u673a\u5236\u6709\u5173\uff0c\u7b80\u5316\u5730\u8bf4\uff0cOneFlow Python \u5c42\u63a5\u53e3\uff0c\u53ea\u662f\u5728\u63cf\u8ff0\u7f51\u7edc\u6a21\u578b\u548c\u8bad\u7ec3\u73af\u5883\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5c06\u4f20\u9012\u7ed9\u5e95\u5c42\u7684 C++ \u4ee3\u7801\uff0c\u7ecf\u8fc7\u7f16\u8bd1\u3001\u4f18\u5316\u7b49\u5de5\u4f5c\u5f97\u5230\u8ba1\u7b97\u56fe\uff0c\u6700\u7ec8\u4ea4\u7ed9 OneFlow \u8fd0\u884c\u65f6(runtime)\uff0c\u7531 OneFlow \u8fd0\u884c\u65f6\u6267\u884c\u3002 \u56e0\u4e3a\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u53ea\u662f\u505a\u63cf\u8ff0\u5de5\u4f5c\uff0c\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u7684\u6570\u636e\uff0c\u800c\u53ea\u80fd\u901a\u8fc7\u89c4\u5b9a\u7f51\u7edc\u8282\u70b9\u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u7b49\u4fe1\u606f\uff0c\u8d77\u5230 \u6570\u636e\u5360\u4f4d\u7b26 \u7684\u4f5c\u7528\uff0c\u65b9\u4fbf OneFlow \u7684\u7f16\u8bd1\u6784\u56fe\u8fc7\u7a0b\u8fdb\u884c\u6a21\u578b\u63a8\u7406\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u53d1\u751f\u5728 OneFlow runtime \u5df2\u7ecf\u542f\u52a8\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5411\u5176\u4f20\u9012\u771f\u5b9e\u7684\u6570\u636e\uff0c\u5e76\u83b7\u53d6\u8fd4\u56de\u7ed3\u679c\u3002 \u4ee5\u4e0b\u5c06\u5177\u4f53\u4ecb\u7ecd\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528\u65b9\u6cd5\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49 \u00b6 \u6211\u4eec\u5c06\u6a21\u578b\u5c01\u88c5\u5728 Python \u4e2d\uff0c\u518d\u4f7f\u7528 oneflow.global_function \u4fee\u9970\u7b26\u8fdb\u884c\u4fee\u9970\u3002\u5c31\u5b8c\u6210\u4e86\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u4f5c\u4e1a\u51fd\u6570\u4e3b\u8981\u63cf\u8ff0\u4e24\u65b9\u9762\u7684\u4e8b\u60c5\uff1a \u6a21\u578b\u7ed3\u6784 \u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u4f18\u5316\u76ee\u6807 \u4ee5\u4e0b\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a mlp \u6a21\u578b\u3002\u5e76\u4e14\u5c06\u7531 flow.nn.sparse_softmax_cross_entropy_with_logits \u8ba1\u7b97\u5f97\u5230\u4ea4\u53c9\u71b5\u635f\u5931\u7ed3\u679c\u4f5c\u4e3a\u4f18\u5316\u76ee\u6807\u3002 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Callback [ tp . Numpy ]: # mlp initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"hidden\" , ) logits = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"output\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss oneflow.global_function \u7684\u53c2\u6570 \u00b6 oneflow.global_function \u4fee\u9970\u7b26\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u662f type \u4e0e function_config \u3002 type \u53c2\u6570\u63a5\u6536\u5b57\u7b26\u4e32\uff0c\u53ea\u80fd\u8bbe\u5b9a\u4e3a train \u6216\u8005 predict \uff0c\u5f53\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u8bbe\u5b9a\u4e3a train \uff0c\u5f53\u5b9a\u4e49\u6d4b\u8bd5\u6a21\u578b\u65f6\uff0c\u8bbe\u5b9a\u4e3a predict function_config \u53c2\u6570\u63a5\u6536\u4e00\u4e2a oneflow.function_config() \u6240\u6784\u9020\u7684\u5bf9\u8c61\uff0c\u5728 function_config \u5bf9\u8c61\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u6210\u5458\u65b9\u6cd5\u6216\u5c5e\u6027\uff0c\u8fdb\u884c\u76f8\u5173\u914d\u7f6e\u3002\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a def get_train_config (): config = flow . function_config () config . default_data_type ( flow . float ) return config \u6211\u4eec\u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u6570\u636e\u7c7b\u578b\uff0c\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u5411 global_function \u88c5\u9970\u5668\u4f20\u9012\u8fd9\u4e2a function_config \u5bf9\u8c61\uff1a @flow . global_function ( type = \"train\" , function_config = get_train_config ()) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : \u5305\u542b\u4ee5\u4e0a\u4ee3\u7801\u7684\u5b8c\u6574\u793a\u4f8b\u53ef\u89c1\u6587\u7ae0 Consistent \u4e0e Mirrored \u89c6\u89d2 \u4e2d\u7684 mixed_parallel_mlp.py \u6570\u636e\u5360\u4f4d\u7b26 \u00b6 \u6ce8\u610f\uff0c\u4ee5\u4e0a\u7684 images \u3001 logits \u3001 labels \u3001 loss \u7b49\u5bf9\u8c61\uff0c\u5728\u6211\u4eec\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u7684\u6570\u636e\u3002\u5b83\u4eec\u7684\u4f5c\u7528\u53ea\u662f \u63cf\u8ff0\u6570\u636e\u7684\u5f62\u72b6\u548c\u5c5e\u6027 \uff0c\u8d77\u5230 \u5360\u4f4d\u7b26 \u7684\u4f5c\u7528\u3002 \u5728\u4f5c\u4e1a\u51fd\u6570\u7684\u53c2\u6570\u4e2d\u7684\u6570\u636e\u5360\u4f4d\u7b26\uff0c\u4f7f\u7528 flow.typing \u4e0b\u7684 Numpy.Placeholder \u3001 ListNumpy.Placeholder \u3001 ListListNumpy.Placeholder \uff0c\u6ce8\u89e3\u4f5c\u4e1a\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5bf9\u5e94\u4f5c\u4e1a\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u4f20\u9012 numpy \u6570\u636e\u5bf9\u8c61\u3002 \u9664\u4e86 flow.typing \u4e0b\u7684\u51e0\u79cd\u7c7b\u578b\u4e4b\u5916\uff0c\u4e0d\u51fa\u73b0\u5728\u53c2\u6570\u4e2d\u5e76\u4e14\u7531 OneFlow \u7684\u7b97\u5b50\u6216\u5c42\u4ea7\u751f\u7684\u53d8\u91cf\uff0c\u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 reshape \u3001 hidden \u3001 logits \u3001 loss \u7b49\uff0c\u4e5f\u90fd\u8d77\u5230\u4e86\u6570\u636e\u5360\u4f4d\u7b26\u7684\u4f5c\u7528\u3002 \u4e0d\u7ba1\u662f\u4ee5\u4e0a\u63d0\u53ca\u7684\u54ea\u79cd\u53d8\u91cf\uff0c\u5b83\u4eec\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u7ee7\u627f\u81ea OneFlow \u7684 BlobDef \u57fa\u7c7b\uff0cOneFlow \u4e2d\u628a\u8fd9\u79cd\u5bf9\u8c61\u7c7b\u578b\u7edf\u79f0\u4e3a Blob \u3002 Blob \u5728\u4f5c\u4e1a\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u5747\u65e0\u771f\u5b9e\u6570\u636e\uff0c\u5747\u53ea\u8d77\u5230\u6570\u636e\u5360\u4f4d\u65b9\u4fbf\u6846\u67b6\u63a8\u7406\u7684\u4f5c\u7528\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c \u00b6 \u4e4b\u6240\u4ee5\u5728\u4e0a\u6587\u4e2d\u5f3a\u8c03\u6570\u636e\u5360\u4f4d\u7b26 Blob \u7684\u6982\u5ff5\uff0c\u662f\u56e0\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e0d\u80fd\u4efb\u610f\u6307\u5b9a\u7684\uff0c\u5fc5\u987b\u662f Blob \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u6216\u8005\u5b58\u6709 Blob \u5bf9\u8c61\u7684\u5bb9\u5668\u3002 \u5982\u4ee5\u4e0a\u4ee3\u7801\u7684\u4e2d\u6240\u8fd4\u56de\u7684 loss \uff0c\u5b83\u5c31\u662f Blob \u7c7b\u578b\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u9700\u8981\u901a\u8fc7\u6ce8\u89e3\u58f0\u660e\uff0c\u6bd4\u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 -> tp.Numpy \uff0c\u8868\u793a\u8fd4\u56de1\u4e2a Blob \u3002 \u518d\u6bd4\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u6ce8\u89e3\u58f0\u660e\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a -> Tuple[tp.Numpy, tp.Numpy] \uff0c\u8868\u793a\u8fd4\u56de1\u4e2a tuple \uff0c\u8be5 tuple \u4e2d\u67092\u4e2a Blob \u5bf9\u8c61\u3002 \u5177\u4f53\u7684\u4f7f\u7528\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u8003 \u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528 \u00b6 OneFlow \u5229\u7528\u51fd\u6570\u4fee\u9970\u7b26\u5c06\u666e\u901a Python \u51fd\u6570\u8f6c\u53d8\u4e3a OneFlow \u7279\u6709\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u7528\u6237\u800c\u8a00\u662f\u65e0\u611f\u3001\u900f\u660e\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u50cf\u8c03\u7528\u666e\u901a\u7684 Python \u51fd\u6570\u4e00\u6837\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u3002\u6bcf\u4e00\u6b21\u8c03\u7528\uff0cOneFlow \u90fd\u4f1a\u5728\u6846\u67b6\u5185\u90e8\u5b8c\u6210\u6b63\u5411\u4f20\u64ad\u3001\u53cd\u5411\u4f20\u64ad\u3001\u53c2\u6570\u66f4\u65b0\u7b49\u4e00\u7cfb\u5217\u4e8b\u60c5\u3002 \u4ee5\u4e0b\u4ee3\u7801\uff0c\u83b7\u53d6\u6570\u636e\u4e4b\u540e\uff0c\u4f1a\u5411 train_job \u4f5c\u4e1a\u51fd\u6570\u4f20\u9012\u53c2\u6570\u5e76\u8c03\u7528\uff0c\u6253\u5370 loss \u3002 ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE ) for epoch in range ( 3 ): for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u53ef\u4ee5\u770b\u5230\uff0c\u901a\u8fc7\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 train_job \u76f4\u63a5\u8fd4\u56de\u4e86 numpy \u6570\u636e\u3002 \u4ee5\u4e0a\u5c55\u793a\u7684\u8c03\u7528\u65b9\u5f0f\u662f\u540c\u6b65\u65b9\u5f0f\uff0c OneFlow \u8fd8\u652f\u6301\u5f02\u6b65\u8c03\u7528\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u9605\u4e13\u9898 \u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u3002","title":"\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528"},{"location":"single_client/extended_topics/job_function_define_call.html#_1","text":"\u5728 OneFlow \u4e2d\uff0c\u6211\u4eec\u5c06\u8bad\u7ec3\u3001\u9884\u6d4b\u4efb\u52a1\u5c01\u88c5\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u7edf\u79f0\u4e3a\u4f5c\u4e1a\u51fd\u6570(job function)\uff0c\u4f5c\u4e1a\u51fd\u6570\u8054\u7cfb\u7528\u6237\u7684\u4e1a\u52a1\u903b\u8f91\u4e0e OneFlow \u7ba1\u7406\u7684\u8ba1\u7b97\u8d44\u6e90\u3002 \u5728 OneFlow \u4e2d\uff0c\u88ab @oneflow.global_function \u88c5\u9970\u5668\u6240\u4fee\u9970\u7684 python \u51fd\u6570\uff0c\u5c31\u662f OneFlow \u4f5c\u4e1a\u51fd\u6570\u3002 \u6211\u4eec\u4e3b\u8981\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u5b9a\u4e49\u7f51\u7edc\u6a21\u578b\u7684\u7ed3\u6784\u3001\u9009\u62e9\u4f18\u5316\u6307\u6807\uff1b\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u5c06\u8bad\u7ec3\u6709\u5173\u7684\u8d85\u53c2\u53ca\u73af\u5883\u914d\u7f6e\u5f53\u505a\u53c2\u6570\u4f20\u9012\u7ed9\u4f5c\u4e1a\u51fd\u6570(\u5982:\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684\uff1a get_train_config() )\uff0cOneFlow \u4f1a\u6839\u636e\u8bbe\u7f6e\u4e3a\u6211\u4eec\u7ba1\u7406\u5185\u5b58\u3001GPU \u7b49\u786c\u4ef6\u8d44\u6e90\u3002 \u672c\u6587\u4e2d\u6211\u4eec\u5c06\u5177\u4f53\u5b66\u4e60\uff1a \u5982\u4f55\u5b9a\u4e49\u548c\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 \u5982\u4f55\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c","title":"\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528"},{"location":"single_client/extended_topics/job_function_define_call.html#oneflow","text":"\u4f5c\u4e1a\u51fd\u6570\u5206\u4e3a\u5b9a\u4e49\u548c\u8c03\u7528\u4e24\u4e2a\u9636\u6bb5\u3002 \u8fd9\u4e0e OneFlow \u672c\u8eab\u7684\u8fd0\u884c\u673a\u5236\u6709\u5173\uff0c\u7b80\u5316\u5730\u8bf4\uff0cOneFlow Python \u5c42\u63a5\u53e3\uff0c\u53ea\u662f\u5728\u63cf\u8ff0\u7f51\u7edc\u6a21\u578b\u548c\u8bad\u7ec3\u73af\u5883\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5c06\u4f20\u9012\u7ed9\u5e95\u5c42\u7684 C++ \u4ee3\u7801\uff0c\u7ecf\u8fc7\u7f16\u8bd1\u3001\u4f18\u5316\u7b49\u5de5\u4f5c\u5f97\u5230\u8ba1\u7b97\u56fe\uff0c\u6700\u7ec8\u4ea4\u7ed9 OneFlow \u8fd0\u884c\u65f6(runtime)\uff0c\u7531 OneFlow \u8fd0\u884c\u65f6\u6267\u884c\u3002 \u56e0\u4e3a\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u53ea\u662f\u505a\u63cf\u8ff0\u5de5\u4f5c\uff0c\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u7684\u6570\u636e\uff0c\u800c\u53ea\u80fd\u901a\u8fc7\u89c4\u5b9a\u7f51\u7edc\u8282\u70b9\u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u7b49\u4fe1\u606f\uff0c\u8d77\u5230 \u6570\u636e\u5360\u4f4d\u7b26 \u7684\u4f5c\u7528\uff0c\u65b9\u4fbf OneFlow \u7684\u7f16\u8bd1\u6784\u56fe\u8fc7\u7a0b\u8fdb\u884c\u6a21\u578b\u63a8\u7406\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u53d1\u751f\u5728 OneFlow runtime \u5df2\u7ecf\u542f\u52a8\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5411\u5176\u4f20\u9012\u771f\u5b9e\u7684\u6570\u636e\uff0c\u5e76\u83b7\u53d6\u8fd4\u56de\u7ed3\u679c\u3002 \u4ee5\u4e0b\u5c06\u5177\u4f53\u4ecb\u7ecd\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528\u65b9\u6cd5\u3002","title":"\u4f5c\u4e1a\u51fd\u6570\u4e0e OneFlow \u8fd0\u884c\u6d41\u7a0b\u7684\u5173\u7cfb"},{"location":"single_client/extended_topics/job_function_define_call.html#_2","text":"\u6211\u4eec\u5c06\u6a21\u578b\u5c01\u88c5\u5728 Python \u4e2d\uff0c\u518d\u4f7f\u7528 oneflow.global_function \u4fee\u9970\u7b26\u8fdb\u884c\u4fee\u9970\u3002\u5c31\u5b8c\u6210\u4e86\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u4f5c\u4e1a\u51fd\u6570\u4e3b\u8981\u63cf\u8ff0\u4e24\u65b9\u9762\u7684\u4e8b\u60c5\uff1a \u6a21\u578b\u7ed3\u6784 \u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u4f18\u5316\u76ee\u6807 \u4ee5\u4e0b\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a mlp \u6a21\u578b\u3002\u5e76\u4e14\u5c06\u7531 flow.nn.sparse_softmax_cross_entropy_with_logits \u8ba1\u7b97\u5f97\u5230\u4ea4\u53c9\u71b5\u635f\u5931\u7ed3\u679c\u4f5c\u4e3a\u4f18\u5316\u76ee\u6807\u3002 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Callback [ tp . Numpy ]: # mlp initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"hidden\" , ) logits = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"output\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss","title":"\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49"},{"location":"single_client/extended_topics/job_function_define_call.html#oneflowglobal_function","text":"oneflow.global_function \u4fee\u9970\u7b26\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u662f type \u4e0e function_config \u3002 type \u53c2\u6570\u63a5\u6536\u5b57\u7b26\u4e32\uff0c\u53ea\u80fd\u8bbe\u5b9a\u4e3a train \u6216\u8005 predict \uff0c\u5f53\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u8bbe\u5b9a\u4e3a train \uff0c\u5f53\u5b9a\u4e49\u6d4b\u8bd5\u6a21\u578b\u65f6\uff0c\u8bbe\u5b9a\u4e3a predict function_config \u53c2\u6570\u63a5\u6536\u4e00\u4e2a oneflow.function_config() \u6240\u6784\u9020\u7684\u5bf9\u8c61\uff0c\u5728 function_config \u5bf9\u8c61\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u6210\u5458\u65b9\u6cd5\u6216\u5c5e\u6027\uff0c\u8fdb\u884c\u76f8\u5173\u914d\u7f6e\u3002\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a def get_train_config (): config = flow . function_config () config . default_data_type ( flow . float ) return config \u6211\u4eec\u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u6570\u636e\u7c7b\u578b\uff0c\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u5411 global_function \u88c5\u9970\u5668\u4f20\u9012\u8fd9\u4e2a function_config \u5bf9\u8c61\uff1a @flow . global_function ( type = \"train\" , function_config = get_train_config ()) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : \u5305\u542b\u4ee5\u4e0a\u4ee3\u7801\u7684\u5b8c\u6574\u793a\u4f8b\u53ef\u89c1\u6587\u7ae0 Consistent \u4e0e Mirrored \u89c6\u89d2 \u4e2d\u7684 mixed_parallel_mlp.py","title":"oneflow.global_function \u7684\u53c2\u6570"},{"location":"single_client/extended_topics/job_function_define_call.html#_3","text":"\u6ce8\u610f\uff0c\u4ee5\u4e0a\u7684 images \u3001 logits \u3001 labels \u3001 loss \u7b49\u5bf9\u8c61\uff0c\u5728\u6211\u4eec\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u7684\u6570\u636e\u3002\u5b83\u4eec\u7684\u4f5c\u7528\u53ea\u662f \u63cf\u8ff0\u6570\u636e\u7684\u5f62\u72b6\u548c\u5c5e\u6027 \uff0c\u8d77\u5230 \u5360\u4f4d\u7b26 \u7684\u4f5c\u7528\u3002 \u5728\u4f5c\u4e1a\u51fd\u6570\u7684\u53c2\u6570\u4e2d\u7684\u6570\u636e\u5360\u4f4d\u7b26\uff0c\u4f7f\u7528 flow.typing \u4e0b\u7684 Numpy.Placeholder \u3001 ListNumpy.Placeholder \u3001 ListListNumpy.Placeholder \uff0c\u6ce8\u89e3\u4f5c\u4e1a\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5bf9\u5e94\u4f5c\u4e1a\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u4f20\u9012 numpy \u6570\u636e\u5bf9\u8c61\u3002 \u9664\u4e86 flow.typing \u4e0b\u7684\u51e0\u79cd\u7c7b\u578b\u4e4b\u5916\uff0c\u4e0d\u51fa\u73b0\u5728\u53c2\u6570\u4e2d\u5e76\u4e14\u7531 OneFlow \u7684\u7b97\u5b50\u6216\u5c42\u4ea7\u751f\u7684\u53d8\u91cf\uff0c\u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 reshape \u3001 hidden \u3001 logits \u3001 loss \u7b49\uff0c\u4e5f\u90fd\u8d77\u5230\u4e86\u6570\u636e\u5360\u4f4d\u7b26\u7684\u4f5c\u7528\u3002 \u4e0d\u7ba1\u662f\u4ee5\u4e0a\u63d0\u53ca\u7684\u54ea\u79cd\u53d8\u91cf\uff0c\u5b83\u4eec\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u7ee7\u627f\u81ea OneFlow \u7684 BlobDef \u57fa\u7c7b\uff0cOneFlow \u4e2d\u628a\u8fd9\u79cd\u5bf9\u8c61\u7c7b\u578b\u7edf\u79f0\u4e3a Blob \u3002 Blob \u5728\u4f5c\u4e1a\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u5747\u65e0\u771f\u5b9e\u6570\u636e\uff0c\u5747\u53ea\u8d77\u5230\u6570\u636e\u5360\u4f4d\u65b9\u4fbf\u6846\u67b6\u63a8\u7406\u7684\u4f5c\u7528\u3002","title":"\u6570\u636e\u5360\u4f4d\u7b26"},{"location":"single_client/extended_topics/job_function_define_call.html#_4","text":"\u4e4b\u6240\u4ee5\u5728\u4e0a\u6587\u4e2d\u5f3a\u8c03\u6570\u636e\u5360\u4f4d\u7b26 Blob \u7684\u6982\u5ff5\uff0c\u662f\u56e0\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e0d\u80fd\u4efb\u610f\u6307\u5b9a\u7684\uff0c\u5fc5\u987b\u662f Blob \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u6216\u8005\u5b58\u6709 Blob \u5bf9\u8c61\u7684\u5bb9\u5668\u3002 \u5982\u4ee5\u4e0a\u4ee3\u7801\u7684\u4e2d\u6240\u8fd4\u56de\u7684 loss \uff0c\u5b83\u5c31\u662f Blob \u7c7b\u578b\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u9700\u8981\u901a\u8fc7\u6ce8\u89e3\u58f0\u660e\uff0c\u6bd4\u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 -> tp.Numpy \uff0c\u8868\u793a\u8fd4\u56de1\u4e2a Blob \u3002 \u518d\u6bd4\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u6ce8\u89e3\u58f0\u660e\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a -> Tuple[tp.Numpy, tp.Numpy] \uff0c\u8868\u793a\u8fd4\u56de1\u4e2a tuple \uff0c\u8be5 tuple \u4e2d\u67092\u4e2a Blob \u5bf9\u8c61\u3002 \u5177\u4f53\u7684\u4f7f\u7528\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u8003 \u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c","title":"\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c"},{"location":"single_client/extended_topics/job_function_define_call.html#_5","text":"OneFlow \u5229\u7528\u51fd\u6570\u4fee\u9970\u7b26\u5c06\u666e\u901a Python \u51fd\u6570\u8f6c\u53d8\u4e3a OneFlow \u7279\u6709\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u7528\u6237\u800c\u8a00\u662f\u65e0\u611f\u3001\u900f\u660e\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u50cf\u8c03\u7528\u666e\u901a\u7684 Python \u51fd\u6570\u4e00\u6837\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u3002\u6bcf\u4e00\u6b21\u8c03\u7528\uff0cOneFlow \u90fd\u4f1a\u5728\u6846\u67b6\u5185\u90e8\u5b8c\u6210\u6b63\u5411\u4f20\u64ad\u3001\u53cd\u5411\u4f20\u64ad\u3001\u53c2\u6570\u66f4\u65b0\u7b49\u4e00\u7cfb\u5217\u4e8b\u60c5\u3002 \u4ee5\u4e0b\u4ee3\u7801\uff0c\u83b7\u53d6\u6570\u636e\u4e4b\u540e\uff0c\u4f1a\u5411 train_job \u4f5c\u4e1a\u51fd\u6570\u4f20\u9012\u53c2\u6570\u5e76\u8c03\u7528\uff0c\u6253\u5370 loss \u3002 ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE ) for epoch in range ( 3 ): for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u53ef\u4ee5\u770b\u5230\uff0c\u901a\u8fc7\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 train_job \u76f4\u63a5\u8fd4\u56de\u4e86 numpy \u6570\u636e\u3002 \u4ee5\u4e0a\u5c55\u793a\u7684\u8c03\u7528\u65b9\u5f0f\u662f\u540c\u6b65\u65b9\u5f0f\uff0c OneFlow \u8fd8\u652f\u6301\u5f02\u6b65\u8c03\u7528\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u9605\u4e13\u9898 \u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u3002","title":"\u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528"},{"location":"single_client/extended_topics/model_mixed_parallel.html","text":"OneFlow \u7684\u5e76\u884c\u7279\u8272 \u00b6 \u5728 Consistent \u4e0e Mirrored \u89c6\u89d2 \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 OneFlow \u63d0\u4f9b\u4e86 mirrored \u4e0e consistent \u4e24\u79cd\u770b\u5f85\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u89c6\u89d2\uff0c\u5e76\u4e14\u63d0\u524d\u77e5\u9053\u4e86 OneFlow \u7684 consistent \u89c6\u89d2\u9887\u5177\u7279\u8272\u3002 \u56e0\u4e3a\u5728 consistent_view \u4e0b\uff0cOneFlow \u63d0\u4f9b\u4e86\u903b\u8f91\u4e0a\u7edf\u4e00\u7684\u89c6\u89d2\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u8fd8\u662f\u662f\u6df7\u5408\u5e76\u884c\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u7ee7\u7eed\u6df1\u5165\u4ecb\u7ecd OneFlow \u72ec\u5177\u7279\u8272\u7684 consistent \u89c6\u89d2\uff0c\u5305\u62ec\uff1a OneFlow \u5728 consistent_view \u4e0b\u7eaf\u6570\u636e\u5e76\u884c\u6d41\u7a0b\u793a\u610f OneFlow \u5728 consistent_view \u4e0b\u6df7\u5408\u5e76\u884c\u6d41\u7a0b\u793a\u610f \u6df7\u5408\u5e76\u884c\u7684\u4f18\u52bf\u53ca\u9002\u7528\u573a\u666f OneFlow \u6df7\u5408\u5e76\u884c\u5b9e\u4f8b \u7f51\u7edc\u6a21\u578b\u8bad\u7ec3\u7684\u903b\u8f91\u56fe \u00b6 \u6211\u4eec\u5148\u8bbe\u5b9a\u4e00\u4e2a\u7b80\u5355\u7684\u591a\u5c42\u7f51\u7edc\uff0c\u4f5c\u4e3a\u6211\u4eec\u6211\u4eec\u8ba8\u8bba\u5e76\u884c\u65b9\u5f0f\u7684\u8f7d\u4f53\uff0c\u5176\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5404\u5c42\u4e2d\uff0c\u6709 \u6837\u672c (\u7070\u8272\u77e9\u5f62)\u3001 \u6a21\u578b (\u84dd\u8272\u77e9\u5f62)\uff0c\u4ee5\u53ca\u4f5c\u7528\u5728\u4e24\u8005\u4e4b\u4e0a\u7684 op (\u5706\u5f62)\uff0c\u4e3a\u4e86\u7b80\u5316\u8ba8\u8bba\uff0c\u6211\u4eec\u4e5f\u53ef\u5c06\u6837\u672c\u4e0e\u6a21\u578b\u9650\u5b9a\u4e3a \u77e9\u9635 \uff0c\u4f5c\u7528\u5728\u5b83\u4eec\u4e4b\u4e0a\u7684op\u4e3a \u77e9\u9635\u4e58\u6cd5 \u3002 \u5bf9\u7167\u4e0a\u56fe\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u68b3\u7406\u51fa\u8be5\u7f51\u7edc\u6a21\u578b\u7684\u903b\u8f91\uff1a \u7b2c0\u5c42\u7684\u8f93\u5165\u4e3a Data 0 \u77e9\u9635\u4e0e Model 0 \u77e9\u9635\uff0c\u5b83\u4eec\u8fdb\u884c op (\u77e9\u9635\u4e58\u6cd5)\u8fd0\u7b97\u540e\uff0c\u8f93\u51fa Data 1 \u7b2c1\u5c42\u7684\u8f93\u5165\u4e3a Data 1 \u77e9\u9635\u4e0e Model 1 \u77e9\u9635\uff0c\u5b83\u4eec\u8fdb\u884c op \u8fd0\u7b97\u540e\uff0c\u8f93\u51fa output \u7b2c2\u5c42\u4e3a output \u5c42\uff0c Data 2 \u4f5c\u4e3a\u6574\u4e2a\u7f51\u7edc\u7684\u8f93\u51fa\uff1b\u5f53\u7136\uff0c\u5728\u66f4\u6df1\u7684\u7f51\u7edc\u4e2d\uff0c\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\u7ee7\u7eed\u53c2\u4e0e\u8bad\u7ec3 consistent \u89c6\u89d2\u4e0b\u652f\u6301\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u4e0e\u6df7\u5408\u5e76\u884c\uff0c\u6211\u4eec\u5c06\u4f9d\u6b21\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5176\u4e2d\u6df7\u5408\u5e76\u884c\u662f\u91cd\u70b9\u3002 Consistent \u89c6\u89d2\u4e0b\u7684\u5e76\u884c\u7279\u8272 \u00b6 \u7eaf\u6570\u636e\u5e76\u884c \u00b6 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0cconsistent \u89c6\u89d2\u4e0b\uff0c\u9ed8\u8ba4\u7684\u5e76\u884c\u65b9\u5f0f\u662f\u6570\u636e\u5e76\u884c\uff1b\u800c\u5982\u679c\u9009\u62e9 mirrored \u89c6\u89d2\uff0c\u5219\u53ea\u80fd\u91c7\u7528\u6570\u636e\u5e76\u884c\uff1b\u82e5\u5728\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\u76f4\u63a5\u4f20\u9012 numpy \u6570\u636e(\u800c\u4e0d\u662f\u4f7f\u7528 OneFlow \u7684 DataLoader \u53ca\u76f8\u5173\u7b97\u5b50 )\uff0c\u4e24\u8005\u7684\u533a\u522b\u5728\u4e8e\uff1a mirrored \u89c6\u89d2\u4e0b\uff0c\u91c7\u7528\u7eaf\u6570\u636e\u5e76\u884c\uff0c\u9700\u8981\u81ea\u5df1\u6839\u636e\u53c2\u4e0e\u8bad\u7ec3\u7684\u5361\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u5207\u5206\u3001\u91cd\u7ec4\uff0c\u4f7f\u7528 list \u4f20\u9012\u548c\u63a5\u6536\u6570\u636e\uff1b \u800c consistent \u89c6\u89d2\u4e0b\u63d0\u4f9b\u4e86\u903b\u8f91\u4e0a\u7684\u7edf\u4e00\u770b\u5f85\uff0c\u6570\u636e\u7684\u5207\u5206\u548c\u91cd\u7ec4\u4ea4\u7ed9\u4e86 OneFlow \u6846\u67b6\u5b8c\u6210\u3002 \u4e0b\u56fe\u662f consistent \u89c6\u89d2\u4e0b\uff0c\u91c7\u7528\u7eaf\u6570\u636e\u5e76\u884c\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u539f\u903b\u8f91\u7f51\u7edc\u6a21\u578b\u7684\u6d41\u7a0b\u793a\u610f\u56fe\uff1a \u5728\u7eaf\u6570\u636e\u5e76\u884c\u4e2d\uff0c\u91c7\u7528\u4e862\u5f20\u663e\u5361\u8fdb\u884c\u5e76\u884c\u8bad\u7ec3\uff0c\u56e0\u4e3a\u91c7\u7528\u4e86 \u7eaf\u6570\u636e\u5e76\u884c \uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e8e\u539f\u903b\u8f91\u6a21\u578b\u4e2d\u7684\u6bcf\u4e00\u5c42\uff0c\u6837\u672c\u6570\u636e\u90fd\u88ab\u5e73\u5747\u5206\u914d\u5230\u4e86\u5404\u4e2a\u5361\u4e0a\uff0c\u6bcf\u5f20\u5361\u4e0a\u90fd\u62e5\u6709 \u5b8c\u6574\u7684\u6a21\u578b \uff0c\u4e0e\u5207\u5206\u7684\u6570\u636e\u8fdb\u884c op \u8fd0\u7b97\uff0c\u6700\u540e\u7ec4\u5408\u5404\u4e2a\u5361\u4e0a\u7684\u6837\u672c\uff0c\u5f97\u5230\u5b8c\u6574\u7684\u8f93\u51fa\u3002 \u7eaf\u6a21\u578b\u5e76\u884c \u00b6 \u5728 consistent \u89c6\u89d2\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u7eaf\u6a21\u578b\u5e76\u884c\uff08\u8bbe\u7f6e\u65b9\u5f0f\u5728\u4e0b\u6587\u5b9e\u4f8b\u4e2d\u4f1a\u4ecb\u7ecd\uff09\uff0c\u5176\u6d41\u7a0b\u793a\u610f\u56fe\u4e3a\uff1a \u5728\u7eaf\u6a21\u578b\u5e76\u884c\u4e2d\uff0c\u540c\u6837\u662f2\u5f20\u663e\u5361\u8fdb\u884c\u5e76\u884c\u8bad\u7ec3\uff0c\u539f\u903b\u8f91\u6a21\u578b\u4e2d\u7684\u6bcf\u4e00\u5c42\u4e2d\uff0c\u90fd\u662f \u90e8\u5206\u6a21\u578b \u4e0e \u5b8c\u6574\u7684\u6570\u636e \u8fdb\u884c op \u8fd0\u7b97\uff0c\u6700\u540e\u7ec4\u5408\u5f97\u5230\u5b8c\u6574\u7684\u8f93\u51fa\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u5404\u4e2a\u5361\u4e0a\u7b2c0\u5c42\u7684\u8f93\u51fa\uff0c\u5e76 \u4e0d\u80fd \u76f4\u63a5\u4f5c\u4e3a\u7b2c1\u5c42\u7684\u8f93\u5165\uff1a\u56e0\u4e3a\u6a21\u578b\u5e76\u884c\u4e2d\uff0c\u4e3a\u5b8c\u6210 op \u64cd\u4f5c\uff0c\u9700\u8981\u90e8\u5206\u7684\u6a21\u578b\u4e0e \u5b8c\u6574\u7684 \u6570\u636e\uff1b \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cOneFlow \u4e2d\u4f7f\u7528\u4e86 boxing \u673a\u5236\u3002 boxing \u673a\u5236\u4f1a\u7edf\u7b79\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u5404\u4e2a\u8282\u70b9\u7684\u6570\u636e\uff0c\u5e76\u5408\u7406\u5207\u5206\u3001\u5408\u5e76\u5230\u5bf9\u5e94\u7684\u5361\u4e0a\uff0c\u9664\u4e86\u6a21\u578b\u5e76\u884c\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u91cd\u7ec4\u95ee\u9898\u5916\uff0c\u6570\u636e\u5e76\u884c\u4e2d\u7684\u53cd\u5411\u68af\u5ea6\u540c\u6b65\uff0c\u4e5f\u4f7f\u7528 boxing \u673a\u5236\u89e3\u51b3\u3002 boxing \u7684\u5185\u90e8\u673a\u5236\u867d\u7136\u590d\u6742\uff0c\u4f46\u662f\u5bf9\u4e8e\u7528\u6237\u800c\u8a00\u662f\u900f\u660e\u7684\uff0c\u6211\u4eec\u4ec5\u4ec5\u662f\u9632\u6b62\u8bfb\u8005\u4ea7\u751f\u8ff7\u60d1\u624d\u52a0\u5165\u4e86 boxing \u7684\u56fe\u793a\uff0c\u5bf9\u4e8e\u672c\u6587\u800c\u8a00\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e86\u89e3\uff1aOneFlow \u4f1a\u81ea\u52a8\u534f\u8c03\u597d\u5206\u5e03\u5f0f\u4e2d\u6570\u636e\u7684\u540c\u6b65\u95ee\u9898\u3002 \u9009\u62e9\u6700\u4f18\u7684\u5e76\u884c\u65b9\u5f0f \u00b6 \u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\u7684\u4f18\u52a3\u5e76\u4e0d\u662f\u4e00\u6210\u4e0d\u53d8\u7684\uff0c\u6837\u672c\u89c4\u6a21\u3001\u6a21\u578b\u89c4\u6a21\u53ca\u6a21\u578b\u7ed3\u6784\u51b3\u5b9a\u4e86\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u7684\u7efc\u5408\u8868\u73b0\uff0c\u9700\u8981\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\u3002 \u6982\u62ec\u800c\u8a00\uff1a \u6570\u636e\u5e76\u884c\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u540c\u6b65\u7684\u4fe1\u606f\u662f\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u7684 \u68af\u5ea6 \uff0c\u56e0\u6b64\u5e94\u8be5\u786e\u4fdd\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u4e4b\u95f4\u7684\u4fe1\u606f\u540c\u6b65\u901f\u5ea6\u8981\u6bd4\u8282\u70b9\u5185\u90e8\u7684\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u6bd4\u5982\u8bf4 \u5377\u79ef\u5c42 \u7684\u53c2\u6570\u8f83\u5c11\uff0c\u4f46\u662f\u8ba1\u7b97\u91cf\u5927\uff0c\u5c31\u6bd4\u8f83\u9002\u5408\u4f7f\u7528\u6570\u636e\u5e76\u884c\uff1b \u6a21\u578b\u5e76\u884c\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5c06\u903b\u8f91\u4e0a\u4f5c\u4e3a\u6574\u4f53\u7684\u6a21\u578b \u5207\u5206\u5230\u5404\u4e2a\u7269\u7406\u5361 \u4e0a\uff0c\u80fd\u591f\u89e3\u51b3\u201c\u6a21\u578b\u592a\u5927\uff0c\u4e00\u5f20\u5361\u88c5\u4e0d\u4e0b\u201d\u7684\u95ee\u9898\uff0c\u56e0\u6b64\uff0c\u5bf9\u4e8e\u53c2\u6570\u91cf\u5927\u7684\u795e\u7ecf\u7f51\u7edc\u5c42\uff08\u5982\u6700\u540e\u7684\u5168\u8fde\u63a5\u5c42\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u6a21\u578b\u5e76\u884c\u3002 \u5b9e\u9645\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u6df7\u5408\u5e76\u884c \uff0c\u5728\u540c\u4e00\u4e2a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u7ec4\u5408\u4f7f\u7528\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u3002\u6bd4\u5982\uff0c\u5bf9\u4e8e\u795e\u7ecf\u7f51\u7edc\u4e2d\u9760\u524d\u7684\u53c2\u6570\u8f83\u5c11\u3001\u8ba1\u7b97\u91cf\u5927\u7684\u5c42\uff0c\u91c7\u7528\u6570\u636e\u5e76\u884c\uff1b\u5728\u6700\u7ec8\u7684\u53c2\u6570\u4f17\u591a\u7684\u5168\u8fde\u63a5\u5c42\uff0c\u5219\u91c7\u7528\u6a21\u578b\u5e76\u884c\uff0c\u4ee5\u4e0b\u662f\u9488\u5bf9\u672c\u6587\u6700\u5f00\u59cb\u7684\u7f51\u7edc\u6a21\u578b\u903b\u8f91\u56fe\u7684 \u6df7\u5408\u5e76\u884c \u5b9e\u73b0\u65b9\u6848\u7684\u793a\u610f\u56fe\uff1a \u76ee\u524d\uff0c\u5176\u5b83\u7684\u4e3b\u6d41\u6846\u67b6\u5bf9\u4e8e\u6df7\u5408\u5e76\u884c\u6216\u8005\u4e0d\u652f\u6301\uff0c\u6216\u8005\u9700\u8981\u6df1\u5ea6\u5b9a\u5236\uff0c\u800c OneFlow \u4e2d\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u8bbe\u7f6e\uff0c\u914d\u7f6e\u6df7\u5408\u5e76\u884c\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u8fd8\u53ef\u4ee5\u7528\u81ea\u7531\u5ea6\u8d85\u9ad8\u7684\u6d41\u6c34\u5e76\u884c\uff0c\u6df1\u5ea6\u4f18\u5316\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002 \u6df7\u5408\u5e76\u884c\u5b9e\u4f8b \u00b6 \u4ee3\u7801 \u00b6 \u4ee5\u4e0b\u811a\u672c\uff0c\u5728 consistent \u89c6\u89d2\u4e0b\uff0c\u6211\u4eec\u5bf9 MLP \u6a21\u578b\u91c7\u7528\u4e86\u6df7\u5408\u5e76\u884c\u65b9\u6848\uff1a\u8f93\u5165\u5c42\u4e0e\u9690\u85cf\u5c42\u91c7\u7528\uff08\u9ed8\u8ba4\u7684\uff09\u6570\u636e\u5e76\u884c\uff1b\u8f93\u51fa\u5c42\u91c7\u7528\u6a21\u578b\u5e76\u884c\u5e76\u8fdb\u884c\u5217\u5207\u5206\u3002 \u4ee3\u7801\uff1a hybrid_parallelism_mlp.py \u66f4\u5177\u4f53\u7684\u89e3\u6790\u5728\u540e\u6587\u201c\u4ee3\u7801\u89e3\u8bfb\u201d\u53ef\u89c1\u3002 \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4ee5\u4e0a\u811a\u672c\u4fee\u6539\u81ea 3\u5206\u949f\u5feb\u901f\u4e0a\u624b \u4e2d\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u6bd4\u8f83\u4e24\u4efd\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5\u4f53\u4f1a\u5230\u5728 OneFlow \u7684 consistent_view \u4e0b\u8fdb\u884c\u5404\u79cd\u5e76\u884c\u65b9\u6848\u7684\u914d\u7f6e\u662f\u591a\u4e48\u7684\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u5355\u673a\u7684\u7a0b\u5e8f\u4e0a\u7a0d\u52a0\u4fee\u6539\u5373\u53ef\u3002 \u4ee5\u4e0a\u7a0b\u5e8f\u7684\u5173\u952e\u90e8\u5206\u6709\uff1a \u901a\u8fc7 oneflow.config.gpu_device_num \u63a5\u53e3\u8bbe\u7f6e\u53c2\u4e0e\u8bad\u7ec3\u7684GPU\u6570\u76ee\uff1a flow . config . gpu_device_num ( 2 ) reshape \u53ca hidden \u91c7\u7528\u9ed8\u8ba4\u7684\u6570\u636e\u5e76\u884c\uff0c\u4e0d\u9700\u8981\u4fee\u6539\uff1b\u8f93\u51fa\u5c42\u901a\u8fc7\u8bbe\u7f6e model_distribute \u4e3a flow.distribute.split(axis=0) \u53d8\u4e3a\u6a21\u578b\u5e76\u884c\uff1a def mlp ( data ): initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( data , [ data . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , # dense\u4e3a\u5217\u5b58\u50a8\uff0c\u8fdb\u884csplit(0)\u5207\u5206 model_distribute = flow . distribute . split ( axis = 0 ), name = \"dense2\" , ) \u6709\u8bfb\u8005\u53ef\u80fd\u597d\u5947\u4e3a\u4ec0\u4e48 split(axis=0) \u662f\u5217\u5207\u5206\uff1f\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cOneFlow \u4e2d\u7684 dense \u5185\u90e8\u91c7\u7528\u5217\u5b58\u50a8\uff0c\u56e0\u6b64\u4ee5\u4e0a\u4ee3\u7801\u7684 flow.distribute.split(axis=0) \u786e\u5b9e\u662f\u5728\u505a\u5217\u5207\u5206\u3002 \u6b64\u5916\uff0c flow.layers.dense \u4f7f\u7528 model_distribute \u5f62\u53c2\u8bbe\u7f6e\u5e76\u884c\u65b9\u5f0f\uff0c\u5176\u5185\u90e8\u8c03\u7528\u4e86\u5e95\u5c42\u66f4\u901a\u7528\u7684 get_variable \u63a5\u53e3\u521b\u5efa blob \uff0c get_variable \u63a5\u53e3\u8bbe\u7f6e\u5e76\u884c\u65b9\u5f0f\u7684\u5f62\u53c2\u540d\u4e3a distribute \u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u901a\u8fc7\u6781\u5c11\u91cf\u7684\u4fee\u6539\uff0c\u5c31\u80fd\u5c06\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f\u6539\u4e3a\u5206\u5e03\u5f0f\u3001\u6df7\u5408\u5e76\u884c\u7684\u7a0b\u5e8f\uff0c\u8fd9\u662f OneFlow \u533a\u522b\u4e8e\u5176\u5b83\u6846\u67b6\u7684\u4e00\u5927\u7279\u8272\u3002 \u6d41\u6c34\u5e76\u884c\u5b9e\u4f8b \u00b6 \u5728\u6a21\u578b\u5e76\u884c\u4e4b\u5916\uff0cOneFlow \u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u7075\u6d3b\u5ea6\u66f4\u9ad8\u7684\u201c\u6d41\u6c34\u5e76\u884c\u201d\u7684\u5e76\u884c\u65b9\u5f0f\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u4f7f\u7528 scope.placement \u63a5\u53e3\u663e\u5f0f\u6307\u5b9a\u7528\u6765\u8fd0\u884c\u903b\u8f91 op \u7684 \u7269\u7406\u786c\u4ef6 \u3002 \u5728\u6d41\u6c34\u5e76\u884c\u4e2d\uff0c\u6574\u4e2a\u795e\u7ecf\u7f51\u7edc\u6709\u7684\u5c42\u6b21\u5728\u4e00\u7ec4\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u53e6\u5916\u4e00\u4e9b\u5c42\u6b21\u5728\u53e6\u5916\u4e00\u7ec4\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u5b83\u4eec\u4ee5\u63a5\u529b\u7684\u65b9\u5f0f\u534f\u540c\u5de5\u4f5c\uff0c\u5206\u591a\u4e2a\u9636\u6bb5\uff0c\u5728\u8bbe\u5907\u4e4b\u95f4\u6d41\u6c34\u6267\u884c\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bf9 Consistent \u4e0e Mirrored \u89c6\u89d2 \u4e2d\u7684\u201c\u5728 OneFlow \u4e2d\u4f7f\u7528 consistent \u89c6\u89d2\u201d\u4ee3\u7801\u8fdb\u884c\u7b80\u5355\u4fee\u6539\uff0c\u5c55\u793a\u4e86\u6d41\u6c34\u5e76\u884c\u6a21\u5f0f\u3002 \u4ee3\u7801 \u00b6 \u5b8c\u6574\u4ee3\u7801\uff1a hybrid_parallelism_lenet.py \u66f4\u8be6\u7ec6\u7684\u8ba8\u8bba\u53ef\u89c1\u540e\u6587\u7684\u201c\u4ee3\u7801\u89e3\u8bfb\u201d\u3002 \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4ee5\u4e0a\u5173\u952e\u7684\u4ee3\u7801\u53ea\u67092\u884c\uff0c\u4e14\u4ed6\u4eec\u7684\u672c\u8d28\u4f5c\u7528\u662f\u7c7b\u4f3c\u7684\uff1a \u901a\u8fc7 oneflow.scope.placement \uff0c\u6307\u5b9a hidden \u5c42\u7684 op \u8ba1\u7b97\u8fd0\u884c\u57280\u53f7 GPU \u4e0a with flow . scope . placement ( \"gpu\" , \"0:0\" ): hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"hidden\" , ) \u901a\u8fc7 oneflow.scope.placement \uff0c\u6307\u5b9a output \u5c42\u7684op\u8ba1\u7b97\u8fd0\u884c\u5728\u7b2c0\u53f7\u4e3b\u673a\u76841\u53f7 GPU \u4e0a with flow . scope . placement ( \"gpu\" , \"0:1\" ): output = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"outlayer\" ) scope.placement \u7684\u5177\u4f53\u4f7f\u7528\uff0c\u53ef\u53c2\u9605 API \u6587\u6863 \u3002 \u6d41\u6c34\u5e76\u884c\uff0c\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u4e3a\u6bcf\u4e2a op \u6307\u5b9a\u7269\u7406\u8bbe\u5907\uff0c\u975e\u5e38\u9002\u5408\u5bf9\u7f51\u7edc\u6a21\u578b\u53ca\u5206\u5e03\u5f0f\u60c5\u51b5\u90fd\u5f88\u719f\u6089\u7684\u7528\u6237\u8fdb\u884c \u6df1\u5ea6\u4f18\u5316 \u3002 \u6b64\u5916\uff0cOneFlow \u63d0\u4f9b\u7684 API oneflow.unpack \u3001 oneflow.pack \u7b49\uff0c\u7ed3\u5408\u4e86 OneFlow \u81ea\u8eab\u4efb\u52a1\u8c03\u5ea6\u7684\u7279\u70b9\uff0c\u4f7f\u5f97\u6d41\u6c34\u5e76\u884c\u66f4\u6613\u7528\u3001\u9ad8\u6548\uff0c\u6211\u4eec\u5c06\u5728\u53e6\u5916\u7684\u6587\u7ae0\u4e2d\u4e13\u95e8\u4ecb\u7ecd\u3002","title":"OneFlow \u7684\u5e76\u884c\u7279\u8272"},{"location":"single_client/extended_topics/model_mixed_parallel.html#oneflow","text":"\u5728 Consistent \u4e0e Mirrored \u89c6\u89d2 \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 OneFlow \u63d0\u4f9b\u4e86 mirrored \u4e0e consistent \u4e24\u79cd\u770b\u5f85\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u89c6\u89d2\uff0c\u5e76\u4e14\u63d0\u524d\u77e5\u9053\u4e86 OneFlow \u7684 consistent \u89c6\u89d2\u9887\u5177\u7279\u8272\u3002 \u56e0\u4e3a\u5728 consistent_view \u4e0b\uff0cOneFlow \u63d0\u4f9b\u4e86\u903b\u8f91\u4e0a\u7edf\u4e00\u7684\u89c6\u89d2\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u8fd8\u662f\u662f\u6df7\u5408\u5e76\u884c\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u7ee7\u7eed\u6df1\u5165\u4ecb\u7ecd OneFlow \u72ec\u5177\u7279\u8272\u7684 consistent \u89c6\u89d2\uff0c\u5305\u62ec\uff1a OneFlow \u5728 consistent_view \u4e0b\u7eaf\u6570\u636e\u5e76\u884c\u6d41\u7a0b\u793a\u610f OneFlow \u5728 consistent_view \u4e0b\u6df7\u5408\u5e76\u884c\u6d41\u7a0b\u793a\u610f \u6df7\u5408\u5e76\u884c\u7684\u4f18\u52bf\u53ca\u9002\u7528\u573a\u666f OneFlow \u6df7\u5408\u5e76\u884c\u5b9e\u4f8b","title":"OneFlow \u7684\u5e76\u884c\u7279\u8272"},{"location":"single_client/extended_topics/model_mixed_parallel.html#_1","text":"\u6211\u4eec\u5148\u8bbe\u5b9a\u4e00\u4e2a\u7b80\u5355\u7684\u591a\u5c42\u7f51\u7edc\uff0c\u4f5c\u4e3a\u6211\u4eec\u6211\u4eec\u8ba8\u8bba\u5e76\u884c\u65b9\u5f0f\u7684\u8f7d\u4f53\uff0c\u5176\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5404\u5c42\u4e2d\uff0c\u6709 \u6837\u672c (\u7070\u8272\u77e9\u5f62)\u3001 \u6a21\u578b (\u84dd\u8272\u77e9\u5f62)\uff0c\u4ee5\u53ca\u4f5c\u7528\u5728\u4e24\u8005\u4e4b\u4e0a\u7684 op (\u5706\u5f62)\uff0c\u4e3a\u4e86\u7b80\u5316\u8ba8\u8bba\uff0c\u6211\u4eec\u4e5f\u53ef\u5c06\u6837\u672c\u4e0e\u6a21\u578b\u9650\u5b9a\u4e3a \u77e9\u9635 \uff0c\u4f5c\u7528\u5728\u5b83\u4eec\u4e4b\u4e0a\u7684op\u4e3a \u77e9\u9635\u4e58\u6cd5 \u3002 \u5bf9\u7167\u4e0a\u56fe\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u68b3\u7406\u51fa\u8be5\u7f51\u7edc\u6a21\u578b\u7684\u903b\u8f91\uff1a \u7b2c0\u5c42\u7684\u8f93\u5165\u4e3a Data 0 \u77e9\u9635\u4e0e Model 0 \u77e9\u9635\uff0c\u5b83\u4eec\u8fdb\u884c op (\u77e9\u9635\u4e58\u6cd5)\u8fd0\u7b97\u540e\uff0c\u8f93\u51fa Data 1 \u7b2c1\u5c42\u7684\u8f93\u5165\u4e3a Data 1 \u77e9\u9635\u4e0e Model 1 \u77e9\u9635\uff0c\u5b83\u4eec\u8fdb\u884c op \u8fd0\u7b97\u540e\uff0c\u8f93\u51fa output \u7b2c2\u5c42\u4e3a output \u5c42\uff0c Data 2 \u4f5c\u4e3a\u6574\u4e2a\u7f51\u7edc\u7684\u8f93\u51fa\uff1b\u5f53\u7136\uff0c\u5728\u66f4\u6df1\u7684\u7f51\u7edc\u4e2d\uff0c\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\u7ee7\u7eed\u53c2\u4e0e\u8bad\u7ec3 consistent \u89c6\u89d2\u4e0b\u652f\u6301\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u4e0e\u6df7\u5408\u5e76\u884c\uff0c\u6211\u4eec\u5c06\u4f9d\u6b21\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5176\u4e2d\u6df7\u5408\u5e76\u884c\u662f\u91cd\u70b9\u3002","title":"\u7f51\u7edc\u6a21\u578b\u8bad\u7ec3\u7684\u903b\u8f91\u56fe"},{"location":"single_client/extended_topics/model_mixed_parallel.html#consistent","text":"","title":"Consistent \u89c6\u89d2\u4e0b\u7684\u5e76\u884c\u7279\u8272"},{"location":"single_client/extended_topics/model_mixed_parallel.html#_2","text":"\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0cconsistent \u89c6\u89d2\u4e0b\uff0c\u9ed8\u8ba4\u7684\u5e76\u884c\u65b9\u5f0f\u662f\u6570\u636e\u5e76\u884c\uff1b\u800c\u5982\u679c\u9009\u62e9 mirrored \u89c6\u89d2\uff0c\u5219\u53ea\u80fd\u91c7\u7528\u6570\u636e\u5e76\u884c\uff1b\u82e5\u5728\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\u76f4\u63a5\u4f20\u9012 numpy \u6570\u636e(\u800c\u4e0d\u662f\u4f7f\u7528 OneFlow \u7684 DataLoader \u53ca\u76f8\u5173\u7b97\u5b50 )\uff0c\u4e24\u8005\u7684\u533a\u522b\u5728\u4e8e\uff1a mirrored \u89c6\u89d2\u4e0b\uff0c\u91c7\u7528\u7eaf\u6570\u636e\u5e76\u884c\uff0c\u9700\u8981\u81ea\u5df1\u6839\u636e\u53c2\u4e0e\u8bad\u7ec3\u7684\u5361\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u5207\u5206\u3001\u91cd\u7ec4\uff0c\u4f7f\u7528 list \u4f20\u9012\u548c\u63a5\u6536\u6570\u636e\uff1b \u800c consistent \u89c6\u89d2\u4e0b\u63d0\u4f9b\u4e86\u903b\u8f91\u4e0a\u7684\u7edf\u4e00\u770b\u5f85\uff0c\u6570\u636e\u7684\u5207\u5206\u548c\u91cd\u7ec4\u4ea4\u7ed9\u4e86 OneFlow \u6846\u67b6\u5b8c\u6210\u3002 \u4e0b\u56fe\u662f consistent \u89c6\u89d2\u4e0b\uff0c\u91c7\u7528\u7eaf\u6570\u636e\u5e76\u884c\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u539f\u903b\u8f91\u7f51\u7edc\u6a21\u578b\u7684\u6d41\u7a0b\u793a\u610f\u56fe\uff1a \u5728\u7eaf\u6570\u636e\u5e76\u884c\u4e2d\uff0c\u91c7\u7528\u4e862\u5f20\u663e\u5361\u8fdb\u884c\u5e76\u884c\u8bad\u7ec3\uff0c\u56e0\u4e3a\u91c7\u7528\u4e86 \u7eaf\u6570\u636e\u5e76\u884c \uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e8e\u539f\u903b\u8f91\u6a21\u578b\u4e2d\u7684\u6bcf\u4e00\u5c42\uff0c\u6837\u672c\u6570\u636e\u90fd\u88ab\u5e73\u5747\u5206\u914d\u5230\u4e86\u5404\u4e2a\u5361\u4e0a\uff0c\u6bcf\u5f20\u5361\u4e0a\u90fd\u62e5\u6709 \u5b8c\u6574\u7684\u6a21\u578b \uff0c\u4e0e\u5207\u5206\u7684\u6570\u636e\u8fdb\u884c op \u8fd0\u7b97\uff0c\u6700\u540e\u7ec4\u5408\u5404\u4e2a\u5361\u4e0a\u7684\u6837\u672c\uff0c\u5f97\u5230\u5b8c\u6574\u7684\u8f93\u51fa\u3002","title":"\u7eaf\u6570\u636e\u5e76\u884c"},{"location":"single_client/extended_topics/model_mixed_parallel.html#_3","text":"\u5728 consistent \u89c6\u89d2\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u7eaf\u6a21\u578b\u5e76\u884c\uff08\u8bbe\u7f6e\u65b9\u5f0f\u5728\u4e0b\u6587\u5b9e\u4f8b\u4e2d\u4f1a\u4ecb\u7ecd\uff09\uff0c\u5176\u6d41\u7a0b\u793a\u610f\u56fe\u4e3a\uff1a \u5728\u7eaf\u6a21\u578b\u5e76\u884c\u4e2d\uff0c\u540c\u6837\u662f2\u5f20\u663e\u5361\u8fdb\u884c\u5e76\u884c\u8bad\u7ec3\uff0c\u539f\u903b\u8f91\u6a21\u578b\u4e2d\u7684\u6bcf\u4e00\u5c42\u4e2d\uff0c\u90fd\u662f \u90e8\u5206\u6a21\u578b \u4e0e \u5b8c\u6574\u7684\u6570\u636e \u8fdb\u884c op \u8fd0\u7b97\uff0c\u6700\u540e\u7ec4\u5408\u5f97\u5230\u5b8c\u6574\u7684\u8f93\u51fa\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u5404\u4e2a\u5361\u4e0a\u7b2c0\u5c42\u7684\u8f93\u51fa\uff0c\u5e76 \u4e0d\u80fd \u76f4\u63a5\u4f5c\u4e3a\u7b2c1\u5c42\u7684\u8f93\u5165\uff1a\u56e0\u4e3a\u6a21\u578b\u5e76\u884c\u4e2d\uff0c\u4e3a\u5b8c\u6210 op \u64cd\u4f5c\uff0c\u9700\u8981\u90e8\u5206\u7684\u6a21\u578b\u4e0e \u5b8c\u6574\u7684 \u6570\u636e\uff1b \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cOneFlow \u4e2d\u4f7f\u7528\u4e86 boxing \u673a\u5236\u3002 boxing \u673a\u5236\u4f1a\u7edf\u7b79\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u5404\u4e2a\u8282\u70b9\u7684\u6570\u636e\uff0c\u5e76\u5408\u7406\u5207\u5206\u3001\u5408\u5e76\u5230\u5bf9\u5e94\u7684\u5361\u4e0a\uff0c\u9664\u4e86\u6a21\u578b\u5e76\u884c\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u91cd\u7ec4\u95ee\u9898\u5916\uff0c\u6570\u636e\u5e76\u884c\u4e2d\u7684\u53cd\u5411\u68af\u5ea6\u540c\u6b65\uff0c\u4e5f\u4f7f\u7528 boxing \u673a\u5236\u89e3\u51b3\u3002 boxing \u7684\u5185\u90e8\u673a\u5236\u867d\u7136\u590d\u6742\uff0c\u4f46\u662f\u5bf9\u4e8e\u7528\u6237\u800c\u8a00\u662f\u900f\u660e\u7684\uff0c\u6211\u4eec\u4ec5\u4ec5\u662f\u9632\u6b62\u8bfb\u8005\u4ea7\u751f\u8ff7\u60d1\u624d\u52a0\u5165\u4e86 boxing \u7684\u56fe\u793a\uff0c\u5bf9\u4e8e\u672c\u6587\u800c\u8a00\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e86\u89e3\uff1aOneFlow \u4f1a\u81ea\u52a8\u534f\u8c03\u597d\u5206\u5e03\u5f0f\u4e2d\u6570\u636e\u7684\u540c\u6b65\u95ee\u9898\u3002","title":"\u7eaf\u6a21\u578b\u5e76\u884c"},{"location":"single_client/extended_topics/model_mixed_parallel.html#_4","text":"\u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\u7684\u4f18\u52a3\u5e76\u4e0d\u662f\u4e00\u6210\u4e0d\u53d8\u7684\uff0c\u6837\u672c\u89c4\u6a21\u3001\u6a21\u578b\u89c4\u6a21\u53ca\u6a21\u578b\u7ed3\u6784\u51b3\u5b9a\u4e86\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u7684\u7efc\u5408\u8868\u73b0\uff0c\u9700\u8981\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\u3002 \u6982\u62ec\u800c\u8a00\uff1a \u6570\u636e\u5e76\u884c\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u540c\u6b65\u7684\u4fe1\u606f\u662f\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u7684 \u68af\u5ea6 \uff0c\u56e0\u6b64\u5e94\u8be5\u786e\u4fdd\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u4e4b\u95f4\u7684\u4fe1\u606f\u540c\u6b65\u901f\u5ea6\u8981\u6bd4\u8282\u70b9\u5185\u90e8\u7684\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u6bd4\u5982\u8bf4 \u5377\u79ef\u5c42 \u7684\u53c2\u6570\u8f83\u5c11\uff0c\u4f46\u662f\u8ba1\u7b97\u91cf\u5927\uff0c\u5c31\u6bd4\u8f83\u9002\u5408\u4f7f\u7528\u6570\u636e\u5e76\u884c\uff1b \u6a21\u578b\u5e76\u884c\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5c06\u903b\u8f91\u4e0a\u4f5c\u4e3a\u6574\u4f53\u7684\u6a21\u578b \u5207\u5206\u5230\u5404\u4e2a\u7269\u7406\u5361 \u4e0a\uff0c\u80fd\u591f\u89e3\u51b3\u201c\u6a21\u578b\u592a\u5927\uff0c\u4e00\u5f20\u5361\u88c5\u4e0d\u4e0b\u201d\u7684\u95ee\u9898\uff0c\u56e0\u6b64\uff0c\u5bf9\u4e8e\u53c2\u6570\u91cf\u5927\u7684\u795e\u7ecf\u7f51\u7edc\u5c42\uff08\u5982\u6700\u540e\u7684\u5168\u8fde\u63a5\u5c42\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u6a21\u578b\u5e76\u884c\u3002 \u5b9e\u9645\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u6df7\u5408\u5e76\u884c \uff0c\u5728\u540c\u4e00\u4e2a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u7ec4\u5408\u4f7f\u7528\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u3002\u6bd4\u5982\uff0c\u5bf9\u4e8e\u795e\u7ecf\u7f51\u7edc\u4e2d\u9760\u524d\u7684\u53c2\u6570\u8f83\u5c11\u3001\u8ba1\u7b97\u91cf\u5927\u7684\u5c42\uff0c\u91c7\u7528\u6570\u636e\u5e76\u884c\uff1b\u5728\u6700\u7ec8\u7684\u53c2\u6570\u4f17\u591a\u7684\u5168\u8fde\u63a5\u5c42\uff0c\u5219\u91c7\u7528\u6a21\u578b\u5e76\u884c\uff0c\u4ee5\u4e0b\u662f\u9488\u5bf9\u672c\u6587\u6700\u5f00\u59cb\u7684\u7f51\u7edc\u6a21\u578b\u903b\u8f91\u56fe\u7684 \u6df7\u5408\u5e76\u884c \u5b9e\u73b0\u65b9\u6848\u7684\u793a\u610f\u56fe\uff1a \u76ee\u524d\uff0c\u5176\u5b83\u7684\u4e3b\u6d41\u6846\u67b6\u5bf9\u4e8e\u6df7\u5408\u5e76\u884c\u6216\u8005\u4e0d\u652f\u6301\uff0c\u6216\u8005\u9700\u8981\u6df1\u5ea6\u5b9a\u5236\uff0c\u800c OneFlow \u4e2d\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u8bbe\u7f6e\uff0c\u914d\u7f6e\u6df7\u5408\u5e76\u884c\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u8fd8\u53ef\u4ee5\u7528\u81ea\u7531\u5ea6\u8d85\u9ad8\u7684\u6d41\u6c34\u5e76\u884c\uff0c\u6df1\u5ea6\u4f18\u5316\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002","title":"\u9009\u62e9\u6700\u4f18\u7684\u5e76\u884c\u65b9\u5f0f"},{"location":"single_client/extended_topics/model_mixed_parallel.html#_5","text":"","title":"\u6df7\u5408\u5e76\u884c\u5b9e\u4f8b"},{"location":"single_client/extended_topics/model_mixed_parallel.html#_6","text":"\u4ee5\u4e0b\u811a\u672c\uff0c\u5728 consistent \u89c6\u89d2\u4e0b\uff0c\u6211\u4eec\u5bf9 MLP \u6a21\u578b\u91c7\u7528\u4e86\u6df7\u5408\u5e76\u884c\u65b9\u6848\uff1a\u8f93\u5165\u5c42\u4e0e\u9690\u85cf\u5c42\u91c7\u7528\uff08\u9ed8\u8ba4\u7684\uff09\u6570\u636e\u5e76\u884c\uff1b\u8f93\u51fa\u5c42\u91c7\u7528\u6a21\u578b\u5e76\u884c\u5e76\u8fdb\u884c\u5217\u5207\u5206\u3002 \u4ee3\u7801\uff1a hybrid_parallelism_mlp.py \u66f4\u5177\u4f53\u7684\u89e3\u6790\u5728\u540e\u6587\u201c\u4ee3\u7801\u89e3\u8bfb\u201d\u53ef\u89c1\u3002","title":"\u4ee3\u7801"},{"location":"single_client/extended_topics/model_mixed_parallel.html#_7","text":"\u4ee5\u4e0a\u811a\u672c\u4fee\u6539\u81ea 3\u5206\u949f\u5feb\u901f\u4e0a\u624b \u4e2d\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u6bd4\u8f83\u4e24\u4efd\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5\u4f53\u4f1a\u5230\u5728 OneFlow \u7684 consistent_view \u4e0b\u8fdb\u884c\u5404\u79cd\u5e76\u884c\u65b9\u6848\u7684\u914d\u7f6e\u662f\u591a\u4e48\u7684\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u5355\u673a\u7684\u7a0b\u5e8f\u4e0a\u7a0d\u52a0\u4fee\u6539\u5373\u53ef\u3002 \u4ee5\u4e0a\u7a0b\u5e8f\u7684\u5173\u952e\u90e8\u5206\u6709\uff1a \u901a\u8fc7 oneflow.config.gpu_device_num \u63a5\u53e3\u8bbe\u7f6e\u53c2\u4e0e\u8bad\u7ec3\u7684GPU\u6570\u76ee\uff1a flow . config . gpu_device_num ( 2 ) reshape \u53ca hidden \u91c7\u7528\u9ed8\u8ba4\u7684\u6570\u636e\u5e76\u884c\uff0c\u4e0d\u9700\u8981\u4fee\u6539\uff1b\u8f93\u51fa\u5c42\u901a\u8fc7\u8bbe\u7f6e model_distribute \u4e3a flow.distribute.split(axis=0) \u53d8\u4e3a\u6a21\u578b\u5e76\u884c\uff1a def mlp ( data ): initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( data , [ data . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , # dense\u4e3a\u5217\u5b58\u50a8\uff0c\u8fdb\u884csplit(0)\u5207\u5206 model_distribute = flow . distribute . split ( axis = 0 ), name = \"dense2\" , ) \u6709\u8bfb\u8005\u53ef\u80fd\u597d\u5947\u4e3a\u4ec0\u4e48 split(axis=0) \u662f\u5217\u5207\u5206\uff1f\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cOneFlow \u4e2d\u7684 dense \u5185\u90e8\u91c7\u7528\u5217\u5b58\u50a8\uff0c\u56e0\u6b64\u4ee5\u4e0a\u4ee3\u7801\u7684 flow.distribute.split(axis=0) \u786e\u5b9e\u662f\u5728\u505a\u5217\u5207\u5206\u3002 \u6b64\u5916\uff0c flow.layers.dense \u4f7f\u7528 model_distribute \u5f62\u53c2\u8bbe\u7f6e\u5e76\u884c\u65b9\u5f0f\uff0c\u5176\u5185\u90e8\u8c03\u7528\u4e86\u5e95\u5c42\u66f4\u901a\u7528\u7684 get_variable \u63a5\u53e3\u521b\u5efa blob \uff0c get_variable \u63a5\u53e3\u8bbe\u7f6e\u5e76\u884c\u65b9\u5f0f\u7684\u5f62\u53c2\u540d\u4e3a distribute \u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u901a\u8fc7\u6781\u5c11\u91cf\u7684\u4fee\u6539\uff0c\u5c31\u80fd\u5c06\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f\u6539\u4e3a\u5206\u5e03\u5f0f\u3001\u6df7\u5408\u5e76\u884c\u7684\u7a0b\u5e8f\uff0c\u8fd9\u662f OneFlow \u533a\u522b\u4e8e\u5176\u5b83\u6846\u67b6\u7684\u4e00\u5927\u7279\u8272\u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"single_client/extended_topics/model_mixed_parallel.html#_8","text":"\u5728\u6a21\u578b\u5e76\u884c\u4e4b\u5916\uff0cOneFlow \u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u7075\u6d3b\u5ea6\u66f4\u9ad8\u7684\u201c\u6d41\u6c34\u5e76\u884c\u201d\u7684\u5e76\u884c\u65b9\u5f0f\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u4f7f\u7528 scope.placement \u63a5\u53e3\u663e\u5f0f\u6307\u5b9a\u7528\u6765\u8fd0\u884c\u903b\u8f91 op \u7684 \u7269\u7406\u786c\u4ef6 \u3002 \u5728\u6d41\u6c34\u5e76\u884c\u4e2d\uff0c\u6574\u4e2a\u795e\u7ecf\u7f51\u7edc\u6709\u7684\u5c42\u6b21\u5728\u4e00\u7ec4\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u53e6\u5916\u4e00\u4e9b\u5c42\u6b21\u5728\u53e6\u5916\u4e00\u7ec4\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u5b83\u4eec\u4ee5\u63a5\u529b\u7684\u65b9\u5f0f\u534f\u540c\u5de5\u4f5c\uff0c\u5206\u591a\u4e2a\u9636\u6bb5\uff0c\u5728\u8bbe\u5907\u4e4b\u95f4\u6d41\u6c34\u6267\u884c\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bf9 Consistent \u4e0e Mirrored \u89c6\u89d2 \u4e2d\u7684\u201c\u5728 OneFlow \u4e2d\u4f7f\u7528 consistent \u89c6\u89d2\u201d\u4ee3\u7801\u8fdb\u884c\u7b80\u5355\u4fee\u6539\uff0c\u5c55\u793a\u4e86\u6d41\u6c34\u5e76\u884c\u6a21\u5f0f\u3002","title":"\u6d41\u6c34\u5e76\u884c\u5b9e\u4f8b"},{"location":"single_client/extended_topics/model_mixed_parallel.html#_9","text":"\u5b8c\u6574\u4ee3\u7801\uff1a hybrid_parallelism_lenet.py \u66f4\u8be6\u7ec6\u7684\u8ba8\u8bba\u53ef\u89c1\u540e\u6587\u7684\u201c\u4ee3\u7801\u89e3\u8bfb\u201d\u3002","title":"\u4ee3\u7801"},{"location":"single_client/extended_topics/model_mixed_parallel.html#_10","text":"\u4ee5\u4e0a\u5173\u952e\u7684\u4ee3\u7801\u53ea\u67092\u884c\uff0c\u4e14\u4ed6\u4eec\u7684\u672c\u8d28\u4f5c\u7528\u662f\u7c7b\u4f3c\u7684\uff1a \u901a\u8fc7 oneflow.scope.placement \uff0c\u6307\u5b9a hidden \u5c42\u7684 op \u8ba1\u7b97\u8fd0\u884c\u57280\u53f7 GPU \u4e0a with flow . scope . placement ( \"gpu\" , \"0:0\" ): hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"hidden\" , ) \u901a\u8fc7 oneflow.scope.placement \uff0c\u6307\u5b9a output \u5c42\u7684op\u8ba1\u7b97\u8fd0\u884c\u5728\u7b2c0\u53f7\u4e3b\u673a\u76841\u53f7 GPU \u4e0a with flow . scope . placement ( \"gpu\" , \"0:1\" ): output = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"outlayer\" ) scope.placement \u7684\u5177\u4f53\u4f7f\u7528\uff0c\u53ef\u53c2\u9605 API \u6587\u6863 \u3002 \u6d41\u6c34\u5e76\u884c\uff0c\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u4e3a\u6bcf\u4e2a op \u6307\u5b9a\u7269\u7406\u8bbe\u5907\uff0c\u975e\u5e38\u9002\u5408\u5bf9\u7f51\u7edc\u6a21\u578b\u53ca\u5206\u5e03\u5f0f\u60c5\u51b5\u90fd\u5f88\u719f\u6089\u7684\u7528\u6237\u8fdb\u884c \u6df1\u5ea6\u4f18\u5316 \u3002 \u6b64\u5916\uff0cOneFlow \u63d0\u4f9b\u7684 API oneflow.unpack \u3001 oneflow.pack \u7b49\uff0c\u7ed3\u5408\u4e86 OneFlow \u81ea\u8eab\u4efb\u52a1\u8c03\u5ea6\u7684\u7279\u70b9\uff0c\u4f7f\u5f97\u6d41\u6c34\u5e76\u884c\u66f4\u6613\u7528\u3001\u9ad8\u6548\uff0c\u6211\u4eec\u5c06\u5728\u53e6\u5916\u7684\u6587\u7ae0\u4e2d\u4e13\u95e8\u4ecb\u7ecd\u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"single_client/extended_topics/ofrecord.html","text":"\u6df1\u5ea6\u5b66\u4e60\u5e94\u7528\u9700\u8981\u590d\u6742\u7684\u591a\u9636\u6bb5\u6570\u636e\u9884\u5904\u7406\u6d41\u6c34\u7ebf\uff0c\u6570\u636e\u52a0\u8f7d\u662f\u6d41\u6c34\u7ebf\u7684\u7b2c\u4e00\u6b65\uff0cOneFlow \u652f\u6301\u591a\u79cd\u683c\u5f0f\u6570\u636e\u7684\u52a0\u8f7d\uff0c\u5176\u4e2d OFRecord \u683c\u5f0f\u662f OneFlow \u539f\u751f\u7684\u6570\u636e\u683c\u5f0f\u3002 OFRecord \u7684\u683c\u5f0f\u5b9a\u4e49\u53c2\u8003\u4e86 TensorFlow \u7684 TFRecord \uff0c\u719f\u6089 TFRecord \u7684\u7528\u6237\uff0c\u53ef\u4ee5\u5f88\u5feb\u4e0a\u624b OneFlow \u7684 OFRecord \u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a OFRecord \u4f7f\u7528\u7684\u6570\u636e\u7c7b\u578b \u5982\u4f55\u5c06\u6570\u636e\u8f6c\u5316\u4e3a OFRecord \u5bf9\u8c61\u5e76\u5e8f\u5217\u5316 OFRecord \u6587\u4ef6\u683c\u5f0f \u638c\u63e1\u5b83\u4eec\u540e\uff0c\u6709\u52a9\u4e8e\u6211\u4eec\u5b66\u4e60 \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 \u3002 OFRecord \u76f8\u5173\u6570\u636e\u7c7b\u578b \u00b6 OneFlow \u5185\u90e8\u91c7\u7528 Protocol Buffers \u63cf\u8ff0 OFRecord \u7684\u5e8f\u5217\u5316\u683c\u5f0f\u3002\u76f8\u5173\u7684 .proto \u6587\u4ef6\u5728 oneflow/core/record/record.proto \u4e2d\uff0c\u5177\u4f53\u5b9a\u4e49\u5982\u4e0b\uff1a syntax = \"proto2\"; package oneflow; message BytesList { repeated bytes value = 1; } message FloatList { repeated float value = 1 [packed = true]; } message DoubleList { repeated double value = 1 [packed = true]; } message Int32List { repeated int32 value = 1 [packed = true]; } message Int64List { repeated int64 value = 1 [packed = true]; } message Feature { oneof kind { BytesList bytes_list = 1; FloatList float_list = 2; DoubleList double_list = 3; Int32List int32_list = 4; Int64List int64_list = 5; } } message OFRecord { map<string, Feature> feature = 1; } \u6211\u4eec\u5148\u5bf9\u4ee5\u4e0a\u7684\u91cd\u8981\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u89e3\u91ca\uff1a OFRecord: OFRecord \u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u53ef\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u9700\u8981\u5e8f\u5217\u5316\u7684\u6570\u636e\u3002\u5b83\u7531\u4efb\u610f\u591a\u4e2a string->Feature \u7684\u952e\u503c\u5bf9\u7ec4\u6210\uff1b Feature: Feature \u53ef\u5b58\u50a8 BytesList\u3001FloatList\u3001DoubleList\u3001Int32List\u3001Int64List \u5404\u7c7b\u578b\u4e2d\u7684\u4efb\u610f\u4e00\u79cd\uff1b OFRecord\u3001Feature\u3001XXXList \u7b49\u7c7b\u578b\uff0c\u5747\u7531 Protocol Buffers \u751f\u6210\u5bf9\u5e94\u7684\u540c\u540d\u63a5\u53e3\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5728 Python \u5c42\u9762\u6784\u9020\u5bf9\u5e94\u5bf9\u8c61\u3002 \u8f6c\u5316\u6570\u636e\u4e3a Feature \u683c\u5f0f \u00b6 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 ofrecord.xxxList \u53ca ofrecord.Feature \u5c06\u6570\u636e\u8f6c\u4e3a Feature \u683c\u5f0f\uff0c\u4f46\u662f\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\uff0c\u6211\u4eec\u9700\u8981\u5bf9 protocol buffers \u751f\u6210\u7684\u63a5\u53e3\u8fdb\u884c\u7b80\u5355\u5c01\u88c5\uff1a import oneflow.core.record.record_pb2 as ofrecord def int32_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( int32_list = ofrecord . Int32List ( value = value )) def int64_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( int64_list = ofrecord . Int64List ( value = value )) def float_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( float_list = ofrecord . FloatList ( value = value )) def double_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( double_list = ofrecord . DoubleList ( value = value )) def bytes_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] if not six . PY2 : if isinstance ( value [ 0 ], str ): value = [ x . encode () for x in value ] return ofrecord . Feature ( bytes_list = ofrecord . BytesList ( value = value )) \u521b\u5efa OFRecord \u5bf9\u8c61\u5e76\u5e8f\u5217\u5316 \u00b6 \u5728\u4e0b\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u67092\u4e2a feature \u7684 OFRecord \u5bf9\u8c61\uff0c\u5e76\u4e14\u8c03\u7528\u5b83\u7684 SerializeToString \u65b9\u6cd5\u5e8f\u5217\u5316\u3002 obserations = 28 * 28 f = open ( \"./dataset/part-0\" , \"wb\" ) for loop in range ( 0 , 3 ): image = [ random . random () for x in range ( 0 , obserations )] label = [ random . randint ( 0 , 9 )] topack = { \"images\" : float_feature ( image ), \"labels\" : int64_feature ( label ), } ofrecord_features = ofrecord . OFRecord ( feature = topack ) serilizedBytes = ofrecord_features . SerializeToString () \u901a\u8fc7\u4ee5\u4e0a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u5e8f\u5217\u5316\u6570\u636e\u7684\u6b65\u9aa4\uff1a \u5c06\u9700\u8981\u5e8f\u5217\u5316\u7684\u6570\u636e\uff0c\u901a\u8fc7\u8c03\u7528 ofrecord.Feature \u53ca ofrecord.XXXList \u8f6c\u4e3a Feature \u5bf9\u8c61\uff1b \u5c06\u4e0a\u4e00\u6b65\u5f97\u5230\u7684\u5404\u4e2a Feature \u5bf9\u8c61\uff0c\u4ee5 string->Feature \u952e\u503c\u5bf9\u7684\u5f62\u5f0f\uff0c\u5b58\u653e\u5728 Python \u5b57\u5178\u4e2d\uff1b \u8c03\u7528 ofrecord.OFRecord \u521b\u5efa OFRecord \u5bf9\u8c61 \u8c03\u7528 OFRecord \u5bf9\u8c61\u7684 SerializeToString \u65b9\u6cd5\u5f97\u5230\u5e8f\u5217\u5316\u7ed3\u679c \u5e8f\u5217\u5316\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u5b58\u4e3a ofrecord \u683c\u5f0f\u7684\u6587\u4ef6\u3002 OFRecord \u683c\u5f0f\u7684\u6587\u4ef6 \u00b6 \u5c06 OFRecord \u5bf9\u8c61\u5e8f\u5217\u5316\u540e\u6309 OneFlow \u7ea6\u5b9a\u7684\u683c\u5f0f\u5b58\u6587\u4ef6\uff0c\u5c31\u5f97\u5230 OFRecord\u6587\u4ef6 \u3002 1\u4e2a OFRecord \u6587\u4ef6\u4e2d\u53ef\u5b58\u50a8\u591a\u4e2a OFRecord \u5bf9\u8c61\uff0cOFRecord \u6587\u4ef6\u53ef\u7528\u4e8e OneFlow \u6570\u636e\u6d41\u6c34\u7ebf \uff0c\u5177\u4f53\u64cd\u4f5c\u53ef\u89c1 \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 OneFlow \u7ea6\u5b9a\uff0c\u5bf9\u4e8e \u6bcf\u4e2a OFRecord \u5bf9\u8c61\uff0c\u7528\u4ee5\u4e0b\u683c\u5f0f\u5b58\u50a8\uff1a uint64 length byte data[length] \u5373\u59348\u4e2a\u5b57\u8282\u5b58\u5165\u6570\u636e\u957f\u5ea6\uff0c\u7136\u540e\u5b58\u5165\u5e8f\u5217\u5316\u6570\u636e\u672c\u8eab\u3002 length = ofrecord_features . ByteSize () f . write ( struct . pack ( \"q\" , length )) f . write ( serilizedBytes ) \u4ee3\u7801 \u00b6 \u4ee5\u4e0b\u5b8c\u6574\u4ee3\u7801\u5c55\u793a\u5982\u4f55\u751f\u6210 OFRecord \u6587\u4ef6\uff0c\u5e76\u8c03\u7528 protobuf \u751f\u6210\u7684 OFRecord \u63a5\u53e3\u624b\u5de5\u8bfb\u53d6 OFRecord \u6587\u4ef6\u4e2d\u7684\u6570\u636e\u3002 \u5b9e\u9645\u4e0a\uff0cOneFlow \u63d0\u4f9b\u4e86 flow.data.decode_ofrecord \u7b49\u63a5\u53e3\uff0c\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u63d0\u53d6 OFRecord \u6587\u4ef6\uff08\u6570\u636e\u96c6\uff09\u4e2d\u7684\u5185\u5bb9\u3002\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u89c1 \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 \u3002 \u5c06 OFRecord \u5bf9\u8c61\u5199\u5165\u6587\u4ef6 \u00b6 \u4ee5\u4e0b\u811a\u672c\uff0c\u6a21\u62df\u4e863\u4e2a\u6837\u672c\uff0c\u6bcf\u4e2a\u6837\u672c\u4e3a 28*28 \u7684\u56fe\u7247\uff0c\u5e76\u4e14\u5305\u542b\u5bf9\u5e94\u6807\u7b7e\u3002\u5c06\u4e09\u4e2a\u6837\u672c\u8f6c\u5316\u4e3a OFRecord \u5bf9\u8c61\u540e\uff0c\u6309\u7167 OneFlow \u7ea6\u5b9a\u683c\u5f0f\uff0c\u5b58\u5165\u6587\u4ef6\u3002 \u4ee3\u7801\uff1a ofrecord_to_string.py \u4ece OFRecord \u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e \u00b6 \u4ee5\u4e0b\u811a\u672c\uff0c\u8bfb\u53d6\u4e0a\u4f8b\u4e2d\u751f\u6210\u7684 OFRecord \u6587\u4ef6\uff0c\u8c03\u7528 FromString \u65b9\u6cd5\u53cd\u5e8f\u5217\u5316\u5f97\u5230 OFRecord \u5bf9\u8c61\uff0c\u5e76\u6700\u7ec8\u663e\u793a\u6570\u636e\uff1a \u4ee3\u7801\uff1a ofrecord_from_string.py","title":"OFRecord \u6570\u636e\u683c\u5f0f"},{"location":"single_client/extended_topics/ofrecord.html#ofrecord","text":"OneFlow \u5185\u90e8\u91c7\u7528 Protocol Buffers \u63cf\u8ff0 OFRecord \u7684\u5e8f\u5217\u5316\u683c\u5f0f\u3002\u76f8\u5173\u7684 .proto \u6587\u4ef6\u5728 oneflow/core/record/record.proto \u4e2d\uff0c\u5177\u4f53\u5b9a\u4e49\u5982\u4e0b\uff1a syntax = \"proto2\"; package oneflow; message BytesList { repeated bytes value = 1; } message FloatList { repeated float value = 1 [packed = true]; } message DoubleList { repeated double value = 1 [packed = true]; } message Int32List { repeated int32 value = 1 [packed = true]; } message Int64List { repeated int64 value = 1 [packed = true]; } message Feature { oneof kind { BytesList bytes_list = 1; FloatList float_list = 2; DoubleList double_list = 3; Int32List int32_list = 4; Int64List int64_list = 5; } } message OFRecord { map<string, Feature> feature = 1; } \u6211\u4eec\u5148\u5bf9\u4ee5\u4e0a\u7684\u91cd\u8981\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u89e3\u91ca\uff1a OFRecord: OFRecord \u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u53ef\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u9700\u8981\u5e8f\u5217\u5316\u7684\u6570\u636e\u3002\u5b83\u7531\u4efb\u610f\u591a\u4e2a string->Feature \u7684\u952e\u503c\u5bf9\u7ec4\u6210\uff1b Feature: Feature \u53ef\u5b58\u50a8 BytesList\u3001FloatList\u3001DoubleList\u3001Int32List\u3001Int64List \u5404\u7c7b\u578b\u4e2d\u7684\u4efb\u610f\u4e00\u79cd\uff1b OFRecord\u3001Feature\u3001XXXList \u7b49\u7c7b\u578b\uff0c\u5747\u7531 Protocol Buffers \u751f\u6210\u5bf9\u5e94\u7684\u540c\u540d\u63a5\u53e3\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5728 Python \u5c42\u9762\u6784\u9020\u5bf9\u5e94\u5bf9\u8c61\u3002","title":"OFRecord \u76f8\u5173\u6570\u636e\u7c7b\u578b"},{"location":"single_client/extended_topics/ofrecord.html#feature","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 ofrecord.xxxList \u53ca ofrecord.Feature \u5c06\u6570\u636e\u8f6c\u4e3a Feature \u683c\u5f0f\uff0c\u4f46\u662f\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\uff0c\u6211\u4eec\u9700\u8981\u5bf9 protocol buffers \u751f\u6210\u7684\u63a5\u53e3\u8fdb\u884c\u7b80\u5355\u5c01\u88c5\uff1a import oneflow.core.record.record_pb2 as ofrecord def int32_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( int32_list = ofrecord . Int32List ( value = value )) def int64_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( int64_list = ofrecord . Int64List ( value = value )) def float_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( float_list = ofrecord . FloatList ( value = value )) def double_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( double_list = ofrecord . DoubleList ( value = value )) def bytes_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] if not six . PY2 : if isinstance ( value [ 0 ], str ): value = [ x . encode () for x in value ] return ofrecord . Feature ( bytes_list = ofrecord . BytesList ( value = value ))","title":"\u8f6c\u5316\u6570\u636e\u4e3a Feature \u683c\u5f0f"},{"location":"single_client/extended_topics/ofrecord.html#ofrecord_1","text":"\u5728\u4e0b\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u67092\u4e2a feature \u7684 OFRecord \u5bf9\u8c61\uff0c\u5e76\u4e14\u8c03\u7528\u5b83\u7684 SerializeToString \u65b9\u6cd5\u5e8f\u5217\u5316\u3002 obserations = 28 * 28 f = open ( \"./dataset/part-0\" , \"wb\" ) for loop in range ( 0 , 3 ): image = [ random . random () for x in range ( 0 , obserations )] label = [ random . randint ( 0 , 9 )] topack = { \"images\" : float_feature ( image ), \"labels\" : int64_feature ( label ), } ofrecord_features = ofrecord . OFRecord ( feature = topack ) serilizedBytes = ofrecord_features . SerializeToString () \u901a\u8fc7\u4ee5\u4e0a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u5e8f\u5217\u5316\u6570\u636e\u7684\u6b65\u9aa4\uff1a \u5c06\u9700\u8981\u5e8f\u5217\u5316\u7684\u6570\u636e\uff0c\u901a\u8fc7\u8c03\u7528 ofrecord.Feature \u53ca ofrecord.XXXList \u8f6c\u4e3a Feature \u5bf9\u8c61\uff1b \u5c06\u4e0a\u4e00\u6b65\u5f97\u5230\u7684\u5404\u4e2a Feature \u5bf9\u8c61\uff0c\u4ee5 string->Feature \u952e\u503c\u5bf9\u7684\u5f62\u5f0f\uff0c\u5b58\u653e\u5728 Python \u5b57\u5178\u4e2d\uff1b \u8c03\u7528 ofrecord.OFRecord \u521b\u5efa OFRecord \u5bf9\u8c61 \u8c03\u7528 OFRecord \u5bf9\u8c61\u7684 SerializeToString \u65b9\u6cd5\u5f97\u5230\u5e8f\u5217\u5316\u7ed3\u679c \u5e8f\u5217\u5316\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u5b58\u4e3a ofrecord \u683c\u5f0f\u7684\u6587\u4ef6\u3002","title":"\u521b\u5efa OFRecord \u5bf9\u8c61\u5e76\u5e8f\u5217\u5316"},{"location":"single_client/extended_topics/ofrecord.html#ofrecord_2","text":"\u5c06 OFRecord \u5bf9\u8c61\u5e8f\u5217\u5316\u540e\u6309 OneFlow \u7ea6\u5b9a\u7684\u683c\u5f0f\u5b58\u6587\u4ef6\uff0c\u5c31\u5f97\u5230 OFRecord\u6587\u4ef6 \u3002 1\u4e2a OFRecord \u6587\u4ef6\u4e2d\u53ef\u5b58\u50a8\u591a\u4e2a OFRecord \u5bf9\u8c61\uff0cOFRecord \u6587\u4ef6\u53ef\u7528\u4e8e OneFlow \u6570\u636e\u6d41\u6c34\u7ebf \uff0c\u5177\u4f53\u64cd\u4f5c\u53ef\u89c1 \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 OneFlow \u7ea6\u5b9a\uff0c\u5bf9\u4e8e \u6bcf\u4e2a OFRecord \u5bf9\u8c61\uff0c\u7528\u4ee5\u4e0b\u683c\u5f0f\u5b58\u50a8\uff1a uint64 length byte data[length] \u5373\u59348\u4e2a\u5b57\u8282\u5b58\u5165\u6570\u636e\u957f\u5ea6\uff0c\u7136\u540e\u5b58\u5165\u5e8f\u5217\u5316\u6570\u636e\u672c\u8eab\u3002 length = ofrecord_features . ByteSize () f . write ( struct . pack ( \"q\" , length )) f . write ( serilizedBytes )","title":"OFRecord \u683c\u5f0f\u7684\u6587\u4ef6"},{"location":"single_client/extended_topics/ofrecord.html#_1","text":"\u4ee5\u4e0b\u5b8c\u6574\u4ee3\u7801\u5c55\u793a\u5982\u4f55\u751f\u6210 OFRecord \u6587\u4ef6\uff0c\u5e76\u8c03\u7528 protobuf \u751f\u6210\u7684 OFRecord \u63a5\u53e3\u624b\u5de5\u8bfb\u53d6 OFRecord \u6587\u4ef6\u4e2d\u7684\u6570\u636e\u3002 \u5b9e\u9645\u4e0a\uff0cOneFlow \u63d0\u4f9b\u4e86 flow.data.decode_ofrecord \u7b49\u63a5\u53e3\uff0c\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u63d0\u53d6 OFRecord \u6587\u4ef6\uff08\u6570\u636e\u96c6\uff09\u4e2d\u7684\u5185\u5bb9\u3002\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u89c1 \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 \u3002","title":"\u4ee3\u7801"},{"location":"single_client/extended_topics/ofrecord.html#ofrecord_3","text":"\u4ee5\u4e0b\u811a\u672c\uff0c\u6a21\u62df\u4e863\u4e2a\u6837\u672c\uff0c\u6bcf\u4e2a\u6837\u672c\u4e3a 28*28 \u7684\u56fe\u7247\uff0c\u5e76\u4e14\u5305\u542b\u5bf9\u5e94\u6807\u7b7e\u3002\u5c06\u4e09\u4e2a\u6837\u672c\u8f6c\u5316\u4e3a OFRecord \u5bf9\u8c61\u540e\uff0c\u6309\u7167 OneFlow \u7ea6\u5b9a\u683c\u5f0f\uff0c\u5b58\u5165\u6587\u4ef6\u3002 \u4ee3\u7801\uff1a ofrecord_to_string.py","title":"\u5c06 OFRecord \u5bf9\u8c61\u5199\u5165\u6587\u4ef6"},{"location":"single_client/extended_topics/ofrecord.html#ofrecord_4","text":"\u4ee5\u4e0b\u811a\u672c\uff0c\u8bfb\u53d6\u4e0a\u4f8b\u4e2d\u751f\u6210\u7684 OFRecord \u6587\u4ef6\uff0c\u8c03\u7528 FromString \u65b9\u6cd5\u53cd\u5e8f\u5217\u5316\u5f97\u5230 OFRecord \u5bf9\u8c61\uff0c\u5e76\u6700\u7ec8\u663e\u793a\u6570\u636e\uff1a \u4ee3\u7801\uff1a ofrecord_from_string.py","title":"\u4ece OFRecord \u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e"},{"location":"single_client/extended_topics/oneflow_convert_tools.html","text":"oneflow_convert_tools \u00b6 OneFlow \u76f8\u5173\u7684\u6a21\u578b\u8f6c\u6362\u5de5\u5177 oneflow_onnx \u00b6 \u7b80\u4ecb \u00b6 oneflow_onnx \u5de5\u5177\u5305\u542b\u4e24\u4e2a\u529f\u80fd\uff0c\u4e00\u4e2a\u662f\u5c06 OneFlow \u5bfc\u51fa ONNX\uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u5c06\u5404\u4e2a\u8bad\u7ec3\u6846\u67b6\u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u8f6c\u6362\u4e3a OneFlow \u7684\u6a21\u578b\u3002\u672c\u5de5\u7a0b\u5df2\u7ecf\u9002\u914d\u4e86 TensorFlow/Pytorch/PaddlePaddle \u6846\u67b6\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u901a\u8fc7\u5bfc\u51fa ONNX \u8f6c\u6362\u4e3a OneFlow\uff08\u6211\u4eec\u5c06\u8fd9\u4e00\u529f\u80fd\u53eb\u4f5c X2OneFlow\uff09\u3002 OneFlow2ONNX \u6a21\u578b\u652f\u6301\uff0c\u652f\u6301 OneFlow \u9759\u6001\u56fe\u6a21\u578b\u8f6c\u4e3a ONNX\uff0c\u53ef\u8f6c\u6362\u7531 flow.checkpoint.save \u65b9\u6cd5\u4fdd\u5b58\u4e0b\u6765\u7684 OneFlow \u6a21\u578b\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 OneFlow2ONNX \u6a21\u578b\u5217\u8868 \u3002 X2OneFlow \u6a21\u578b\u652f\u6301\uff0c\u652f\u6301\u5c06 TensorFlow/Pytorch/PaddlePaddle \u7684\u6a21\u578b\u901a\u8fc7 ONNX \u8f6c\u6362\u4e3a OneFlow \u7684\u6a21\u578b\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 X2OneFlow \u6a21\u578b\u5217\u8868 \u3002 OneFlow2ONNX \u7b97\u5b50\u652f\u6301\uff0c\u76ee\u524d\u7a33\u5b9a\u652f\u6301\u5bfc\u51fa ONNX Opset10\uff0c\u90e8\u5206 OneFlow \u7b97\u5b50\u652f\u6301\u66f4\u4f4e\u7684 ONNX Opset \u8f6c\u6362\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 OneFlow2ONNX \u7b97\u5b50\u5217\u8868 \u3002 X2OneFlow \u7b97\u5b50\u652f\u6301\uff0c\u76ee\u524d\u7a33\u5b9a\u652f\u6301 TensorFlow/Pytorch/PaddlePaddle \u4e2d\u6db5\u76d6\u5927\u90e8\u5206 CV \u573a\u666f\u7684\u7b97\u5b50\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 X2OneFlow \u7b97\u5b50\u5217\u8868 \u3002 \u4ee3\u7801\u751f\u6210\u652f\u6301\uff0c\u652f\u6301\u5c06 TensorFlow/Pytorch/PaddlePaddle \u7684\u6a21\u578b\u901a\u8fc7 ONNX \u8f6c\u6362\u4e3a OneFlow \u7684\u6a21\u578b\u5e76\u540c\u65f6\u751f\u6210 OneFlow \u7684\u4ee3\u7801\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 X2OneFlow \u4ee3\u7801\u751f\u6210\u6a21\u578b\u5217\u8868 \u3002 \u76ee\u524d OneFlow2ONNX \u652f\u630180+\u7684 OneFlow OP \u5bfc\u51fa\u4e3a ONNX OP\u3002X2OneFlow \u652f\u630180\u4e2a ONNX OP\uff0c50+\u4e2a TensorFlow OP\uff0c80+\u4e2a Pytorch OP\uff0c50+\u4e2a PaddlePaddle OP\uff0c\u8986\u76d6\u4e86\u5927\u90e8\u5206 CV \u5206\u7c7b\u6a21\u578b\u5e38\u7528\u7684\u64cd\u4f5c\u3002\u6ce8\u610f\u6211\u4eec\u652f\u6301\u7684 OP \u548c\u6a21\u578b\u5747\u4e3a\u52a8\u6001\u56fe API \u4e0b\u7684 OP \u548c\u6a21\u578b\uff0c\u8981\u6c42 PaddlePaddle \u7684\u7248\u672c>=2.0.0\uff0cTensorFlow >=2.0.0\uff0cPytorch \u65e0\u660e\u786e\u7248\u672c\u8981\u6c42\u3002\u76ee\u524d X2OneFlow \u5df2\u7ecf\u6210\u529f\u8f6c\u6362\u4e8650+\u4e2a TensorFlow/Pytorch/PaddlePaddle \u5b98\u65b9\u6a21\u578b\u3002\u6b22\u8fce\u4f53\u9a8c\u6b64\u9879\u76ee\u3002 \u73af\u5883\u4f9d\u8d56 \u00b6 \u7528\u6237\u73af\u5883\u914d\u7f6e \u00b6 python> = 3 .5 onnx> = 1 .8.0 onnx-simplifier> = 0 .3.3 onnxoptimizer> = 0 .2.5 onnxruntime> = 1 .6.0 oneflow ( https://github.com/Oneflow-Inc/oneflow#install-with-pip-package ) \u5982\u679c\u4f60\u60f3\u4f7f\u7528 X2OneFlow\uff08X \u4ee3\u8868 TensorFlow/Pytorch/PaddlePaddle\uff09\u5219\u9700\u8981\u5b89\u88c5\u5bf9\u5e94\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002\u4f9d\u8d56\u5982\u4e0b\uff1a pytorch> = 1 .7.0 paddlepaddle> = 2 .0.0 paddle2onnx> = 0 .6 tensorflow> = 2 .0.0 tf2onnx> = 1 .8.4 \u5b89\u88c5 \u00b6 \u5b89\u88c5\u65b9\u5f0f1 \u00b6 pip install oneflow_onnx \u5b89\u88c5\u65b9\u5f0f2 git clone https://github.com/Oneflow-Inc/oneflow_convert_tools cd oneflow_onnx python3 setup.py install \u4f7f\u7528\u65b9\u6cd5 \u00b6 \u8bf7\u53c2\u8003 \u4f7f\u7528\u793a\u4f8b \u76f8\u5173\u6587\u6863 \u00b6 OneFlow2ONNX\u6a21\u578b\u5217\u8868 X2OneFlow\u6a21\u578b\u5217\u8868 OneFlow2ONNX\u7b97\u5b50\u5217\u8868 X2OneFlow\u7b97\u5b50\u5217\u8868 \u4f7f\u7528\u793a\u4f8b nchw2nhwc_tool \u00b6 \u7b80\u4ecb \u00b6 \u672c\u5de5\u5177\u7684\u529f\u80fd\u662f\u5c06 OneFlow \u8bad\u7ec3\u7684 NCHW \u6392\u5e03\u7684\u6743\u91cd\u8f6c\u6362\u4e3a NHWC \u6392\u5e03\uff0c\u4f7f\u7528\u65b9\u6cd5 \u5728\u8fd9\u91cc save_serving_tool \u00b6 \u7b80\u4ecb \u00b6 \u672c\u5de5\u5177\u7684\u76ee\u7684\u662f\u5c06 OneFlow \u8bad\u7ec3\u7684\u6a21\u578b\u8f6c\u6362\u4e3a Serving \u7aef\u53ef\u7528\u7684\u6a21\u578b\uff0c\u4f7f\u7528\u65b9\u6cd5 \u5728\u8fd9\u91cc","title":"OneFlow \u548c ONNX \u4ea4\u4e92"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#oneflow_convert_tools","text":"OneFlow \u76f8\u5173\u7684\u6a21\u578b\u8f6c\u6362\u5de5\u5177","title":"oneflow_convert_tools"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#oneflow_onnx","text":"","title":"oneflow_onnx"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#_1","text":"oneflow_onnx \u5de5\u5177\u5305\u542b\u4e24\u4e2a\u529f\u80fd\uff0c\u4e00\u4e2a\u662f\u5c06 OneFlow \u5bfc\u51fa ONNX\uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u5c06\u5404\u4e2a\u8bad\u7ec3\u6846\u67b6\u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u8f6c\u6362\u4e3a OneFlow \u7684\u6a21\u578b\u3002\u672c\u5de5\u7a0b\u5df2\u7ecf\u9002\u914d\u4e86 TensorFlow/Pytorch/PaddlePaddle \u6846\u67b6\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u901a\u8fc7\u5bfc\u51fa ONNX \u8f6c\u6362\u4e3a OneFlow\uff08\u6211\u4eec\u5c06\u8fd9\u4e00\u529f\u80fd\u53eb\u4f5c X2OneFlow\uff09\u3002 OneFlow2ONNX \u6a21\u578b\u652f\u6301\uff0c\u652f\u6301 OneFlow \u9759\u6001\u56fe\u6a21\u578b\u8f6c\u4e3a ONNX\uff0c\u53ef\u8f6c\u6362\u7531 flow.checkpoint.save \u65b9\u6cd5\u4fdd\u5b58\u4e0b\u6765\u7684 OneFlow \u6a21\u578b\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 OneFlow2ONNX \u6a21\u578b\u5217\u8868 \u3002 X2OneFlow \u6a21\u578b\u652f\u6301\uff0c\u652f\u6301\u5c06 TensorFlow/Pytorch/PaddlePaddle \u7684\u6a21\u578b\u901a\u8fc7 ONNX \u8f6c\u6362\u4e3a OneFlow \u7684\u6a21\u578b\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 X2OneFlow \u6a21\u578b\u5217\u8868 \u3002 OneFlow2ONNX \u7b97\u5b50\u652f\u6301\uff0c\u76ee\u524d\u7a33\u5b9a\u652f\u6301\u5bfc\u51fa ONNX Opset10\uff0c\u90e8\u5206 OneFlow \u7b97\u5b50\u652f\u6301\u66f4\u4f4e\u7684 ONNX Opset \u8f6c\u6362\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 OneFlow2ONNX \u7b97\u5b50\u5217\u8868 \u3002 X2OneFlow \u7b97\u5b50\u652f\u6301\uff0c\u76ee\u524d\u7a33\u5b9a\u652f\u6301 TensorFlow/Pytorch/PaddlePaddle \u4e2d\u6db5\u76d6\u5927\u90e8\u5206 CV \u573a\u666f\u7684\u7b97\u5b50\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 X2OneFlow \u7b97\u5b50\u5217\u8868 \u3002 \u4ee3\u7801\u751f\u6210\u652f\u6301\uff0c\u652f\u6301\u5c06 TensorFlow/Pytorch/PaddlePaddle \u7684\u6a21\u578b\u901a\u8fc7 ONNX \u8f6c\u6362\u4e3a OneFlow \u7684\u6a21\u578b\u5e76\u540c\u65f6\u751f\u6210 OneFlow \u7684\u4ee3\u7801\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 X2OneFlow \u4ee3\u7801\u751f\u6210\u6a21\u578b\u5217\u8868 \u3002 \u76ee\u524d OneFlow2ONNX \u652f\u630180+\u7684 OneFlow OP \u5bfc\u51fa\u4e3a ONNX OP\u3002X2OneFlow \u652f\u630180\u4e2a ONNX OP\uff0c50+\u4e2a TensorFlow OP\uff0c80+\u4e2a Pytorch OP\uff0c50+\u4e2a PaddlePaddle OP\uff0c\u8986\u76d6\u4e86\u5927\u90e8\u5206 CV \u5206\u7c7b\u6a21\u578b\u5e38\u7528\u7684\u64cd\u4f5c\u3002\u6ce8\u610f\u6211\u4eec\u652f\u6301\u7684 OP \u548c\u6a21\u578b\u5747\u4e3a\u52a8\u6001\u56fe API \u4e0b\u7684 OP \u548c\u6a21\u578b\uff0c\u8981\u6c42 PaddlePaddle \u7684\u7248\u672c>=2.0.0\uff0cTensorFlow >=2.0.0\uff0cPytorch \u65e0\u660e\u786e\u7248\u672c\u8981\u6c42\u3002\u76ee\u524d X2OneFlow \u5df2\u7ecf\u6210\u529f\u8f6c\u6362\u4e8650+\u4e2a TensorFlow/Pytorch/PaddlePaddle \u5b98\u65b9\u6a21\u578b\u3002\u6b22\u8fce\u4f53\u9a8c\u6b64\u9879\u76ee\u3002","title":"\u7b80\u4ecb"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#_2","text":"","title":"\u73af\u5883\u4f9d\u8d56"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#_3","text":"python> = 3 .5 onnx> = 1 .8.0 onnx-simplifier> = 0 .3.3 onnxoptimizer> = 0 .2.5 onnxruntime> = 1 .6.0 oneflow ( https://github.com/Oneflow-Inc/oneflow#install-with-pip-package ) \u5982\u679c\u4f60\u60f3\u4f7f\u7528 X2OneFlow\uff08X \u4ee3\u8868 TensorFlow/Pytorch/PaddlePaddle\uff09\u5219\u9700\u8981\u5b89\u88c5\u5bf9\u5e94\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002\u4f9d\u8d56\u5982\u4e0b\uff1a pytorch> = 1 .7.0 paddlepaddle> = 2 .0.0 paddle2onnx> = 0 .6 tensorflow> = 2 .0.0 tf2onnx> = 1 .8.4","title":"\u7528\u6237\u73af\u5883\u914d\u7f6e"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#_4","text":"","title":"\u5b89\u88c5"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#1","text":"pip install oneflow_onnx \u5b89\u88c5\u65b9\u5f0f2 git clone https://github.com/Oneflow-Inc/oneflow_convert_tools cd oneflow_onnx python3 setup.py install","title":"\u5b89\u88c5\u65b9\u5f0f1"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#_5","text":"\u8bf7\u53c2\u8003 \u4f7f\u7528\u793a\u4f8b","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#_6","text":"OneFlow2ONNX\u6a21\u578b\u5217\u8868 X2OneFlow\u6a21\u578b\u5217\u8868 OneFlow2ONNX\u7b97\u5b50\u5217\u8868 X2OneFlow\u7b97\u5b50\u5217\u8868 \u4f7f\u7528\u793a\u4f8b","title":"\u76f8\u5173\u6587\u6863"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#nchw2nhwc_tool","text":"","title":"nchw2nhwc_tool"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#_7","text":"\u672c\u5de5\u5177\u7684\u529f\u80fd\u662f\u5c06 OneFlow \u8bad\u7ec3\u7684 NCHW \u6392\u5e03\u7684\u6743\u91cd\u8f6c\u6362\u4e3a NHWC \u6392\u5e03\uff0c\u4f7f\u7528\u65b9\u6cd5 \u5728\u8fd9\u91cc","title":"\u7b80\u4ecb"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#save_serving_tool","text":"","title":"save_serving_tool"},{"location":"single_client/extended_topics/oneflow_convert_tools.html#_8","text":"\u672c\u5de5\u5177\u7684\u76ee\u7684\u662f\u5c06 OneFlow \u8bad\u7ec3\u7684\u6a21\u578b\u8f6c\u6362\u4e3a Serving \u7aef\u53ef\u7528\u7684\u6a21\u578b\uff0c\u4f7f\u7528\u65b9\u6cd5 \u5728\u8fd9\u91cc","title":"\u7b80\u4ecb"},{"location":"single_client/extended_topics/watch_watch_diff.html","text":"\u83b7\u53d6\u8fd0\u884c\u65f6\u6570\u636e \u00b6 OneFlow \u63d0\u4f9b\u4e86 oneflow.watch \u4e0e oneflow.watch_diff \u63a5\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u6ce8\u518c\u56de\u8c03\u51fd\u6570\uff0c\u4ee5\u65b9\u4fbf\u5728\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u5f20\u91cf\u6570\u636e\u6216\u68af\u5ea6\u3002 \u4f7f\u7528\u6d41\u7a0b \u00b6 \u60f3\u8981\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\u7684\u6570\u636e\u6216\u8005\u68af\u5ea6\uff0c\u5176\u57fa\u672c\u6d41\u7a0b\u5982\u4e0b\uff1a \u7f16\u5199\u56de\u8c03\u51fd\u6570\uff0c\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u9700\u8981\u7528\u6ce8\u89e3\u65b9\u5f0f\u8868\u660e\u76d1\u63a7\u7684\u6570\u636e\u7c7b\u578b\uff0c\u56de\u8c03\u51fd\u6570\u5185\u90e8\u903b\u8f91\u7531\u7528\u6237\u81ea\u5df1\u5b9e\u73b0 \u5728\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u901a\u8fc7 oneflow.watch \u6216 oneflow.watch_diff \u6ce8\u518c\u56de\u8c03\u51fd\u6570\uff0c\u524d\u8005\u83b7\u53d6\u5f20\u91cf\u6570\u636e\u672c\u8eab\uff0c\u540e\u8005\u83b7\u53d6\u5bf9\u5e94\u7684\u68af\u5ea6 \u5728\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\uff0cOneFlow \u6846\u67b6\u4f1a\u5728\u9002\u5f53\u7684\u65f6\u673a\uff0c\u8c03\u7528\u4e4b\u524d\u6ce8\u518c\u7684\u56de\u8c03\uff0c\u5c06\u76d1\u63a7\u7684\u6570\u636e\u4f20\u9012\u7ed9\u56de\u8c03\u51fd\u6570\uff0c\u5e76\u6267\u884c\u56de\u8c03\u51fd\u6570\u4e2d\u7684\u903b\u8f91 \u4ee5 oneflow.watch \u4e3a\u4f8b\uff0c\u4ee5\u4e0b\u4f2a\u4ee3\u7801\u5c55\u793a\u4e86\u4f7f\u7528\u8fc7\u7a0b\uff1a def my_watch ( x : T ): #\u5904\u7406x @global_function () def foo () -> T : #\u5b9a\u4e49\u7f51\u7edc\u7b49 ... oneflow . watch ( x , my_watch ) #... \u4ee5\u4e0a\u7684 T \u5373 flow.typing \u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982 flow.typing.Numpy \uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 \u6b64\u6587 \u3002 \u4ee5\u4e0b\u6211\u4eec\u5c06\u7528\u5b9e\u9645\u4f8b\u5b50\u5c55\u793a watch \u4e0e watch_diff \u7684\u4f7f\u7528\u65b9\u6cd5 watch \u4f7f\u7528\u4f8b\u5b50 \u00b6 \u4e0b\u9762\u662f\u4e00\u6bb5\u5b8c\u6574\u7684\u4f8b\u5b50\uff0c\u7528\u4e8e\u5c55\u793a\u5982\u4f55\u4f7f\u7528 OneFlow \u7684 oneflow.watch \u529f\u80fd\u83b7\u53d6\u7f51\u7edc\u4e2d\u95f4\u5c42\u7684\u6570\u636e\u3002 \u4ee3\u7801 \u00b6 \u4ee3\u7801\uff1a test_watch.py \u8fd0\u884c\u8be5\u7a0b\u5e8f\uff1a python3 test_watch.py \u80fd\u591f\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a in: [ 0.15727027 0.45887455 0.10939325 0.66666406 -0.62354755] out: [0.15727027 0.45887455 0.10939325 0.66666406 0. ] \u4ee3\u7801\u89e3\u8bfb \u00b6 \u5728\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5173\u6ce8\u7684\u662f ReluJob \u91cc\u9762\u7684 y \uff0c\u6240\u4ee5\u8c03\u7528 flow.watch(y, watch_handler) \u53bb\u76d1\u63a7 y \u3002 oneflow.watch \u9700\u8981\u4e24\u4e2a\u53c2\u6570: \u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u6211\u4eec\u5173\u6ce8\u7684\u5bf9\u8c61 y \uff1b \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0cOneFlow \u5728\u8c03\u7528\u8bbe\u5907\u8d44\u6e90\u6267\u884c ReluJob \u7684\u65f6\u5019\u4f1a\u5c06 y \u7684\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u3002\u800c\u6211\u4eec\u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570 watch_handler \u7684\u903b\u8f91\u51fd\u6570\uff0c\u662f\u5c06\u5f97\u5230\u7684\u53c2\u6570\u6253\u5370\u51fa\u6765\u3002 \u7528\u6237\u901a\u8fc7\u81ea\u5b9a\u4e49\u56de\u8c03\u51fd\u6570\uff0c\u5728\u56de\u8c03\u51fd\u6570\u4e2d\u6309\u7167\u81ea\u5df1\u7684\u9700\u6c42\u5904\u7406 OneFlow \u8fd0\u884c\u65f6\u4ece\u8bbe\u5907\u4e2d\u62ff\u5230\u7684\u6570\u636e\u3002 watch_diff \u4f7f\u7528\u4f8b\u5b50 \u00b6 \u4e0b\u9762\u662f\u4e00\u6bb5\u5b8c\u6574\u7684\u4f8b\u5b50\uff0c\u7528\u4e8e\u5c55\u793a\u5982\u4f55\u4f7f\u7528 OneFlow \u7684 oneflow.watch_diff \u529f\u80fd\u83b7\u53d6\u7f51\u7edc\u4e2d\u95f4\u5c42\u7684\u68af\u5ea6\u3002 \u4ee3\u7801 \u00b6 \u4ee3\u7801\uff1a test_watch_diff.py \u8fd0\u884c\u8be5\u7a0b\u5e8f\uff1a python3 test_watch_diff.py \u80fd\u591f\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a [ ... [ 1.39966095e-03 3.49164731e-03 3.31605263e-02 4.50417027e-03 7.73609674e-04 4.89911772e-02 2.47627571e-02 7.65468649e-05 -1.18361652e-01 1.20161276e-03]] (100, 10) float32 \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4ee5\u4e0a\u901a\u8fc7 oneflow.watch_diff \u83b7\u53d6\u68af\u5ea6\u7684\u4f8b\u5b50\uff0c\u5176\u6d41\u7a0b\u4e0e \u901a\u8fc7 oneflow.watch \u83b7\u53d6\u5f20\u91cf\u6570\u636e\u7684\u4f8b\u5b50\u662f\u7c7b\u4f3c\u7684\u3002 \u9996\u5148\uff0c\u5b9a\u4e49\u4e86\u56de\u8c03\u51fd\u6570\uff1a def watch_diff_handler ( blob : tp . Numpy ): print ( \"watch_diff_handler:\" , blob , blob . shape , blob . dtype ) \u7136\u540e\uff0c\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u4f7f\u7528 oneflow.watch_diff \u6ce8\u518c\u4ee5\u4e0a\u7684\u56de\u8c03\u51fd\u6570\uff1a flow . watch_diff ( logits , watch_diff_handler ) \u5728 OneFlow \u8fd0\u884c\u65f6\uff0c OneFlow \u6846\u67b6\u5c31\u4f1a\u8c03\u7528 watch_diff_handler \uff0c\u5e76\u4e14\u5c06\u4ee5\u4e0a\u7684 logits \u5bf9\u5e94\u7684\u68af\u5ea6\u4f20\u9012\u7ed9 watch_diff_handler \u3002","title":"\u83b7\u53d6\u8fd0\u884c\u65f6\u6570\u636e"},{"location":"single_client/extended_topics/watch_watch_diff.html#_1","text":"OneFlow \u63d0\u4f9b\u4e86 oneflow.watch \u4e0e oneflow.watch_diff \u63a5\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u6ce8\u518c\u56de\u8c03\u51fd\u6570\uff0c\u4ee5\u65b9\u4fbf\u5728\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u5f20\u91cf\u6570\u636e\u6216\u68af\u5ea6\u3002","title":"\u83b7\u53d6\u8fd0\u884c\u65f6\u6570\u636e"},{"location":"single_client/extended_topics/watch_watch_diff.html#_2","text":"\u60f3\u8981\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\u7684\u6570\u636e\u6216\u8005\u68af\u5ea6\uff0c\u5176\u57fa\u672c\u6d41\u7a0b\u5982\u4e0b\uff1a \u7f16\u5199\u56de\u8c03\u51fd\u6570\uff0c\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u9700\u8981\u7528\u6ce8\u89e3\u65b9\u5f0f\u8868\u660e\u76d1\u63a7\u7684\u6570\u636e\u7c7b\u578b\uff0c\u56de\u8c03\u51fd\u6570\u5185\u90e8\u903b\u8f91\u7531\u7528\u6237\u81ea\u5df1\u5b9e\u73b0 \u5728\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u901a\u8fc7 oneflow.watch \u6216 oneflow.watch_diff \u6ce8\u518c\u56de\u8c03\u51fd\u6570\uff0c\u524d\u8005\u83b7\u53d6\u5f20\u91cf\u6570\u636e\u672c\u8eab\uff0c\u540e\u8005\u83b7\u53d6\u5bf9\u5e94\u7684\u68af\u5ea6 \u5728\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\uff0cOneFlow \u6846\u67b6\u4f1a\u5728\u9002\u5f53\u7684\u65f6\u673a\uff0c\u8c03\u7528\u4e4b\u524d\u6ce8\u518c\u7684\u56de\u8c03\uff0c\u5c06\u76d1\u63a7\u7684\u6570\u636e\u4f20\u9012\u7ed9\u56de\u8c03\u51fd\u6570\uff0c\u5e76\u6267\u884c\u56de\u8c03\u51fd\u6570\u4e2d\u7684\u903b\u8f91 \u4ee5 oneflow.watch \u4e3a\u4f8b\uff0c\u4ee5\u4e0b\u4f2a\u4ee3\u7801\u5c55\u793a\u4e86\u4f7f\u7528\u8fc7\u7a0b\uff1a def my_watch ( x : T ): #\u5904\u7406x @global_function () def foo () -> T : #\u5b9a\u4e49\u7f51\u7edc\u7b49 ... oneflow . watch ( x , my_watch ) #... \u4ee5\u4e0a\u7684 T \u5373 flow.typing \u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982 flow.typing.Numpy \uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 \u6b64\u6587 \u3002 \u4ee5\u4e0b\u6211\u4eec\u5c06\u7528\u5b9e\u9645\u4f8b\u5b50\u5c55\u793a watch \u4e0e watch_diff \u7684\u4f7f\u7528\u65b9\u6cd5","title":"\u4f7f\u7528\u6d41\u7a0b"},{"location":"single_client/extended_topics/watch_watch_diff.html#watch","text":"\u4e0b\u9762\u662f\u4e00\u6bb5\u5b8c\u6574\u7684\u4f8b\u5b50\uff0c\u7528\u4e8e\u5c55\u793a\u5982\u4f55\u4f7f\u7528 OneFlow \u7684 oneflow.watch \u529f\u80fd\u83b7\u53d6\u7f51\u7edc\u4e2d\u95f4\u5c42\u7684\u6570\u636e\u3002","title":"watch \u4f7f\u7528\u4f8b\u5b50"},{"location":"single_client/extended_topics/watch_watch_diff.html#_3","text":"\u4ee3\u7801\uff1a test_watch.py \u8fd0\u884c\u8be5\u7a0b\u5e8f\uff1a python3 test_watch.py \u80fd\u591f\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a in: [ 0.15727027 0.45887455 0.10939325 0.66666406 -0.62354755] out: [0.15727027 0.45887455 0.10939325 0.66666406 0. ]","title":"\u4ee3\u7801"},{"location":"single_client/extended_topics/watch_watch_diff.html#_4","text":"\u5728\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5173\u6ce8\u7684\u662f ReluJob \u91cc\u9762\u7684 y \uff0c\u6240\u4ee5\u8c03\u7528 flow.watch(y, watch_handler) \u53bb\u76d1\u63a7 y \u3002 oneflow.watch \u9700\u8981\u4e24\u4e2a\u53c2\u6570: \u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u6211\u4eec\u5173\u6ce8\u7684\u5bf9\u8c61 y \uff1b \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0cOneFlow \u5728\u8c03\u7528\u8bbe\u5907\u8d44\u6e90\u6267\u884c ReluJob \u7684\u65f6\u5019\u4f1a\u5c06 y \u7684\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u3002\u800c\u6211\u4eec\u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570 watch_handler \u7684\u903b\u8f91\u51fd\u6570\uff0c\u662f\u5c06\u5f97\u5230\u7684\u53c2\u6570\u6253\u5370\u51fa\u6765\u3002 \u7528\u6237\u901a\u8fc7\u81ea\u5b9a\u4e49\u56de\u8c03\u51fd\u6570\uff0c\u5728\u56de\u8c03\u51fd\u6570\u4e2d\u6309\u7167\u81ea\u5df1\u7684\u9700\u6c42\u5904\u7406 OneFlow \u8fd0\u884c\u65f6\u4ece\u8bbe\u5907\u4e2d\u62ff\u5230\u7684\u6570\u636e\u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"single_client/extended_topics/watch_watch_diff.html#watch_diff","text":"\u4e0b\u9762\u662f\u4e00\u6bb5\u5b8c\u6574\u7684\u4f8b\u5b50\uff0c\u7528\u4e8e\u5c55\u793a\u5982\u4f55\u4f7f\u7528 OneFlow \u7684 oneflow.watch_diff \u529f\u80fd\u83b7\u53d6\u7f51\u7edc\u4e2d\u95f4\u5c42\u7684\u68af\u5ea6\u3002","title":"watch_diff \u4f7f\u7528\u4f8b\u5b50"},{"location":"single_client/extended_topics/watch_watch_diff.html#_5","text":"\u4ee3\u7801\uff1a test_watch_diff.py \u8fd0\u884c\u8be5\u7a0b\u5e8f\uff1a python3 test_watch_diff.py \u80fd\u591f\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a [ ... [ 1.39966095e-03 3.49164731e-03 3.31605263e-02 4.50417027e-03 7.73609674e-04 4.89911772e-02 2.47627571e-02 7.65468649e-05 -1.18361652e-01 1.20161276e-03]] (100, 10) float32","title":"\u4ee3\u7801"},{"location":"single_client/extended_topics/watch_watch_diff.html#_6","text":"\u4ee5\u4e0a\u901a\u8fc7 oneflow.watch_diff \u83b7\u53d6\u68af\u5ea6\u7684\u4f8b\u5b50\uff0c\u5176\u6d41\u7a0b\u4e0e \u901a\u8fc7 oneflow.watch \u83b7\u53d6\u5f20\u91cf\u6570\u636e\u7684\u4f8b\u5b50\u662f\u7c7b\u4f3c\u7684\u3002 \u9996\u5148\uff0c\u5b9a\u4e49\u4e86\u56de\u8c03\u51fd\u6570\uff1a def watch_diff_handler ( blob : tp . Numpy ): print ( \"watch_diff_handler:\" , blob , blob . shape , blob . dtype ) \u7136\u540e\uff0c\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u4f7f\u7528 oneflow.watch_diff \u6ce8\u518c\u4ee5\u4e0a\u7684\u56de\u8c03\u51fd\u6570\uff1a flow . watch_diff ( logits , watch_diff_handler ) \u5728 OneFlow \u8fd0\u884c\u65f6\uff0c OneFlow \u6846\u67b6\u5c31\u4f1a\u8c03\u7528 watch_diff_handler \uff0c\u5e76\u4e14\u5c06\u4ee5\u4e0a\u7684 logits \u5bf9\u5e94\u7684\u68af\u5ea6\u4f20\u9012\u7ed9 watch_diff_handler \u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"single_client/quick_start/introduce.html","text":"\u539f\u63a5\u53e3\u517c\u5bb9 \u00b6 \u672c\u4e13\u9898\u4ec5\u4ec5\u662f\u4e3a\u517c\u5bb9\u539f\u63a5\u53e3\u800c\u4fdd\u7559\u3002\u5982\u679c\u60a8\u672a\u4f7f\u7528\u8fc7 v0.4.0 \u53ca\u4e4b\u524d\u7684\u7248\u672c\uff0c\u8bf7 \u76f4\u63a5\u5ffd\u7565\u6389\u672c\u4e13\u9898\u7684\u6240\u6709\u5185\u5bb9 \u3002 \u5728 OneFlow v0.4.0 \u7248\u672c\u53ca\u4ee5\u524d\uff0cOneFlow \u7684\u63a5\u53e3\u662f\u975e\u9762\u5411\u5bf9\u8c61\u7684\u3002\u73b0\u6709\u7248\u672c\u7684\u52a8\u6001\u56fe\u3001\u9759\u6001\u56fe\u6a21\u5f0f\u5747\u63d0\u4f9b\u4e86\u9762\u5411\u5bf9\u8c61\u63a5\u53e3\u3002 \u4e3a\u4e86\u7167\u987e\u8001\u63a5\u53e3\u7684\u7528\u6237\uff0cOneFlow \u5c06\u8001\u63a5\u53e3\u79fb\u52a8\u81f3 oneflow.compatible.single_client \u3002 \u6709\u5386\u53f2\u9057\u7559\u4ee3\u7801\u7684\u7528\u6237\uff0c\u53ea\u9700\u8981\u5c06\u539f\u4ee3\u7801\u7684\u5305\u5bfc\u5165\uff1a import oneflow as flow import oneflow.typing as tp \u6539\u4e3a\u65b0\u7684\u5bfc\u5165\u65b9\u5f0f\u5373\u53ef\uff1a from oneflow.compatible import single_client as flow from oneflow.compatible.single_client import typing as tp","title":"\u8bf4\u660e"},{"location":"single_client/quick_start/introduce.html#_1","text":"\u672c\u4e13\u9898\u4ec5\u4ec5\u662f\u4e3a\u517c\u5bb9\u539f\u63a5\u53e3\u800c\u4fdd\u7559\u3002\u5982\u679c\u60a8\u672a\u4f7f\u7528\u8fc7 v0.4.0 \u53ca\u4e4b\u524d\u7684\u7248\u672c\uff0c\u8bf7 \u76f4\u63a5\u5ffd\u7565\u6389\u672c\u4e13\u9898\u7684\u6240\u6709\u5185\u5bb9 \u3002 \u5728 OneFlow v0.4.0 \u7248\u672c\u53ca\u4ee5\u524d\uff0cOneFlow \u7684\u63a5\u53e3\u662f\u975e\u9762\u5411\u5bf9\u8c61\u7684\u3002\u73b0\u6709\u7248\u672c\u7684\u52a8\u6001\u56fe\u3001\u9759\u6001\u56fe\u6a21\u5f0f\u5747\u63d0\u4f9b\u4e86\u9762\u5411\u5bf9\u8c61\u63a5\u53e3\u3002 \u4e3a\u4e86\u7167\u987e\u8001\u63a5\u53e3\u7684\u7528\u6237\uff0cOneFlow \u5c06\u8001\u63a5\u53e3\u79fb\u52a8\u81f3 oneflow.compatible.single_client \u3002 \u6709\u5386\u53f2\u9057\u7559\u4ee3\u7801\u7684\u7528\u6237\uff0c\u53ea\u9700\u8981\u5c06\u539f\u4ee3\u7801\u7684\u5305\u5bfc\u5165\uff1a import oneflow as flow import oneflow.typing as tp \u6539\u4e3a\u65b0\u7684\u5bfc\u5165\u65b9\u5f0f\u5373\u53ef\uff1a from oneflow.compatible import single_client as flow from oneflow.compatible.single_client import typing as tp","title":"\u539f\u63a5\u53e3\u517c\u5bb9"},{"location":"single_client/quick_start/lenet_mnist.html","text":"\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\uff1a \u4f7f\u7528 OneFlow \u63a5\u53e3\u914d\u7f6e\u8f6f\u786c\u4ef6\u73af\u5883 \u4f7f\u7528 OneFlow \u7684\u63a5\u53e3\u5b9a\u4e49\u6a21\u578b \u4f7f\u7528 train \u7c7b\u578b\u4f5c\u4e1a\u51fd\u6570\u505a\u6a21\u578b\u8bad\u7ec3 \u6a21\u578b\u7684\u4fdd\u5b58\u548c\u52a0\u8f7d \u4f7f\u7528 predict \u7c7b\u578b\u4f5c\u4e1a\u51fd\u6570\u505a\u6a21\u578b\u6821\u9a8c \u4f7f\u7528 predict \u7c7b\u578b\u4f5c\u4e1a\u51fd\u6570\u505a\u56fe\u50cf\u8bc6\u522b \u672c\u6587\u901a\u8fc7\u4f7f\u7528 LeNet \u6a21\u578b\uff0c\u8bad\u7ec3 MNIST \u6570\u636e\u96c6\u5411\u5927\u5bb6\u4ecb\u7ecd\u4f7f\u7528 OneFlow \u7684\u5404\u4e2a\u6838\u5fc3\u73af\u8282\uff0c\u6587\u672b\u9644\u6709\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801\u7684\u94fe\u63a5\u3002 \u5728\u5b66\u4e60\u4e4b\u524d\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u5404\u811a\u672c\u529f\u80fd\uff08 \u811a\u672c\u8fd0\u884c\u4f9d\u8d56 \u9ed8\u8ba4\u9009\u62e9\u673a\u5668\u4e0a\u76840\u53f7GPU\uff0c\u5982\u679c\u4f60\u5b89\u88c5\u7684\u662fCPU\u7248\u672cOneFlow\uff0c\u5219\u811a\u672c\u4f1a\u81ea\u52a8\u8c03\u7528CPU\u6765\u505a\u8bad\u7ec3\u3002 \uff09\u3002 \u9996\u5148\uff0c\u540c\u6b65\u672c\u6587\u6863\u4ed3\u5e93\u5e76\u5207\u6362\u5230\u5bf9\u5e94\u8def\u5f84\uff1a git clone https://github.com/Oneflow-Inc/oneflow-documentation.git cd oneflow-documentation/cn/docs/code/quick_start/ \u6a21\u578b\u8bad\u7ec3 python lenet_train.py \u4ee5\u4e0a\u547d\u4ee4\u5c06\u5bf9 MNIST \u6570\u636e\u96c6\u8fdb\u884c\u8bad\u7ec3\uff0c\u5e76\u4fdd\u5b58\u6a21\u578b\u3002 \u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz 5.9947124 1.0865117 0.5317516 0.20937675 0.26428983 0.21764673 0.23443426 ... \u4ee5\u4e0b\u7684\u4e24\u4e2a\u811a\u672c lenet_eval.py \u4e0e lenet_test.py \u90fd\u4f9d\u8d56\u4ee5\u4e0a\u8bad\u7ec3\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u9700\u8981\u5148\u8fd0\u884c\u4ee5\u4e0a\u811a\u672c\u3002\u6216\u8005\u4f60\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d\u6211\u4eec\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u5219\u53ef\u4ee5\u7565\u8fc7\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u4e0b\u8f7d\u65b9\u6cd5\u5982\u4e0b\uff1a #\u5728\u4ed3\u5e93docs/code/quick_start/\u76ee\u5f55\u4e0b wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/quick_start/lenet_models_1.zip unzip lenet_models_1.zip \u6a21\u578b\u6821\u9a8c python lenet_eval.py \u4ee5\u4e0a\u547d\u4ee4\uff0c\u4f7f\u7528 MNIST \u6d4b\u8bd5\u96c6\u5bf9\u521a\u521a\u751f\u6210\u7684\u6a21\u578b\u8fdb\u884c\u6821\u9a8c\uff0c\u5e76\u7ed9\u51fa\u51c6\u786e\u7387\u3002 \u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz accuracy: 99.4% \u56fe\u50cf\u8bc6\u522b python lenet_test.py ./9.png # \u8f93\u51fa\uff1aprediction: 9 \u4ee5\u4e0a\u547d\u4ee4\u5c06\u4f7f\u7528\u4e4b\u524d\u8bad\u7ec3\u7684\u6a21\u578b\u5bf9\u6211\u4eec\u51c6\u5907\u597d\u7684 9.png \u56fe\u7247\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u9884\u6d4b\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4e0b\u8f7d\u6211\u4eec \u63d0\u53d6\u597d\u7684 mnist \u56fe\u7247 \uff0c\u81ea\u884c\u5bf9\u66f4\u591a\u56fe\u7247\u6587\u4ef6\u7684\u9884\u6d4b\u6548\u679c\u8fdb\u884c\u9a8c\u8bc1\u3002 MNIST \u6570\u636e\u96c6\u4ecb\u7ecd \u00b6 MNIST \u662f\u4e00\u4e2a\u624b\u5199\u6570\u5b57\u7684\u6570\u636e\u96c6\u3002\u5305\u62ec\u4e86\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6\uff1b\u8bad\u7ec3\u96c6\u5305\u542b\u4e8660000\u5f20\u56fe\u7247\u4ee5\u53ca\u56fe\u7247\u5bf9\u5e94\u7684\u6807\u7b7e\uff0c\u6d4b\u8bd5\u96c6\u5305\u542b\u4e8610000\u5f20\u56fe\u7247\u4ee5\u53ca\u56fe\u7247\u6d4b\u8bd5\u7684\u6807\u7b7e\u3002Yann LeCun \u7b49\u5df2\u7ecf\u5c06\u56fe\u7247\u8fdb\u884c\u4e86\u5927\u5c0f\u5f52\u4e00\u5316\u53ca\u5c45\u4e2d\u5904\u7406\uff0c\u5e76\u4e14\u6253\u5305\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f9b\u4e0b\u8f7d( http://yann.lecun.com/exdb/mnist/ )\u3002\u672c\u6587\u6d89\u53ca\u7684\u811a\u672c\u4f1a\u81ea\u52a8\u4e0b\u8f7d MNIST \u6570\u636e\u96c6\u3002 \u5b9a\u4e49\u8bad\u7ec3\u6a21\u578b \u00b6 \u5728 oneflow.nn \u53ca oneflow.layers \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u5e38\u89c1\u7684\u7528\u4e8e\u6784\u5efa\u6a21\u578b\u7684\u7b97\u5b50\u3002 def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u642d\u5efa\u4e86\u4e00\u4e2a LeNet \u7f51\u7edc\u6a21\u578b\u3002 \u5b9e\u73b0\u8bad\u7ec3\u4f5c\u4e1a\u51fd\u6570 \u00b6 OneFlow \u4e2d\u63d0\u4f9b\u4e86 oneflow.global_function \u88c5\u9970\u5668\uff0c\u901a\u8fc7\u5b83\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e2a Python \u51fd\u6570\u8f6c\u53d8\u4e3a\u4f5c\u4e1a\u51fd\u6570\uff08job function\uff09\u3002 global_function \u88c5\u9970\u5668 \u00b6 oneflow.global_function \u88c5\u9970\u5668\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a type \u4e0e function_config \u3002 type \u7528\u4e8e\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u7c7b\u578b\uff0c type=\"train\" \u610f\u5473\u7740\u4f5c\u4e1a\u51fd\u6570\u7528\u4e8e\u8bad\u7ec3\uff0c type=\"predict\" \u610f\u5473\u7740\u4f5c\u4e1a\u51fd\u6570\u7528\u4e8e\u9884\u6d4b\u3002 function_config \u53c2\u6570\u662f\u4e00\u4e2a oneflow.function_config \u5bf9\u8c61\uff0c\u53ef\u7528\u5b83\u914d\u7f6e\u4f5c\u4e1a\u51fd\u6570\u7684\u7ec6\u8282\u3002 \u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\u5c55\u793a\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a train \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\uff0c\u56e0\u4e3a\u6ca1\u6709\u8bbe\u7f6e function_config \uff0c\u6240\u4ee5\u4f5c\u4e1a\u51fd\u6570\u7684\u5176\u5b83\u914d\u7f6e\u4e3a\u9ed8\u8ba4\u914d\u7f6e\u3002 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 )) -> tp . Numpy : #\u4f5c\u4e1a\u51fd\u6570\u5b9e\u73b0 ... \u5176\u4e2d\u7684 tp.Numpy.Placeholder \u662f\u6570\u636e\u5360\u4f4d\u7b26\uff0c -> tp.Numpy \u6307\u5b9a\u8fd9\u4e2a\u4f5c\u4e1a\u51fd\u6570\u5728\u8c03\u7528\u65f6\uff0c\u5c06\u8fd4\u56de\u4e00\u4e2a numpy \u5bf9\u8c61\u3002 \u6307\u5b9a\u4f18\u5316\u76ee\u6807 \u00b6 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 oneflow.optimizer \u4e0b\u7684\u63a5\u53e3\u6307\u5b9a\u4f18\u5316\u5668\u53ca\u5176\u4f18\u5316\u76ee\u6807\u3002\u8fd9\u6837\uff0cOneFlow \u5728\u6bcf\u6b21\u8fed\u4ee3\u8bad\u7ec3\u4f5c\u4e1a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u4ee5\u6307\u5b9a\u7684\u65b9\u5f0f\u4f18\u5316\u76ee\u6807\u3002 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u4ee5\u4e0a\uff0c\u6211\u4eec\u901a\u8fc7 flow.nn.sparse_softmax_cross_entropy_with_logits \u6c42\u5f97 loss \uff0c\u5e76\u4e14\u5c06 loss \u4f5c\u4e3a\u4f18\u5316\u76ee\u6807\u3002 lr_scheduler \u8bbe\u5b9a\u4e86\u5b66\u4e60\u7387\u8ba1\u5212\uff0c[0.1]\u8868\u660e\u521d\u59cb\u5b66\u4e60\u7387\u4e3a0.1\uff1b flow.optimizer.SGD \u5219\u6307\u5b9a\u4e86\u4f18\u5316\u5668\u4e3a SGD\uff1bloss \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 minimize \u8868\u660e\u4f18\u5316\u5668\u5c06\u4ee5\u6700\u5c0f\u5316 loss \u4e3a\u76ee\u6807\u3002 \u66f4\u591a optimizer \u53ca\u5176\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u89c1 oneflow.optimizer \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u5e76\u4ea4\u4e92 \u00b6 \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u5c31\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\u3002 \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u7531\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\u6307\u5b9a\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u51b3\u5b9a\uff0c\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u7ed3\u679c\u3002 \u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u7684\u4f8b\u5b50 \u00b6 \u5728 lenet_train.py \u4e2d\u5b9a\u4e49\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u8be5\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a tp.Numpy \uff0c\u5219\u5f53\u8c03\u7528\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a numpy \u5bf9\u8c61\uff1a for epoch in range ( 20 ): for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u6211\u4eec\u8c03\u7528\u4e86 train_job \u5e76\u6bcf\u5faa\u73af20\u6b21\u6253\u53701\u6b21 loss.mean() \u3002 \u8fd4\u56de\u591a\u4e2a\u7ed3\u679c\u7684\u4f8b\u5b50 \u00b6 \u5728\u6a21\u578b\u6821\u9a8c\u7684\u4ee3\u7801 lenet_eval.py \u4e2d\u5b9a\u4e49\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"predict\" ) def eval_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = False ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) return ( labels , logits ) \u8be5\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a Tuple[tp.Numpy, tp.Numpy] \uff0c\u5219\u5f53\u8c03\u7528\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a tuple \u5143\u7ec4\uff0c\u91cc\u9762\u67092\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a numpy \u5bf9\u8c61\uff1a for i , ( images , labels ) in enumerate ( zip ( test_images , test_labels )): labels , logits = eval_job ( images , labels ) acc ( labels , logits ) \u6211\u4eec\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e86 labels \u4e0e logits \uff0c\u5e76\u7528\u5b83\u4eec\u8bc4\u4f30\u6a21\u578b\u51c6\u786e\u7387\u3002 \u540c\u6b65\u4e0e\u5f02\u6b65\u8c03\u7528 \u00b6 \u672c\u6587\u6240\u6709\u4ee3\u7801\u90fd\u662f\u540c\u6b65\u65b9\u5f0f\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a OneFlow \u8fd8\u652f\u6301\u5f02\u6b65\u65b9\u5f0f\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5177\u4f53\u53ef\u53c2\u8003 \u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u4e00\u6587\u3002 \u6a21\u578b\u7684\u521d\u59cb\u5316\u3001\u4fdd\u5b58\u4e0e\u52a0\u8f7d \u00b6 \u6a21\u578b\u7684\u521d\u59cb\u5316\u4e0e\u4fdd\u5b58 \u00b6 \u901a\u8fc7 flow.checkpoint.save \u65b9\u6cd5\u4fdd\u5b58\u6a21\u578b\u3002\u5982\u4e0b\u4f8b\uff1a if __name__ == '__main__' : #\u52a0\u8f7d\u6570\u636e\u53ca\u8bad\u7ec3 ... flow . checkpoint . save ( \"./lenet_models_1\" ) \u4fdd\u5b58\u6210\u529f\u540e\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u540d\u4e3a lenet_models_1 \u7684 \u76ee\u5f55 \uff0c\u8be5\u76ee\u5f55\u4e2d\u5305\u542b\u4e86\u4e0e\u6a21\u578b\u53c2\u6570\u5bf9\u5e94\u7684\u5b50\u76ee\u5f55\u53ca\u6587\u4ef6\u3002 \u6a21\u578b\u7684\u52a0\u8f7d \u00b6 \u5728\u9884\u6d4b\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 flow.checkpoint.get \u4ece\u6587\u4ef6\u4e2d\u52a0\u8f7d\u53c2\u6570\u503c\u5230\u5185\u5b58\uff0c\u518d\u901a\u8fc7 flow.load_variables \u5c06\u53c2\u6570\u503c\u66f4\u65b0\u5230\u6a21\u578b\u4e0a\u3002\u5982\u4e0b\u4f8b\uff1a if __name__ == '__main__' : flow . load_variables ( flow . checkpoint . get ( \"./lenet_models_1\" )) #\u6821\u9a8c\u8fc7\u7a0b ... \u6a21\u578b\u7684\u6821\u9a8c \u00b6 \u7528\u4e8e\u6821\u9a8c\u7684 predict \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u4e0e train \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570 \u51e0\u4e4e\u6ca1\u6709\u533a\u522b \uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u6821\u9a8c\u8fc7\u7a0b\u4e2d\u7684\u6a21\u578b\u53c2\u6570\u6765\u81ea\u4e8e\u5df2\u7ecf\u4fdd\u5b58\u597d\u7684\u6a21\u578b\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u521d\u59cb\u5316\uff0c\u4e0d\u9700\u8981\u66f4\u65b0\u6a21\u578b\u53c2\u6570\uff08\u6240\u4ee5\u4e5f\u4e0d\u7528\u6307\u5b9a optimizer \uff09\u3002 \u7528\u4e8e\u6821\u9a8c\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u7f16\u5199 \u00b6 @flow . global_function ( type = \"predict\" ) def eval_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = False ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) return ( labels , logits ) \u4ee5\u4e0a\u662f\u7528\u4e8e\u6821\u9a8c\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u58f0\u660e\u4e86\u8fd4\u56de\u503c\u7c7b\u578b\u662f Tuple[tp.Numpy, tp.Numpy] \uff0c \u56e0\u6b64\u8fd4\u56de\u4e00\u4e2a tuple \uff0c tuple \u4e2d\u67092\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f1\u4e2a numpy \u5bf9\u8c61\u3002\u6211\u4eec\u5c06\u8c03\u7528 predict \u7c7b\u578b\u4f5c\u4e1a\u51fd\u6570\uff0c\u5e76\u6839\u636e\u8fd4\u56de\u7ed3\u679c\u8ba1\u7b97\u51c6\u786e\u7387\u3002 \u8fed\u4ee3\u6821\u9a8c \u00b6 \u4ee5\u4e0b acc \u51fd\u6570\u4e2d\u7edf\u8ba1\u6837\u672c\u7684\u603b\u6570\u76ee\uff0c\u4ee5\u53ca\u6821\u9a8c\u6b63\u786e\u7684\u603b\u6570\u76ee\uff0c\u6211\u4eec\u5c06\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5f97\u5230 labels \u4e0e logits \uff1a g_total = 0 g_correct = 0 def acc ( labels , logits ): global g_total global g_correct predictions = np . argmax ( logits , 1 ) right_count = np . sum ( predictions == labels ) g_total += labels . shape [ 0 ] g_correct += right_count \u8c03\u7528\u6821\u9a8c\u4f5c\u4e1a\u51fd\u6570\uff1a if __name__ == \"__main__\" : flow . load_variables ( flow . checkpoint . get ( \"./lenet_models_1\" )) ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE , BATCH_SIZE ) for epoch in range ( 1 ): for i , ( images , labels ) in enumerate ( zip ( test_images , test_labels )): labels , logits = eval_job ( images , labels ) acc ( labels , logits ) print ( \"accuracy: {0:.1f} %\" . format ( g_correct * 100 / g_total )) \u4ee5\u4e0a\uff0c\u5faa\u73af\u8c03\u7528\u6821\u9a8c\u51fd\u6570\uff0c\u6700\u7ec8\u8f93\u51fa\u5728 MNIST \u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u3002 \u9884\u6d4b\u56fe\u7247 \u00b6 \u5c06\u4ee5\u4e0a\u6821\u9a8c\u4ee3\u7801\u4fee\u6539\uff0c\u4f7f\u5f97\u6821\u9a8c\u6570\u636e\u6765\u81ea\u4e8e\u539f\u59cb\u7684\u56fe\u7247\u800c\u4e0d\u662f\u73b0\u6210\u7684\u6570\u636e\u96c6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u56fe\u7247\u5185\u5bb9\u9884\u6d4b\u3002 def load_image ( file ): im = Image . open ( file ) . convert ( \"L\" ) im = im . resize (( 28 , 28 ), Image . ANTIALIAS ) im = np . array ( im ) . reshape ( 1 , 1 , 28 , 28 ) . astype ( np . float32 ) im = ( im - 128.0 ) / 255.0 im . reshape (( - 1 , 1 , 1 , im . shape [ 1 ], im . shape [ 2 ])) return im def main (): if len ( sys . argv ) != 2 : usage () return flow . load_variables ( flow . checkpoint . get ( \"./lenet_models_1\" )) image = load_image ( sys . argv [ 1 ]) logits = test_job ( image ) prediction = np . argmax ( logits , 1 ) print ( \"prediction: {} \" . format ( prediction [ 0 ])) if __name__ == \"__main__\" : main () \u5b8c\u6574\u4ee3\u7801 \u00b6 \u8bad\u7ec3\u6a21\u578b \u00b6 \u4ee3\u7801\uff1a lenet_train.py \u6821\u9a8c\u6a21\u578b \u00b6 \u4ee3\u7801\uff1a lenet_eval.py \u9884\u8bad\u7ec3\u6a21\u578b\uff1a lenet_models_1.zip \u6570\u5b57\u9884\u6d4b \u00b6 \u4ee3\u7801\uff1a lenet_test.py \u9884\u8bad\u7ec3\u6a21\u578b\uff1a lenet_models_1.zip MNIST \u6570\u636e\u96c6\u56fe\u7247\uff1a mnist_raw_images.zip","title":"\u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57"},{"location":"single_client/quick_start/lenet_mnist.html#mnist","text":"MNIST \u662f\u4e00\u4e2a\u624b\u5199\u6570\u5b57\u7684\u6570\u636e\u96c6\u3002\u5305\u62ec\u4e86\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6\uff1b\u8bad\u7ec3\u96c6\u5305\u542b\u4e8660000\u5f20\u56fe\u7247\u4ee5\u53ca\u56fe\u7247\u5bf9\u5e94\u7684\u6807\u7b7e\uff0c\u6d4b\u8bd5\u96c6\u5305\u542b\u4e8610000\u5f20\u56fe\u7247\u4ee5\u53ca\u56fe\u7247\u6d4b\u8bd5\u7684\u6807\u7b7e\u3002Yann LeCun \u7b49\u5df2\u7ecf\u5c06\u56fe\u7247\u8fdb\u884c\u4e86\u5927\u5c0f\u5f52\u4e00\u5316\u53ca\u5c45\u4e2d\u5904\u7406\uff0c\u5e76\u4e14\u6253\u5305\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f9b\u4e0b\u8f7d( http://yann.lecun.com/exdb/mnist/ )\u3002\u672c\u6587\u6d89\u53ca\u7684\u811a\u672c\u4f1a\u81ea\u52a8\u4e0b\u8f7d MNIST \u6570\u636e\u96c6\u3002","title":"MNIST \u6570\u636e\u96c6\u4ecb\u7ecd"},{"location":"single_client/quick_start/lenet_mnist.html#_1","text":"\u5728 oneflow.nn \u53ca oneflow.layers \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u5e38\u89c1\u7684\u7528\u4e8e\u6784\u5efa\u6a21\u578b\u7684\u7b97\u5b50\u3002 def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u642d\u5efa\u4e86\u4e00\u4e2a LeNet \u7f51\u7edc\u6a21\u578b\u3002","title":"\u5b9a\u4e49\u8bad\u7ec3\u6a21\u578b"},{"location":"single_client/quick_start/lenet_mnist.html#_2","text":"OneFlow \u4e2d\u63d0\u4f9b\u4e86 oneflow.global_function \u88c5\u9970\u5668\uff0c\u901a\u8fc7\u5b83\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e2a Python \u51fd\u6570\u8f6c\u53d8\u4e3a\u4f5c\u4e1a\u51fd\u6570\uff08job function\uff09\u3002","title":"\u5b9e\u73b0\u8bad\u7ec3\u4f5c\u4e1a\u51fd\u6570"},{"location":"single_client/quick_start/lenet_mnist.html#global_function","text":"oneflow.global_function \u88c5\u9970\u5668\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a type \u4e0e function_config \u3002 type \u7528\u4e8e\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u7c7b\u578b\uff0c type=\"train\" \u610f\u5473\u7740\u4f5c\u4e1a\u51fd\u6570\u7528\u4e8e\u8bad\u7ec3\uff0c type=\"predict\" \u610f\u5473\u7740\u4f5c\u4e1a\u51fd\u6570\u7528\u4e8e\u9884\u6d4b\u3002 function_config \u53c2\u6570\u662f\u4e00\u4e2a oneflow.function_config \u5bf9\u8c61\uff0c\u53ef\u7528\u5b83\u914d\u7f6e\u4f5c\u4e1a\u51fd\u6570\u7684\u7ec6\u8282\u3002 \u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\u5c55\u793a\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a train \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\uff0c\u56e0\u4e3a\u6ca1\u6709\u8bbe\u7f6e function_config \uff0c\u6240\u4ee5\u4f5c\u4e1a\u51fd\u6570\u7684\u5176\u5b83\u914d\u7f6e\u4e3a\u9ed8\u8ba4\u914d\u7f6e\u3002 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 )) -> tp . Numpy : #\u4f5c\u4e1a\u51fd\u6570\u5b9e\u73b0 ... \u5176\u4e2d\u7684 tp.Numpy.Placeholder \u662f\u6570\u636e\u5360\u4f4d\u7b26\uff0c -> tp.Numpy \u6307\u5b9a\u8fd9\u4e2a\u4f5c\u4e1a\u51fd\u6570\u5728\u8c03\u7528\u65f6\uff0c\u5c06\u8fd4\u56de\u4e00\u4e2a numpy \u5bf9\u8c61\u3002","title":"global_function \u88c5\u9970\u5668"},{"location":"single_client/quick_start/lenet_mnist.html#_3","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 oneflow.optimizer \u4e0b\u7684\u63a5\u53e3\u6307\u5b9a\u4f18\u5316\u5668\u53ca\u5176\u4f18\u5316\u76ee\u6807\u3002\u8fd9\u6837\uff0cOneFlow \u5728\u6bcf\u6b21\u8fed\u4ee3\u8bad\u7ec3\u4f5c\u4e1a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u4ee5\u6307\u5b9a\u7684\u65b9\u5f0f\u4f18\u5316\u76ee\u6807\u3002 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u4ee5\u4e0a\uff0c\u6211\u4eec\u901a\u8fc7 flow.nn.sparse_softmax_cross_entropy_with_logits \u6c42\u5f97 loss \uff0c\u5e76\u4e14\u5c06 loss \u4f5c\u4e3a\u4f18\u5316\u76ee\u6807\u3002 lr_scheduler \u8bbe\u5b9a\u4e86\u5b66\u4e60\u7387\u8ba1\u5212\uff0c[0.1]\u8868\u660e\u521d\u59cb\u5b66\u4e60\u7387\u4e3a0.1\uff1b flow.optimizer.SGD \u5219\u6307\u5b9a\u4e86\u4f18\u5316\u5668\u4e3a SGD\uff1bloss \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 minimize \u8868\u660e\u4f18\u5316\u5668\u5c06\u4ee5\u6700\u5c0f\u5316 loss \u4e3a\u76ee\u6807\u3002 \u66f4\u591a optimizer \u53ca\u5176\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u89c1 oneflow.optimizer","title":"\u6307\u5b9a\u4f18\u5316\u76ee\u6807"},{"location":"single_client/quick_start/lenet_mnist.html#_4","text":"\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u5c31\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\u3002 \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u7531\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\u6307\u5b9a\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u51b3\u5b9a\uff0c\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u7ed3\u679c\u3002","title":"\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u5e76\u4ea4\u4e92"},{"location":"single_client/quick_start/lenet_mnist.html#_5","text":"\u5728 lenet_train.py \u4e2d\u5b9a\u4e49\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u8be5\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a tp.Numpy \uff0c\u5219\u5f53\u8c03\u7528\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a numpy \u5bf9\u8c61\uff1a for epoch in range ( 20 ): for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u6211\u4eec\u8c03\u7528\u4e86 train_job \u5e76\u6bcf\u5faa\u73af20\u6b21\u6253\u53701\u6b21 loss.mean() \u3002","title":"\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u7684\u4f8b\u5b50"},{"location":"single_client/quick_start/lenet_mnist.html#_6","text":"\u5728\u6a21\u578b\u6821\u9a8c\u7684\u4ee3\u7801 lenet_eval.py \u4e2d\u5b9a\u4e49\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"predict\" ) def eval_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = False ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) return ( labels , logits ) \u8be5\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a Tuple[tp.Numpy, tp.Numpy] \uff0c\u5219\u5f53\u8c03\u7528\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a tuple \u5143\u7ec4\uff0c\u91cc\u9762\u67092\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a numpy \u5bf9\u8c61\uff1a for i , ( images , labels ) in enumerate ( zip ( test_images , test_labels )): labels , logits = eval_job ( images , labels ) acc ( labels , logits ) \u6211\u4eec\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e86 labels \u4e0e logits \uff0c\u5e76\u7528\u5b83\u4eec\u8bc4\u4f30\u6a21\u578b\u51c6\u786e\u7387\u3002","title":"\u8fd4\u56de\u591a\u4e2a\u7ed3\u679c\u7684\u4f8b\u5b50"},{"location":"single_client/quick_start/lenet_mnist.html#_7","text":"\u672c\u6587\u6240\u6709\u4ee3\u7801\u90fd\u662f\u540c\u6b65\u65b9\u5f0f\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a OneFlow \u8fd8\u652f\u6301\u5f02\u6b65\u65b9\u5f0f\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5177\u4f53\u53ef\u53c2\u8003 \u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u4e00\u6587\u3002","title":"\u540c\u6b65\u4e0e\u5f02\u6b65\u8c03\u7528"},{"location":"single_client/quick_start/lenet_mnist.html#_8","text":"","title":"\u6a21\u578b\u7684\u521d\u59cb\u5316\u3001\u4fdd\u5b58\u4e0e\u52a0\u8f7d"},{"location":"single_client/quick_start/lenet_mnist.html#_9","text":"\u901a\u8fc7 flow.checkpoint.save \u65b9\u6cd5\u4fdd\u5b58\u6a21\u578b\u3002\u5982\u4e0b\u4f8b\uff1a if __name__ == '__main__' : #\u52a0\u8f7d\u6570\u636e\u53ca\u8bad\u7ec3 ... flow . checkpoint . save ( \"./lenet_models_1\" ) \u4fdd\u5b58\u6210\u529f\u540e\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u540d\u4e3a lenet_models_1 \u7684 \u76ee\u5f55 \uff0c\u8be5\u76ee\u5f55\u4e2d\u5305\u542b\u4e86\u4e0e\u6a21\u578b\u53c2\u6570\u5bf9\u5e94\u7684\u5b50\u76ee\u5f55\u53ca\u6587\u4ef6\u3002","title":"\u6a21\u578b\u7684\u521d\u59cb\u5316\u4e0e\u4fdd\u5b58"},{"location":"single_client/quick_start/lenet_mnist.html#_10","text":"\u5728\u9884\u6d4b\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 flow.checkpoint.get \u4ece\u6587\u4ef6\u4e2d\u52a0\u8f7d\u53c2\u6570\u503c\u5230\u5185\u5b58\uff0c\u518d\u901a\u8fc7 flow.load_variables \u5c06\u53c2\u6570\u503c\u66f4\u65b0\u5230\u6a21\u578b\u4e0a\u3002\u5982\u4e0b\u4f8b\uff1a if __name__ == '__main__' : flow . load_variables ( flow . checkpoint . get ( \"./lenet_models_1\" )) #\u6821\u9a8c\u8fc7\u7a0b ...","title":"\u6a21\u578b\u7684\u52a0\u8f7d"},{"location":"single_client/quick_start/lenet_mnist.html#_11","text":"\u7528\u4e8e\u6821\u9a8c\u7684 predict \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u4e0e train \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570 \u51e0\u4e4e\u6ca1\u6709\u533a\u522b \uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u6821\u9a8c\u8fc7\u7a0b\u4e2d\u7684\u6a21\u578b\u53c2\u6570\u6765\u81ea\u4e8e\u5df2\u7ecf\u4fdd\u5b58\u597d\u7684\u6a21\u578b\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u521d\u59cb\u5316\uff0c\u4e0d\u9700\u8981\u66f4\u65b0\u6a21\u578b\u53c2\u6570\uff08\u6240\u4ee5\u4e5f\u4e0d\u7528\u6307\u5b9a optimizer \uff09\u3002","title":"\u6a21\u578b\u7684\u6821\u9a8c"},{"location":"single_client/quick_start/lenet_mnist.html#_12","text":"@flow . global_function ( type = \"predict\" ) def eval_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = False ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) return ( labels , logits ) \u4ee5\u4e0a\u662f\u7528\u4e8e\u6821\u9a8c\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u58f0\u660e\u4e86\u8fd4\u56de\u503c\u7c7b\u578b\u662f Tuple[tp.Numpy, tp.Numpy] \uff0c \u56e0\u6b64\u8fd4\u56de\u4e00\u4e2a tuple \uff0c tuple \u4e2d\u67092\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f1\u4e2a numpy \u5bf9\u8c61\u3002\u6211\u4eec\u5c06\u8c03\u7528 predict \u7c7b\u578b\u4f5c\u4e1a\u51fd\u6570\uff0c\u5e76\u6839\u636e\u8fd4\u56de\u7ed3\u679c\u8ba1\u7b97\u51c6\u786e\u7387\u3002","title":"\u7528\u4e8e\u6821\u9a8c\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u7f16\u5199"},{"location":"single_client/quick_start/lenet_mnist.html#_13","text":"\u4ee5\u4e0b acc \u51fd\u6570\u4e2d\u7edf\u8ba1\u6837\u672c\u7684\u603b\u6570\u76ee\uff0c\u4ee5\u53ca\u6821\u9a8c\u6b63\u786e\u7684\u603b\u6570\u76ee\uff0c\u6211\u4eec\u5c06\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5f97\u5230 labels \u4e0e logits \uff1a g_total = 0 g_correct = 0 def acc ( labels , logits ): global g_total global g_correct predictions = np . argmax ( logits , 1 ) right_count = np . sum ( predictions == labels ) g_total += labels . shape [ 0 ] g_correct += right_count \u8c03\u7528\u6821\u9a8c\u4f5c\u4e1a\u51fd\u6570\uff1a if __name__ == \"__main__\" : flow . load_variables ( flow . checkpoint . get ( \"./lenet_models_1\" )) ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE , BATCH_SIZE ) for epoch in range ( 1 ): for i , ( images , labels ) in enumerate ( zip ( test_images , test_labels )): labels , logits = eval_job ( images , labels ) acc ( labels , logits ) print ( \"accuracy: {0:.1f} %\" . format ( g_correct * 100 / g_total )) \u4ee5\u4e0a\uff0c\u5faa\u73af\u8c03\u7528\u6821\u9a8c\u51fd\u6570\uff0c\u6700\u7ec8\u8f93\u51fa\u5728 MNIST \u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u3002","title":"\u8fed\u4ee3\u6821\u9a8c"},{"location":"single_client/quick_start/lenet_mnist.html#_14","text":"\u5c06\u4ee5\u4e0a\u6821\u9a8c\u4ee3\u7801\u4fee\u6539\uff0c\u4f7f\u5f97\u6821\u9a8c\u6570\u636e\u6765\u81ea\u4e8e\u539f\u59cb\u7684\u56fe\u7247\u800c\u4e0d\u662f\u73b0\u6210\u7684\u6570\u636e\u96c6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u56fe\u7247\u5185\u5bb9\u9884\u6d4b\u3002 def load_image ( file ): im = Image . open ( file ) . convert ( \"L\" ) im = im . resize (( 28 , 28 ), Image . ANTIALIAS ) im = np . array ( im ) . reshape ( 1 , 1 , 28 , 28 ) . astype ( np . float32 ) im = ( im - 128.0 ) / 255.0 im . reshape (( - 1 , 1 , 1 , im . shape [ 1 ], im . shape [ 2 ])) return im def main (): if len ( sys . argv ) != 2 : usage () return flow . load_variables ( flow . checkpoint . get ( \"./lenet_models_1\" )) image = load_image ( sys . argv [ 1 ]) logits = test_job ( image ) prediction = np . argmax ( logits , 1 ) print ( \"prediction: {} \" . format ( prediction [ 0 ])) if __name__ == \"__main__\" : main ()","title":"\u9884\u6d4b\u56fe\u7247"},{"location":"single_client/quick_start/lenet_mnist.html#_15","text":"","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"single_client/quick_start/lenet_mnist.html#_16","text":"\u4ee3\u7801\uff1a lenet_train.py","title":"\u8bad\u7ec3\u6a21\u578b"},{"location":"single_client/quick_start/lenet_mnist.html#_17","text":"\u4ee3\u7801\uff1a lenet_eval.py \u9884\u8bad\u7ec3\u6a21\u578b\uff1a lenet_models_1.zip","title":"\u6821\u9a8c\u6a21\u578b"},{"location":"single_client/quick_start/lenet_mnist.html#_18","text":"\u4ee3\u7801\uff1a lenet_test.py \u9884\u8bad\u7ec3\u6a21\u578b\uff1a lenet_models_1.zip MNIST \u6570\u636e\u96c6\u56fe\u7247\uff1a mnist_raw_images.zip","title":"\u6570\u5b57\u9884\u6d4b"},{"location":"single_client/quick_start/quickstart_in_3_min.html","text":"\u8fd9\u7bc7\u6587\u7ae0\u5c06\u4ecb\u7ecd\u5982\u4f55\u5feb\u901f\u4e0a\u624b OneFlow \uff0c\u6211\u4eec\u53ef\u4ee5\u57283\u5206\u949f\u5185\u5b8c\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u8fc7\u7a0b\u3002 \u8fd0\u884c\u4f8b\u5b50 \u00b6 \u5982\u679c\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86 OneFlow \uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d \u6587\u6863\u4ed3\u5e93 \u4e2d\u7684 mlp_mnist.py \u811a\u672c\uff0c\u5e76\u8fd0\u884c\u3002 wget https://docs.oneflow.org/master/code/quick_start/mlp_mnist.py #\u4e0b\u8f7d\u811a\u672c python3 mlp_mnist.py #\u8fd0\u884c\u811a\u672c \u6211\u4eec\u5c06\u5f97\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u8f93\u51fa\uff1a Epoch [1/20], Loss: 2.3155 Epoch [1/20], Loss: 0.7955 Epoch [1/20], Loss: 0.4653 Epoch [1/20], Loss: 0.2064 Epoch [1/20], Loss: 0.2683 Epoch [1/20], Loss: 0.3167 ... \u8f93\u51fa\u7684\u662f\u4e00\u4e32\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u4ee3\u8868\u4e86\u8bad\u7ec3\u7684\u635f\u5931\u503c\uff0c\u8bad\u7ec3\u7684\u76ee\u6807\u662f\u635f\u5931\u503c\u8d8a\u5c0f\u8d8a\u597d\u3002\u5230\u6b64\u6211\u4eec\u5df2\u7ecf\u7528 OneFlow \u5b8c\u6210\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u3002 \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4ee5\u4e0b\u662f\u5b8c\u6574\u4ee3\u7801\uff0c\u6211\u4eec\u5c06\u5bf9\u5176\u5173\u952e\u90e8\u5206\u8fdb\u884c\u89e3\u8bfb\u3002 # mlp_mnist.py from oneflow.compatible import single_client as flow from oneflow.compatible.single_client import typing as tp import numpy as np BATCH_SIZE = 100 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) initializer1 = flow . random_uniform_initializer ( - 1 / 28.0 , 1 / 28.0 ) hidden = flow . layers . dense ( reshape , 500 , activation = flow . nn . relu , kernel_initializer = initializer1 , bias_initializer = initializer1 , name = \"dense1\" , ) initializer2 = flow . random_uniform_initializer ( - np . sqrt ( 1 / 500.0 ), np . sqrt ( 1 / 500.0 )) logits = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer2 , bias_initializer = initializer2 , name = \"dense2\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.001 ]) flow . optimizer . Adam ( lr_scheduler ) . minimize ( loss ) return loss if __name__ == \"__main__\" : ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE , BATCH_SIZE ) for epoch in range ( 20 ): for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( 'Epoch [ {} / {} ], Loss: {:.4f} ' . format ( epoch + 1 , 20 , loss . mean ())) \u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u7b80\u5355\u4ecb\u7ecd\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u3002 OneFlow \u76f8\u5bf9\u5176\u4ed6\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u8f83\u7279\u6b8a\u7684\u5730\u65b9\u662f\u8fd9\u91cc\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : train_job \u662f\u4e00\u4e2a\u88ab @flow.global_function \u4fee\u9970\u7684\u51fd\u6570\uff0c\u901a\u5e38\u79f0\u4e3a \u4f5c\u4e1a\u51fd\u6570 (job function)\u3002\u53ea\u6709\u4f5c\u4e1a\u51fd\u6570\u624d\u80fd\u591f\u88ab OneFlow \u8bc6\u522b\uff0c\u8fdb\u884c\u8bad\u7ec3\u6216\u8005\u9884\u6d4b\u3002\u901a\u8fc7 type \u6765\u6307\u5b9a job \u7684\u7c7b\u578b\uff1a type=\"train\" \u4e3a\u8bad\u7ec3\u4f5c\u4e1a\uff1b type=\"predict\" \u4e3a\u9884\u6d4b\u4f5c\u4e1a\u3002 \u5728 OneFlow \u4e2d\uff0c\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u6216\u8005\u9884\u6d4b\u9700\u8981\u4e24\u90e8\u5206\u4fe1\u606f\uff1a \u4e00\u90e8\u5206\u662f\u8fd9\u4e2a\u795e\u7ecf\u7f51\u7edc\u672c\u8eab\u7684\u7ed3\u6784\u548c\u76f8\u5173\u53c2\u6570\uff0c\u8fd9\u4e9b\u5728\u4e0a\u6587\u63d0\u5230\u7684\u4f5c\u4e1a\u51fd\u6570\u91cc\u5b9a\u4e49\uff1b \u53e6\u5916\u4e00\u90e8\u5206\u662f\u4f7f\u7528\u4ec0\u4e48\u6837\u7684\u914d\u7f6e\u53bb\u8bad\u7ec3\u8fd9\u4e2a\u7f51\u7edc\uff0c\u6bd4\u5982 learning rate \u3001\u6a21\u578b\u4f18\u5316\u66f4\u65b0\u7684\u65b9\u6cd5\u3002\u8fd9\u4e9b\u5728 job function \u91cc\u914d\u7f6e\u5982\u4e0b\uff1a lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.001 ]) flow . optimizer . Adam ( lr_scheduler ) . minimize ( loss ) \u672c\u6587\u4f8b\u5b50\u4e2d\u5305\u542b\u4e86\u8bad\u7ec3\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\u7684\u6240\u6709\u5143\u7d20\uff0c\u9664\u4e86\u4e0a\u9762\u8bf4\u7684\u4f5c\u4e1a\u51fd\u6570\u53ca\u5176\u914d\u7f6e\u4e4b\u5916\uff0c\u8fd8\u6709\uff1a flow.data.load_mnist(BATCH_SIZE,BATCH_SIZE) : \u51c6\u5907\u5e76\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e\uff1b train_job(images, labels) : \u8fd4\u56de\u6bcf\u4e00\u6b21\u8bad\u7ec3\u7684\u635f\u5931\u503c\uff1b print(..., loss.mean()) : \u6bcf\u8bad\u7ec320\u6b21\uff0c\u6253\u5370\u4e00\u6b21\u635f\u5931\u503c\u3002 \u4ee5\u4e0a\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u5728 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u4e2d\uff0c\u6211\u4eec\u5bf9\u4f7f\u7528 OneFlow \u7684\u6d41\u7a0b\u8fdb\u884c\u4e86\u66f4\u52a0\u5168\u9762\u548c\u5177\u4f53\u7684\u4ecb\u7ecd\u3002 \u5728 OneFlow \u57fa\u7840\u4e13\u9898 \u4e2d\u5bf9\u4e8e\u8bad\u7ec3\u4e2d\u5404\u7c7b\u95ee\u9898\u8fdb\u884c\u4e86\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u6211\u4eec\u540c\u65f6\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u7f51\u7edc\u7684 \u6837\u4f8b\u4ee3\u7801 \u53ca\u6570\u636e\u4f9b\u53c2\u8003\u3002 FAQ \u00b6 \u8fd0\u884c\u672c\u6587\u811a\u672c\u65f6\uff0c\u4e3a\u4ec0\u4e48\u4e00\u76f4\u5361\u7740\u4e0d\u52a8\uff1f \u53ef\u80fd\u662f\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6e\u4e86\u9519\u8bef\u7684\u4ee3\u7406\u3002\u53ef\u4ee5\u5148\u901a\u8fc7\u8fd0\u884c\u547d\u4ee4\u53d6\u6d88\u4ee3\u7406 unset http_proxy unset https_proxy unset HTTP_PROXY unset HTTPS_PROXY \u7136\u540e\u518d\u8fdb\u884c\u5c1d\u8bd5 \u6211\u7535\u8111\u65e0\u6cd5\u8054\u7f51\uff0c\u8fd0\u884c\u811a\u672c\u65f6\u4e00\u76f4\u5361\u7740\u4e0d\u52a8 \u672c\u6587\u811a\u672c\u4f1a\u81ea\u52a8\u4ece\u7f51\u7edc\u4e0b\u8f7d\u9700\u8981\u7684\u6570\u636e\u6587\u4ef6\uff0c\u5982\u679c\u7535\u8111\u65e0\u6cd5\u8054\u7f51\uff0c\u5219\u9700\u8981\u70b9\u51fb \u8fd9\u91cc \u624b\u5de5\u4e0b\u8f7d\uff0c\u5e76\u5c06\u5b83\u653e\u7f6e\u5728\u811a\u672c mlp_mnist.py \u76f8\u540c\u8def\u5f84\u4e0b\uff0c\u7136\u540e\u518d\u8fdb\u884c\u5c1d\u8bd5","title":"3\u5206\u949f\u5feb\u901f\u4e0a\u624b"},{"location":"single_client/quick_start/quickstart_in_3_min.html#_1","text":"\u5982\u679c\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86 OneFlow \uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d \u6587\u6863\u4ed3\u5e93 \u4e2d\u7684 mlp_mnist.py \u811a\u672c\uff0c\u5e76\u8fd0\u884c\u3002 wget https://docs.oneflow.org/master/code/quick_start/mlp_mnist.py #\u4e0b\u8f7d\u811a\u672c python3 mlp_mnist.py #\u8fd0\u884c\u811a\u672c \u6211\u4eec\u5c06\u5f97\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u8f93\u51fa\uff1a Epoch [1/20], Loss: 2.3155 Epoch [1/20], Loss: 0.7955 Epoch [1/20], Loss: 0.4653 Epoch [1/20], Loss: 0.2064 Epoch [1/20], Loss: 0.2683 Epoch [1/20], Loss: 0.3167 ... \u8f93\u51fa\u7684\u662f\u4e00\u4e32\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u4ee3\u8868\u4e86\u8bad\u7ec3\u7684\u635f\u5931\u503c\uff0c\u8bad\u7ec3\u7684\u76ee\u6807\u662f\u635f\u5931\u503c\u8d8a\u5c0f\u8d8a\u597d\u3002\u5230\u6b64\u6211\u4eec\u5df2\u7ecf\u7528 OneFlow \u5b8c\u6210\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u3002","title":"\u8fd0\u884c\u4f8b\u5b50"},{"location":"single_client/quick_start/quickstart_in_3_min.html#_2","text":"\u4ee5\u4e0b\u662f\u5b8c\u6574\u4ee3\u7801\uff0c\u6211\u4eec\u5c06\u5bf9\u5176\u5173\u952e\u90e8\u5206\u8fdb\u884c\u89e3\u8bfb\u3002 # mlp_mnist.py from oneflow.compatible import single_client as flow from oneflow.compatible.single_client import typing as tp import numpy as np BATCH_SIZE = 100 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) initializer1 = flow . random_uniform_initializer ( - 1 / 28.0 , 1 / 28.0 ) hidden = flow . layers . dense ( reshape , 500 , activation = flow . nn . relu , kernel_initializer = initializer1 , bias_initializer = initializer1 , name = \"dense1\" , ) initializer2 = flow . random_uniform_initializer ( - np . sqrt ( 1 / 500.0 ), np . sqrt ( 1 / 500.0 )) logits = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer2 , bias_initializer = initializer2 , name = \"dense2\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.001 ]) flow . optimizer . Adam ( lr_scheduler ) . minimize ( loss ) return loss if __name__ == \"__main__\" : ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE , BATCH_SIZE ) for epoch in range ( 20 ): for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( 'Epoch [ {} / {} ], Loss: {:.4f} ' . format ( epoch + 1 , 20 , loss . mean ())) \u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u7b80\u5355\u4ecb\u7ecd\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u3002 OneFlow \u76f8\u5bf9\u5176\u4ed6\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u8f83\u7279\u6b8a\u7684\u5730\u65b9\u662f\u8fd9\u91cc\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : train_job \u662f\u4e00\u4e2a\u88ab @flow.global_function \u4fee\u9970\u7684\u51fd\u6570\uff0c\u901a\u5e38\u79f0\u4e3a \u4f5c\u4e1a\u51fd\u6570 (job function)\u3002\u53ea\u6709\u4f5c\u4e1a\u51fd\u6570\u624d\u80fd\u591f\u88ab OneFlow \u8bc6\u522b\uff0c\u8fdb\u884c\u8bad\u7ec3\u6216\u8005\u9884\u6d4b\u3002\u901a\u8fc7 type \u6765\u6307\u5b9a job \u7684\u7c7b\u578b\uff1a type=\"train\" \u4e3a\u8bad\u7ec3\u4f5c\u4e1a\uff1b type=\"predict\" \u4e3a\u9884\u6d4b\u4f5c\u4e1a\u3002 \u5728 OneFlow \u4e2d\uff0c\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u6216\u8005\u9884\u6d4b\u9700\u8981\u4e24\u90e8\u5206\u4fe1\u606f\uff1a \u4e00\u90e8\u5206\u662f\u8fd9\u4e2a\u795e\u7ecf\u7f51\u7edc\u672c\u8eab\u7684\u7ed3\u6784\u548c\u76f8\u5173\u53c2\u6570\uff0c\u8fd9\u4e9b\u5728\u4e0a\u6587\u63d0\u5230\u7684\u4f5c\u4e1a\u51fd\u6570\u91cc\u5b9a\u4e49\uff1b \u53e6\u5916\u4e00\u90e8\u5206\u662f\u4f7f\u7528\u4ec0\u4e48\u6837\u7684\u914d\u7f6e\u53bb\u8bad\u7ec3\u8fd9\u4e2a\u7f51\u7edc\uff0c\u6bd4\u5982 learning rate \u3001\u6a21\u578b\u4f18\u5316\u66f4\u65b0\u7684\u65b9\u6cd5\u3002\u8fd9\u4e9b\u5728 job function \u91cc\u914d\u7f6e\u5982\u4e0b\uff1a lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.001 ]) flow . optimizer . Adam ( lr_scheduler ) . minimize ( loss ) \u672c\u6587\u4f8b\u5b50\u4e2d\u5305\u542b\u4e86\u8bad\u7ec3\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\u7684\u6240\u6709\u5143\u7d20\uff0c\u9664\u4e86\u4e0a\u9762\u8bf4\u7684\u4f5c\u4e1a\u51fd\u6570\u53ca\u5176\u914d\u7f6e\u4e4b\u5916\uff0c\u8fd8\u6709\uff1a flow.data.load_mnist(BATCH_SIZE,BATCH_SIZE) : \u51c6\u5907\u5e76\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e\uff1b train_job(images, labels) : \u8fd4\u56de\u6bcf\u4e00\u6b21\u8bad\u7ec3\u7684\u635f\u5931\u503c\uff1b print(..., loss.mean()) : \u6bcf\u8bad\u7ec320\u6b21\uff0c\u6253\u5370\u4e00\u6b21\u635f\u5931\u503c\u3002 \u4ee5\u4e0a\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u5728 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u4e2d\uff0c\u6211\u4eec\u5bf9\u4f7f\u7528 OneFlow \u7684\u6d41\u7a0b\u8fdb\u884c\u4e86\u66f4\u52a0\u5168\u9762\u548c\u5177\u4f53\u7684\u4ecb\u7ecd\u3002 \u5728 OneFlow \u57fa\u7840\u4e13\u9898 \u4e2d\u5bf9\u4e8e\u8bad\u7ec3\u4e2d\u5404\u7c7b\u95ee\u9898\u8fdb\u884c\u4e86\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u6211\u4eec\u540c\u65f6\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u7f51\u7edc\u7684 \u6837\u4f8b\u4ee3\u7801 \u53ca\u6570\u636e\u4f9b\u53c2\u8003\u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"single_client/quick_start/quickstart_in_3_min.html#faq","text":"\u8fd0\u884c\u672c\u6587\u811a\u672c\u65f6\uff0c\u4e3a\u4ec0\u4e48\u4e00\u76f4\u5361\u7740\u4e0d\u52a8\uff1f \u53ef\u80fd\u662f\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6e\u4e86\u9519\u8bef\u7684\u4ee3\u7406\u3002\u53ef\u4ee5\u5148\u901a\u8fc7\u8fd0\u884c\u547d\u4ee4\u53d6\u6d88\u4ee3\u7406 unset http_proxy unset https_proxy unset HTTP_PROXY unset HTTPS_PROXY \u7136\u540e\u518d\u8fdb\u884c\u5c1d\u8bd5 \u6211\u7535\u8111\u65e0\u6cd5\u8054\u7f51\uff0c\u8fd0\u884c\u811a\u672c\u65f6\u4e00\u76f4\u5361\u7740\u4e0d\u52a8 \u672c\u6587\u811a\u672c\u4f1a\u81ea\u52a8\u4ece\u7f51\u7edc\u4e0b\u8f7d\u9700\u8981\u7684\u6570\u636e\u6587\u4ef6\uff0c\u5982\u679c\u7535\u8111\u65e0\u6cd5\u8054\u7f51\uff0c\u5219\u9700\u8981\u70b9\u51fb \u8fd9\u91cc \u624b\u5de5\u4e0b\u8f7d\uff0c\u5e76\u5c06\u5b83\u653e\u7f6e\u5728\u811a\u672c mlp_mnist.py \u76f8\u540c\u8def\u5f84\u4e0b\uff0c\u7136\u540e\u518d\u8fdb\u884c\u5c1d\u8bd5","title":"FAQ"}]}